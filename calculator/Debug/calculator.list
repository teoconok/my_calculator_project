
calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d04  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08006e18  08006e18  00007e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007270  08007270  000091e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007270  08007270  00008270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007278  08007278  000091e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007278  08007278  00008278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800727c  0800727c  0000827c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08007280  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001e8  08007468  000091e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08007468  00009358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036ec  00000000  00000000  00009211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012f3  00000000  00000000  0000c8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  0000dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000385  00000000  00000000  0000e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176df  00000000  00000000  0000e465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066a1  00000000  00000000  00025b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081544  00000000  00000000  0002c1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad729  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002654  00000000  00000000  000ad76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000afdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dfc 	.word	0x08006dfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08006dfc 	.word	0x08006dfc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <LCD_Write>:
#include "LCD16x2.h"
#include "string.h"
#include "stdio.h"

void LCD_Write(uint8_t data)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT, LCD_D4, ((data >> 0) & 0x01));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	2108      	movs	r1, #8
 8000bea:	481a      	ldr	r0, [pc, #104]	@ (8000c54 <LCD_Write+0x80>)
 8000bec:	f001 f9b5 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D5, ((data >> 1) & 0x01));
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	085b      	lsrs	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	2110      	movs	r1, #16
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <LCD_Write+0x80>)
 8000c02:	f001 f9aa 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D6, ((data >> 2) & 0x01));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	2120      	movs	r1, #32
 8000c16:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <LCD_Write+0x80>)
 8000c18:	f001 f99f 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D7, ((data >> 3) & 0x01));
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	2140      	movs	r1, #64	@ 0x40
 8000c2c:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <LCD_Write+0x80>)
 8000c2e:	f001 f994 	bl	8001f5a <HAL_GPIO_WritePin>

// active enable pin
	HAL_GPIO_WritePin(LCD_PORT,LCD_E, 1);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2104      	movs	r1, #4
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <LCD_Write+0x80>)
 8000c38:	f001 f98f 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f000 fee9 	bl	8001a14 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT,LCD_E, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2104      	movs	r1, #4
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <LCD_Write+0x80>)
 8000c48:	f001 f987 	bl	8001f5a <HAL_GPIO_WritePin>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40010800 	.word	0x40010800

08000c58 <LCD_Send>:
void LCD_Send(uint8_t Reg, uint8_t data)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD_PORT, LCD_RS, Reg);   // Reg = 0 : data register ; Reg = 1 : command register
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <LCD_Send+0x38>)
 8000c70:	f001 f973 	bl	8001f5a <HAL_GPIO_WritePin>
	LCD_Write(data >> 4);
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffaa 	bl	8000bd4 <LCD_Write>
	LCD_Write(data);
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ffa6 	bl	8000bd4 <LCD_Write>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40010800 	.word	0x40010800

08000c94 <LCD_Init>:
void LCD_Init()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT, LCD_RW, 0);    // choose write mode
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <LCD_Init+0x44>)
 8000c9e:	f001 f95c 	bl	8001f5a <HAL_GPIO_WritePin>

	LCD_Send(cmd_reg, 0x33);                   // initiate command
 8000ca2:	2133      	movs	r1, #51	@ 0x33
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff ffd7 	bl	8000c58 <LCD_Send>
	LCD_Send(cmd_reg, 0x32);                  // initiate command
 8000caa:	2132      	movs	r1, #50	@ 0x32
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ffd3 	bl	8000c58 <LCD_Send>
	LCD_Send(cmd_reg, 0x28);                   // 4 bit mode, 2 row, 5x7
 8000cb2:	2128      	movs	r1, #40	@ 0x28
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ffcf 	bl	8000c58 <LCD_Send>
	LCD_Send(cmd_reg, 0x0C);                   // display screen and pointer
 8000cba:	210c      	movs	r1, #12
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ffcb 	bl	8000c58 <LCD_Send>
	LCD_Send(cmd_reg, 0x06);                  // increase pointer
 8000cc2:	2106      	movs	r1, #6
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff ffc7 	bl	8000c58 <LCD_Send>
	LCD_Send(cmd_reg, 0x01);                   // Clear all data on LCD
 8000cca:	2101      	movs	r1, #1
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff ffc3 	bl	8000c58 <LCD_Send>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40010800 	.word	0x40010800

08000cdc <LCD_Clear>:
void LCD_Clear()                                //Clear all data on LCD
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	LCD_Send(cmd_reg, 0x01);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ffb8 	bl	8000c58 <LCD_Send>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <LCD_Location>:
void LCD_Location(uint8_t x, uint8_t y)         // choose location
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
  if(y == 0)
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <LCD_Location+0x26>
	  LCD_Send(cmd_reg, 0x80 + x);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	3b80      	subs	r3, #128	@ 0x80
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff ffa4 	bl	8000c58 <LCD_Send>
  else if(y == 1)
	  LCD_Send(cmd_reg, 0xC0 + x);
}
 8000d10:	e009      	b.n	8000d26 <LCD_Location+0x3a>
  else if(y == 1)
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d106      	bne.n	8000d26 <LCD_Location+0x3a>
	  LCD_Send(cmd_reg, 0xC0 + x);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	3b40      	subs	r3, #64	@ 0x40
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4619      	mov	r1, r3
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff ff99 	bl	8000c58 <LCD_Send>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <LCD_Write_String>:
void LCD_Write_String(char* string){              // Display data on LCD
 8000d2e:	b590      	push	{r4, r7, lr}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	e00a      	b.n	8000d52 <LCD_Write_String+0x24>
	{
		LCD_Send(data_reg, string[i]);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff ff86 	bl	8000c58 <LCD_Send>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	7bfc      	ldrb	r4, [r7, #15]
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff f9fb 	bl	8000150 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	d3ed      	bcc.n	8000d3c <LCD_Write_String+0xe>
	}
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
	...

08000d6c <LCD_Write_Number>:
void LCD_Write_Number(double number)                 // Display number on LCD
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	@ 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	e9c7 0100 	strd	r0, r1, [r7]
	char buffer[15];
	for (int i=0;i<15;i++){
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d7a:	e008      	b.n	8000d8e <LCD_Write_Number+0x22>
		buffer[i]='\0';
 8000d7c:	f107 020c 	add.w	r2, r7, #12
 8000d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d82:	4413      	add	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<15;i++){
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d90:	2b0e      	cmp	r3, #14
 8000d92:	ddf3      	ble.n	8000d7c <LCD_Write_Number+0x10>
	}
	sprintf(buffer, "%.4f", number);
 8000d94:	f107 000c 	add.w	r0, r7, #12
 8000d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d9c:	492e      	ldr	r1, [pc, #184]	@ (8000e58 <LCD_Write_Number+0xec>)
 8000d9e:	f002 fc01 	bl	80035a4 <siprintf>
	int z=0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i=0; i<strlen(buffer); i++){
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000daa:	e02d      	b.n	8000e08 <LCD_Write_Number+0x9c>
        if (buffer[i] == '.'){
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db2:	4413      	add	r3, r2
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000db8:	d123      	bne.n	8000e02 <LCD_Write_Number+0x96>
            z = i;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (int i = z+1; i<strlen(buffer); i++){
 8000dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
 8000dc4:	e013      	b.n	8000dee <LCD_Write_Number+0x82>
                if (buffer[i]>='1' && buffer[i]<='9'){
 8000dc6:	f107 020c 	add.w	r2, r7, #12
 8000dca:	6a3b      	ldr	r3, [r7, #32]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b30      	cmp	r3, #48	@ 0x30
 8000dd2:	d909      	bls.n	8000de8 <LCD_Write_Number+0x7c>
 8000dd4:	f107 020c 	add.w	r2, r7, #12
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b39      	cmp	r3, #57	@ 0x39
 8000de0:	d802      	bhi.n	8000de8 <LCD_Write_Number+0x7c>
                z = i+1;
 8000de2:	6a3b      	ldr	r3, [r7, #32]
 8000de4:	3301      	adds	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (int i = z+1; i<strlen(buffer); i++){
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	3301      	adds	r3, #1
 8000dec:	623b      	str	r3, [r7, #32]
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff f9ac 	bl	8000150 <strlen>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8e2      	bhi.n	8000dc6 <LCD_Write_Number+0x5a>
                }
            }
            break;
 8000e00:	e00b      	b.n	8000e1a <LCD_Write_Number+0xae>
    for (int i=0; i<strlen(buffer); i++){
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	3301      	adds	r3, #1
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f99f 	bl	8000150 <strlen>
 8000e12:	4602      	mov	r2, r0
 8000e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d8c8      	bhi.n	8000dac <LCD_Write_Number+0x40>
        }
    }
    for (int i = z; i<strlen(buffer); i++){
 8000e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e008      	b.n	8000e32 <LCD_Write_Number+0xc6>
        buffer[i]='\0';
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	4413      	add	r3, r2
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
    for (int i = z; i<strlen(buffer); i++){
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f98a 	bl	8000150 <strlen>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8ed      	bhi.n	8000e20 <LCD_Write_Number+0xb4>
    }
	LCD_Write_String(buffer);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff70 	bl	8000d2e <LCD_Write_String>
}
 8000e4e:	bf00      	nop
 8000e50:	3730      	adds	r7, #48	@ 0x30
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08006e18 	.word	0x08006e18

08000e5c <Key_Scan>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
char num_op[17] = {'1','4','7','d','2','5','8','0','3','6','9','=','+','-', '*', '/'}; // define button
char Key_Scan(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e66:	48a8      	ldr	r0, [pc, #672]	@ (8001108 <Key_Scan+0x2ac>)
 8000e68:	f001 f877 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000e72:	48a5      	ldr	r0, [pc, #660]	@ (8001108 <Key_Scan+0x2ac>)
 8000e74:	f001 f871 	bl	8001f5a <HAL_GPIO_WritePin>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	48a4      	ldr	r0, [pc, #656]	@ (800110c <Key_Scan+0x2b0>)
 8000e7c:	f001 f856 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10a      	bne.n	8000e9c <Key_Scan+0x40>
		// press button 7
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7));
 8000e86:	bf00      	nop
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	48a0      	ldr	r0, [pc, #640]	@ (800110c <Key_Scan+0x2b0>)
 8000e8c:	f001 f84e 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f8      	beq.n	8000e88 <Key_Scan+0x2c>
		return num_op[0];
 8000e96:	4b9e      	ldr	r3, [pc, #632]	@ (8001110 <Key_Scan+0x2b4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	e150      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8000e9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ea0:	489a      	ldr	r0, [pc, #616]	@ (800110c <Key_Scan+0x2b0>)
 8000ea2:	f001 f843 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10b      	bne.n	8000ec4 <Key_Scan+0x68>
		// press button 8
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000eac:	bf00      	nop
 8000eae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eb2:	4896      	ldr	r0, [pc, #600]	@ (800110c <Key_Scan+0x2b0>)
 8000eb4:	f001 f83a 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f7      	beq.n	8000eae <Key_Scan+0x52>
		return num_op[1];
 8000ebe:	4b94      	ldr	r3, [pc, #592]	@ (8001110 <Key_Scan+0x2b4>)
 8000ec0:	785b      	ldrb	r3, [r3, #1]
 8000ec2:	e13c      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000ec4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ec8:	4890      	ldr	r0, [pc, #576]	@ (800110c <Key_Scan+0x2b0>)
 8000eca:	f001 f82f 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10b      	bne.n	8000eec <Key_Scan+0x90>
		// press button 9
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 8000ed4:	bf00      	nop
 8000ed6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eda:	488c      	ldr	r0, [pc, #560]	@ (800110c <Key_Scan+0x2b0>)
 8000edc:	f001 f826 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f7      	beq.n	8000ed6 <Key_Scan+0x7a>
		return num_op[2];
 8000ee6:	4b8a      	ldr	r3, [pc, #552]	@ (8001110 <Key_Scan+0x2b4>)
 8000ee8:	789b      	ldrb	r3, [r3, #2]
 8000eea:	e128      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8000eec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef0:	4886      	ldr	r0, [pc, #536]	@ (800110c <Key_Scan+0x2b0>)
 8000ef2:	f001 f81b 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10b      	bne.n	8000f14 <Key_Scan+0xb8>
		// press button 10
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8000efc:	bf00      	nop
 8000efe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f02:	4882      	ldr	r0, [pc, #520]	@ (800110c <Key_Scan+0x2b0>)
 8000f04:	f001 f812 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f7      	beq.n	8000efe <Key_Scan+0xa2>
		return num_op[3];
 8000f0e:	4b80      	ldr	r3, [pc, #512]	@ (8001110 <Key_Scan+0x2b4>)
 8000f10:	78db      	ldrb	r3, [r3, #3]
 8000f12:	e114      	b.n	800113e <Key_Scan+0x2e2>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f1a:	487b      	ldr	r0, [pc, #492]	@ (8001108 <Key_Scan+0x2ac>)
 8000f1c:	f001 f81d 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8000f26:	4878      	ldr	r0, [pc, #480]	@ (8001108 <Key_Scan+0x2ac>)
 8000f28:	f001 f817 	bl	8001f5a <HAL_GPIO_WritePin>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8000f2c:	2180      	movs	r1, #128	@ 0x80
 8000f2e:	4877      	ldr	r0, [pc, #476]	@ (800110c <Key_Scan+0x2b0>)
 8000f30:	f000 fffc 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <Key_Scan+0xf4>
		// press button 7
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7));
 8000f3a:	bf00      	nop
 8000f3c:	2180      	movs	r1, #128	@ 0x80
 8000f3e:	4873      	ldr	r0, [pc, #460]	@ (800110c <Key_Scan+0x2b0>)
 8000f40:	f000 fff4 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f8      	beq.n	8000f3c <Key_Scan+0xe0>
		return num_op[4];
 8000f4a:	4b71      	ldr	r3, [pc, #452]	@ (8001110 <Key_Scan+0x2b4>)
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	e0f6      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8000f50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f54:	486d      	ldr	r0, [pc, #436]	@ (800110c <Key_Scan+0x2b0>)
 8000f56:	f000 ffe9 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10b      	bne.n	8000f78 <Key_Scan+0x11c>
		// press button 8
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000f60:	bf00      	nop
 8000f62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f66:	4869      	ldr	r0, [pc, #420]	@ (800110c <Key_Scan+0x2b0>)
 8000f68:	f000 ffe0 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f7      	beq.n	8000f62 <Key_Scan+0x106>
		return num_op[5];
 8000f72:	4b67      	ldr	r3, [pc, #412]	@ (8001110 <Key_Scan+0x2b4>)
 8000f74:	795b      	ldrb	r3, [r3, #5]
 8000f76:	e0e2      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000f78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7c:	4863      	ldr	r0, [pc, #396]	@ (800110c <Key_Scan+0x2b0>)
 8000f7e:	f000 ffd5 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10b      	bne.n	8000fa0 <Key_Scan+0x144>
		// press button 9
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 8000f88:	bf00      	nop
 8000f8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f8e:	485f      	ldr	r0, [pc, #380]	@ (800110c <Key_Scan+0x2b0>)
 8000f90:	f000 ffcc 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f7      	beq.n	8000f8a <Key_Scan+0x12e>
		return num_op[6];
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001110 <Key_Scan+0x2b4>)
 8000f9c:	799b      	ldrb	r3, [r3, #6]
 8000f9e:	e0ce      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8000fa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa4:	4859      	ldr	r0, [pc, #356]	@ (800110c <Key_Scan+0x2b0>)
 8000fa6:	f000 ffc1 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10b      	bne.n	8000fc8 <Key_Scan+0x16c>
		// press button 10
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8000fb0:	bf00      	nop
 8000fb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb6:	4855      	ldr	r0, [pc, #340]	@ (800110c <Key_Scan+0x2b0>)
 8000fb8:	f000 ffb8 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f7      	beq.n	8000fb2 <Key_Scan+0x156>
		return num_op[7];
 8000fc2:	4b53      	ldr	r3, [pc, #332]	@ (8001110 <Key_Scan+0x2b4>)
 8000fc4:	79db      	ldrb	r3, [r3, #7]
 8000fc6:	e0ba      	b.n	800113e <Key_Scan+0x2e2>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fce:	484e      	ldr	r0, [pc, #312]	@ (8001108 <Key_Scan+0x2ac>)
 8000fd0:	f000 ffc3 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8000fda:	484b      	ldr	r0, [pc, #300]	@ (8001108 <Key_Scan+0x2ac>)
 8000fdc:	f000 ffbd 	bl	8001f5a <HAL_GPIO_WritePin>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8000fe0:	2180      	movs	r1, #128	@ 0x80
 8000fe2:	484a      	ldr	r0, [pc, #296]	@ (800110c <Key_Scan+0x2b0>)
 8000fe4:	f000 ffa2 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10a      	bne.n	8001004 <Key_Scan+0x1a8>
		// press button 7
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7));
 8000fee:	bf00      	nop
 8000ff0:	2180      	movs	r1, #128	@ 0x80
 8000ff2:	4846      	ldr	r0, [pc, #280]	@ (800110c <Key_Scan+0x2b0>)
 8000ff4:	f000 ff9a 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f8      	beq.n	8000ff0 <Key_Scan+0x194>
		return num_op[8];
 8000ffe:	4b44      	ldr	r3, [pc, #272]	@ (8001110 <Key_Scan+0x2b4>)
 8001000:	7a1b      	ldrb	r3, [r3, #8]
 8001002:	e09c      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 8001004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001008:	4840      	ldr	r0, [pc, #256]	@ (800110c <Key_Scan+0x2b0>)
 800100a:	f000 ff8f 	bl	8001f2c <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10b      	bne.n	800102c <Key_Scan+0x1d0>
		// press button 8
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8001014:	bf00      	nop
 8001016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101a:	483c      	ldr	r0, [pc, #240]	@ (800110c <Key_Scan+0x2b0>)
 800101c:	f000 ff86 	bl	8001f2c <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f7      	beq.n	8001016 <Key_Scan+0x1ba>
		return num_op[9];
 8001026:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <Key_Scan+0x2b4>)
 8001028:	7a5b      	ldrb	r3, [r3, #9]
 800102a:	e088      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 800102c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001030:	4836      	ldr	r0, [pc, #216]	@ (800110c <Key_Scan+0x2b0>)
 8001032:	f000 ff7b 	bl	8001f2c <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10b      	bne.n	8001054 <Key_Scan+0x1f8>
		// press button 9
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 800103c:	bf00      	nop
 800103e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001042:	4832      	ldr	r0, [pc, #200]	@ (800110c <Key_Scan+0x2b0>)
 8001044:	f000 ff72 	bl	8001f2c <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f7      	beq.n	800103e <Key_Scan+0x1e2>
		return num_op[10];
 800104e:	4b30      	ldr	r3, [pc, #192]	@ (8001110 <Key_Scan+0x2b4>)
 8001050:	7a9b      	ldrb	r3, [r3, #10]
 8001052:	e074      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8001054:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001058:	482c      	ldr	r0, [pc, #176]	@ (800110c <Key_Scan+0x2b0>)
 800105a:	f000 ff67 	bl	8001f2c <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10b      	bne.n	800107c <Key_Scan+0x220>
		// press button 10
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8001064:	bf00      	nop
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	4828      	ldr	r0, [pc, #160]	@ (800110c <Key_Scan+0x2b0>)
 800106c:	f000 ff5e 	bl	8001f2c <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f7      	beq.n	8001066 <Key_Scan+0x20a>
		return num_op[11];
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <Key_Scan+0x2b4>)
 8001078:	7adb      	ldrb	r3, [r3, #11]
 800107a:	e060      	b.n	800113e <Key_Scan+0x2e2>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001082:	4821      	ldr	r0, [pc, #132]	@ (8001108 <Key_Scan+0x2ac>)
 8001084:	f000 ff69 	bl	8001f5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 , 1);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800108e:	481e      	ldr	r0, [pc, #120]	@ (8001108 <Key_Scan+0x2ac>)
 8001090:	f000 ff63 	bl	8001f5a <HAL_GPIO_WritePin>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	481d      	ldr	r0, [pc, #116]	@ (800110c <Key_Scan+0x2b0>)
 8001098:	f000 ff48 	bl	8001f2c <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10a      	bne.n	80010b8 <Key_Scan+0x25c>
		// press button 7
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7));
 80010a2:	bf00      	nop
 80010a4:	2180      	movs	r1, #128	@ 0x80
 80010a6:	4819      	ldr	r0, [pc, #100]	@ (800110c <Key_Scan+0x2b0>)
 80010a8:	f000 ff40 	bl	8001f2c <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f8      	beq.n	80010a4 <Key_Scan+0x248>
		return num_op[12];
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <Key_Scan+0x2b4>)
 80010b4:	7b1b      	ldrb	r3, [r3, #12]
 80010b6:	e042      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 80010b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010bc:	4813      	ldr	r0, [pc, #76]	@ (800110c <Key_Scan+0x2b0>)
 80010be:	f000 ff35 	bl	8001f2c <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10b      	bne.n	80010e0 <Key_Scan+0x284>
		// press button 8
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 80010c8:	bf00      	nop
 80010ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ce:	480f      	ldr	r0, [pc, #60]	@ (800110c <Key_Scan+0x2b0>)
 80010d0:	f000 ff2c 	bl	8001f2c <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f7      	beq.n	80010ca <Key_Scan+0x26e>
		return num_op[13];
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <Key_Scan+0x2b4>)
 80010dc:	7b5b      	ldrb	r3, [r3, #13]
 80010de:	e02e      	b.n	800113e <Key_Scan+0x2e2>
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 80010e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e4:	4809      	ldr	r0, [pc, #36]	@ (800110c <Key_Scan+0x2b0>)
 80010e6:	f000 ff21 	bl	8001f2c <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d111      	bne.n	8001114 <Key_Scan+0x2b8>
		// press button 9
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 80010f0:	bf00      	nop
 80010f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <Key_Scan+0x2b0>)
 80010f8:	f000 ff18 	bl	8001f2c <HAL_GPIO_ReadPin>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f7      	beq.n	80010f2 <Key_Scan+0x296>
		return num_op[14];
 8001102:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <Key_Scan+0x2b4>)
 8001104:	7b9b      	ldrb	r3, [r3, #14]
 8001106:	e01a      	b.n	800113e <Key_Scan+0x2e2>
 8001108:	40010c00 	.word	0x40010c00
 800110c:	40010800 	.word	0x40010800
 8001110:	20000000 	.word	0x20000000
	}
	else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8001114:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001118:	480a      	ldr	r0, [pc, #40]	@ (8001144 <Key_Scan+0x2e8>)
 800111a:	f000 ff07 	bl	8001f2c <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <Key_Scan+0x2e0>
		// press button 10
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8001124:	bf00      	nop
 8001126:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <Key_Scan+0x2e8>)
 800112c:	f000 fefe 	bl	8001f2c <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f7      	beq.n	8001126 <Key_Scan+0x2ca>
		return num_op[15];
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <Key_Scan+0x2ec>)
 8001138:	7bdb      	ldrb	r3, [r3, #15]
 800113a:	e000      	b.n	800113e <Key_Scan+0x2e2>
	}
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40010800 	.word	0x40010800
 8001148:	20000000 	.word	0x20000000

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	b0a9      	sub	sp, #164	@ 0xa4
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fbfc 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 fa0a 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 fa44 	bl	80015e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8001160:	f7ff fd98 	bl	8000c94 <LCD_Init>
  LCD_Clear();
 8001164:	f7ff fdba 	bl	8000cdc <LCD_Clear>
  char array[30]; // store all data when pressing except "del" button
  int t = -1; // Current order in array[30]
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int x = -1; // Location on LCD
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		char k = Key_Scan();
 8001178:	f7ff fe70 	bl	8000e5c <Key_Scan>
 800117c:	4603      	mov	r3, r0
 800117e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if(k){
 8001182:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f6      	beq.n	8001178 <main+0x2c>
			if (k == 'd'){
 800118a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d123      	bne.n	80011da <main+0x8e>
				// if press "del" button
				if(x>=0){
 8001192:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001196:	2b00      	cmp	r3, #0
 8001198:	dbee      	blt.n	8001178 <main+0x2c>
				  char string[2] = {' ', '\0'};
 800119a:	2320      	movs	r3, #32
 800119c:	81bb      	strh	r3, [r7, #12]
				  LCD_Location(x, 0);
 800119e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fda0 	bl	8000cec <LCD_Location>
				  x-=1;
 80011ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011b0:	3b01      	subs	r3, #1
 80011b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				  LCD_Write_String(string); // remove number or operator on LCD
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fdb7 	bl	8000d2e <LCD_Write_String>
				  array[t] = '\0';
 80011c0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80011c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011c8:	4413      	add	r3, r2
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
				  t-=1;
 80011ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80011d8:	e7ce      	b.n	8001178 <main+0x2c>
				}
			}
			else if(k == '='){
 80011da:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011de:	2b3d      	cmp	r3, #61	@ 0x3d
 80011e0:	f040 819d 	bne.w	800151e <main+0x3d2>
				// if press "=" button
				char string[2] = {' ', '\0'};
 80011e4:	2320      	movs	r3, #32
 80011e6:	813b      	strh	r3, [r7, #8]
				for (int clr_2=0; clr_2<16; clr_2++){
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80011ee:	e013      	b.n	8001218 <main+0xcc>
				  LCD_Location(clr_2, 1);
 80011f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fd77 	bl	8000cec <LCD_Location>
				  HAL_Delay(5);
 80011fe:	2005      	movs	r0, #5
 8001200:	f000 fc08 	bl	8001a14 <HAL_Delay>
				  LCD_Write_String(string); // remove all data on LCD
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fd90 	bl	8000d2e <LCD_Write_String>
				for (int clr_2=0; clr_2<16; clr_2++){
 800120e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001212:	3301      	adds	r3, #1
 8001214:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001218:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800121c:	2b0f      	cmp	r3, #15
 800121e:	dde7      	ble.n	80011f0 <main+0xa4>
				}
				for (int j=0; j<8; j++){
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001226:	e01c      	b.n	8001262 <main+0x116>
					num[j]='\0'; // if j < 8 => num[0=>7] = null character
 8001228:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	33a0      	adds	r3, #160	@ 0xa0
 8001230:	443b      	add	r3, r7
 8001232:	f1a3 0190 	sub.w	r1, r3, #144	@ 0x90
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	e9c1 2300 	strd	r2, r3, [r1]
					if (j<7){
 8001242:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001246:	2b06      	cmp	r3, #6
 8001248:	dc06      	bgt.n	8001258 <main+0x10c>
					op[j]='\0'; // if j < 7 => num[0=>6] =  null character
 800124a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800124e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001252:	4413      	add	r3, r2
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
				for (int j=0; j<8; j++){
 8001258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800125c:	3301      	adds	r3, #1
 800125e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001266:	2b07      	cmp	r3, #7
 8001268:	ddde      	ble.n	8001228 <main+0xdc>
					}
				}
				double sum=0;
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
				int op_sin=0; // number of operator
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				for (int i=0; i<t+1; i++){
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001282:	e077      	b.n	8001374 <main+0x228>
					if (array[i]>='0' && array[i]<='9'){
 8001284:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b2f      	cmp	r3, #47	@ 0x2f
 8001292:	d932      	bls.n	80012fa <main+0x1ae>
 8001294:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b39      	cmp	r3, #57	@ 0x39
 80012a2:	d82a      	bhi.n	80012fa <main+0x1ae>
						sum = sum*10 + (array[i] - '0');
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4bb0      	ldr	r3, [pc, #704]	@ (800156c <main+0x420>)
 80012aa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80012ae:	f7ff f913 	bl	80004d8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4690      	mov	r8, r2
 80012b8:	4699      	mov	r9, r3
 80012ba:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80012be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	3b30      	subs	r3, #48	@ 0x30
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f89b 	bl	8000404 <__aeabi_i2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4640      	mov	r0, r8
 80012d4:	4649      	mov	r1, r9
 80012d6:	f7fe ff49 	bl	800016c <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
						num[op_sin]=sum;
 80012e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	33a0      	adds	r3, #160	@ 0xa0
 80012ea:	443b      	add	r3, r7
 80012ec:	f1a3 0190 	sub.w	r1, r3, #144	@ 0x90
 80012f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80012f4:	e9c1 2300 	strd	r2, r3, [r1]
 80012f8:	e037      	b.n	800136a <main+0x21e>
					}
					else if(array[i]=='+' || array[i]=='-' || array[i]=='*' || array[i]=='/'){
 80012fa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80012fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001302:	4413      	add	r3, r2
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b2b      	cmp	r3, #43	@ 0x2b
 8001308:	d017      	beq.n	800133a <main+0x1ee>
 800130a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800130e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b2d      	cmp	r3, #45	@ 0x2d
 8001318:	d00f      	beq.n	800133a <main+0x1ee>
 800131a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800131e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b2a      	cmp	r3, #42	@ 0x2a
 8001328:	d007      	beq.n	800133a <main+0x1ee>
 800132a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800132e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b2f      	cmp	r3, #47	@ 0x2f
 8001338:	d117      	bne.n	800136a <main+0x21e>
						op[op_sin]=array[i];
 800133a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800133e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001342:	4413      	add	r3, r2
 8001344:	7819      	ldrb	r1, [r3, #0]
 8001346:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800134a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	701a      	strb	r2, [r3, #0]
						op_sin+=1;
 8001354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001358:	3301      	adds	r3, #1
 800135a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						sum=0;
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
				for (int i=0; i<t+1; i++){
 800136a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001374:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001378:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800137c:	429a      	cmp	r2, r3
 800137e:	da81      	bge.n	8001284 <main+0x138>
					}
				}
				//Perform multiplication, division, and subtraction operations first
				//and then convert them into addition operations.
				for (int i=0; i<op_sin; i++){
 8001380:	2300      	movs	r3, #0
 8001382:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001384:	e08c      	b.n	80014a0 <main+0x354>
					if(op[i]=='*'){
 8001386:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800138a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b2a      	cmp	r3, #42	@ 0x2a
 8001392:	d12d      	bne.n	80013f0 <main+0x2a4>
						num[i+1]=num[i] * num[i+1];
 8001394:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	33a0      	adds	r3, #160	@ 0xa0
 800139a:	443b      	add	r3, r7
 800139c:	3b90      	subs	r3, #144	@ 0x90
 800139e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013a4:	3301      	adds	r3, #1
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	33a0      	adds	r3, #160	@ 0xa0
 80013aa:	443b      	add	r3, r7
 80013ac:	3b90      	subs	r3, #144	@ 0x90
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 80013b4:	3601      	adds	r6, #1
 80013b6:	f7ff f88f 	bl	80004d8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	00f1      	lsls	r1, r6, #3
 80013c0:	31a0      	adds	r1, #160	@ 0xa0
 80013c2:	4439      	add	r1, r7
 80013c4:	3990      	subs	r1, #144	@ 0x90
 80013c6:	e9c1 2300 	strd	r2, r3, [r1]
						num[i]=0;
 80013ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	33a0      	adds	r3, #160	@ 0xa0
 80013d0:	443b      	add	r3, r7
 80013d2:	f1a3 0190 	sub.w	r1, r3, #144	@ 0x90
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	e9c1 2300 	strd	r2, r3, [r1]
						op[i]='+';
 80013e2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80013e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013e8:	4413      	add	r3, r2
 80013ea:	222b      	movs	r2, #43	@ 0x2b
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e054      	b.n	800149a <main+0x34e>
					}
					else if(op[i]=='/'){
 80013f0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80013f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80013fc:	d12d      	bne.n	800145a <main+0x30e>
						num[i+1]=num[i] / num[i+1];
 80013fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	33a0      	adds	r3, #160	@ 0xa0
 8001404:	443b      	add	r3, r7
 8001406:	3b90      	subs	r3, #144	@ 0x90
 8001408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800140e:	3301      	adds	r3, #1
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	33a0      	adds	r3, #160	@ 0xa0
 8001414:	443b      	add	r3, r7
 8001416:	3b90      	subs	r3, #144	@ 0x90
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 800141e:	3601      	adds	r6, #1
 8001420:	f7ff f984 	bl	800072c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	00f1      	lsls	r1, r6, #3
 800142a:	31a0      	adds	r1, #160	@ 0xa0
 800142c:	4439      	add	r1, r7
 800142e:	3990      	subs	r1, #144	@ 0x90
 8001430:	e9c1 2300 	strd	r2, r3, [r1]
						num[i]=0;
 8001434:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	33a0      	adds	r3, #160	@ 0xa0
 800143a:	443b      	add	r3, r7
 800143c:	f1a3 0190 	sub.w	r1, r3, #144	@ 0x90
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c1 2300 	strd	r2, r3, [r1]
						op[i]='+';
 800144c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001450:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001452:	4413      	add	r3, r2
 8001454:	222b      	movs	r2, #43	@ 0x2b
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e01f      	b.n	800149a <main+0x34e>
					}
					else if (op[i]=='-'){
 800145a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800145e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b2d      	cmp	r3, #45	@ 0x2d
 8001466:	d118      	bne.n	800149a <main+0x34e>
						num[i+1]=-num[i+1];
 8001468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800146a:	3301      	adds	r3, #1
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	33a0      	adds	r3, #160	@ 0xa0
 8001470:	443b      	add	r3, r7
 8001472:	3b90      	subs	r3, #144	@ 0x90
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800147a:	3101      	adds	r1, #1
 800147c:	4614      	mov	r4, r2
 800147e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001482:	00cb      	lsls	r3, r1, #3
 8001484:	33a0      	adds	r3, #160	@ 0xa0
 8001486:	443b      	add	r3, r7
 8001488:	3b90      	subs	r3, #144	@ 0x90
 800148a:	e9c3 4500 	strd	r4, r5, [r3]
						op[i]='+';
 800148e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001494:	4413      	add	r3, r2
 8001496:	222b      	movs	r2, #43	@ 0x2b
 8001498:	701a      	strb	r2, [r3, #0]
				for (int i=0; i<op_sin; i++){
 800149a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800149c:	3301      	adds	r3, #1
 800149e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014a6:	429a      	cmp	r2, r3
 80014a8:	f6ff af6d 	blt.w	8001386 <main+0x23a>
					}
				}
				for (int i=0; i<op_sin; i++){
 80014ac:	2300      	movs	r3, #0
 80014ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014b0:	e01d      	b.n	80014ee <main+0x3a2>
					num[i+1]=num[i] + num[i+1];
 80014b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	33a0      	adds	r3, #160	@ 0xa0
 80014b8:	443b      	add	r3, r7
 80014ba:	3b90      	subs	r3, #144	@ 0x90
 80014bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014c2:	3301      	adds	r3, #1
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	33a0      	adds	r3, #160	@ 0xa0
 80014c8:	443b      	add	r3, r7
 80014ca:	3b90      	subs	r3, #144	@ 0x90
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	6fbe      	ldr	r6, [r7, #120]	@ 0x78
 80014d2:	3601      	adds	r6, #1
 80014d4:	f7fe fe4a 	bl	800016c <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	00f1      	lsls	r1, r6, #3
 80014de:	31a0      	adds	r1, #160	@ 0xa0
 80014e0:	4439      	add	r1, r7
 80014e2:	3990      	subs	r1, #144	@ 0x90
 80014e4:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i=0; i<op_sin; i++){
 80014e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014ea:	3301      	adds	r3, #1
 80014ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014ee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80014f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbdc      	blt.n	80014b2 <main+0x366>
				}
				sum = num[op_sin];  // result
 80014f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	33a0      	adds	r3, #160	@ 0xa0
 8001500:	443b      	add	r3, r7
 8001502:	3b90      	subs	r3, #144	@ 0x90
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
				LCD_Location(0,1);
 800150c:	2101      	movs	r1, #1
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fbec 	bl	8000cec <LCD_Location>
				LCD_Write_Number(sum);
 8001514:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001518:	f7ff fc28 	bl	8000d6c <LCD_Write_Number>
 800151c:	e62c      	b.n	8001178 <main+0x2c>
			}
			else{
				t+=1;
 800151e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001522:	3301      	adds	r3, #1
 8001524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				array[t]=k;
 8001528:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800152c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001530:	4413      	add	r3, r2
 8001532:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8001536:	701a      	strb	r2, [r3, #0]
				char string[2] = {k,'\0'};
 8001538:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800153c:	713b      	strb	r3, [r7, #4]
 800153e:	2300      	movs	r3, #0
 8001540:	717b      	strb	r3, [r7, #5]
				x+=1;
 8001542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001546:	3301      	adds	r3, #1
 8001548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				LCD_Location(x,0);
 800154c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fbc9 	bl	8000cec <LCD_Location>
				LCD_Write_String(string); // display number or operator on LCD
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fbe6 	bl	8000d2e <LCD_Write_String>
				HAL_Delay(50);
 8001562:	2032      	movs	r0, #50	@ 0x32
 8001564:	f000 fa56 	bl	8001a14 <HAL_Delay>
  {
 8001568:	e606      	b.n	8001178 <main+0x2c>
 800156a:	bf00      	nop
 800156c:	40240000 	.word	0x40240000

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b090      	sub	sp, #64	@ 0x40
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	2228      	movs	r2, #40	@ 0x28
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f002 f873 	bl	800366a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001596:	2301      	movs	r3, #1
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159a:	2310      	movs	r3, #16
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	f107 0318 	add.w	r3, r7, #24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fcf0 	bl	8001f8c <HAL_RCC_OscConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015b2:	f000 f87b 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b6:	230f      	movs	r3, #15
 80015b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 ff5e 	bl	8002490 <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015da:	f000 f867 	bl	80016ac <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	3740      	adds	r7, #64	@ 0x40
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a27      	ldr	r2, [pc, #156]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800162c:	2200      	movs	r2, #0
 800162e:	217f      	movs	r1, #127	@ 0x7f
 8001630:	481c      	ldr	r0, [pc, #112]	@ (80016a4 <MX_GPIO_Init+0xbc>)
 8001632:	f000 fc92 	bl	8001f5a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800163c:	481a      	ldr	r0, [pc, #104]	@ (80016a8 <MX_GPIO_Init+0xc0>)
 800163e:	f000 fc8c 	bl	8001f5a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001642:	237f      	movs	r3, #127	@ 0x7f
 8001644:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2302      	movs	r3, #2
 8001650:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4619      	mov	r1, r3
 8001658:	4812      	ldr	r0, [pc, #72]	@ (80016a4 <MX_GPIO_Init+0xbc>)
 800165a:	f000 fae3 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800165e:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001662:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <MX_GPIO_Init+0xbc>)
 8001674:	f000 fad6 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001678:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800167c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2302      	movs	r3, #2
 8001688:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_GPIO_Init+0xc0>)
 8001692:	f000 fac7 	bl	8001c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <Error_Handler+0x8>

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_MspInit+0x5c>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <HAL_MspInit+0x5c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6193      	str	r3, [r2, #24]
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_MspInit+0x5c>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <HAL_MspInit+0x5c>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a0e      	ldr	r2, [pc, #56]	@ (8001714 <HAL_MspInit+0x5c>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <HAL_MspInit+0x5c>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_MspInit+0x60>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <HAL_MspInit+0x60>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <NMI_Handler+0x4>

08001724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <UsageFault_Handler+0x4>

08001744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 f936 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <_kill>:

int _kill(int pid, int sig)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178c:	f001 ffc0 	bl	8003710 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	2216      	movs	r2, #22
 8001794:	601a      	str	r2, [r3, #0]
  return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_exit>:

void _exit (int status)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017aa:	f04f 31ff 	mov.w	r1, #4294967295
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffe7 	bl	8001782 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <_exit+0x12>

080017b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e00a      	b.n	80017e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ca:	f3af 8000 	nop.w
 80017ce:	4601      	mov	r1, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf0      	blt.n	80017ca <_read+0x12>
  }

  return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e009      	b.n	8001818 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf1      	blt.n	8001804 <_write+0x12>
  }
  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_close>:

int _close(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001850:	605a      	str	r2, [r3, #4]
  return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <_isatty>:

int _isatty(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
	...

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f001 ff28 	bl	8003710 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20005000 	.word	0x20005000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20000204 	.word	0x20000204
 80018f4:	20000358 	.word	0x20000358

080018f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001904:	f7ff fff8 	bl	80018f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001908:	480b      	ldr	r0, [pc, #44]	@ (8001938 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800190a:	490c      	ldr	r1, [pc, #48]	@ (800193c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800190c:	4a0c      	ldr	r2, [pc, #48]	@ (8001940 <LoopFillZerobss+0x16>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a09      	ldr	r2, [pc, #36]	@ (8001944 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001920:	4c09      	ldr	r4, [pc, #36]	@ (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f001 fef5 	bl	800371c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001932:	f7ff fc0b 	bl	800114c <main>
  bx lr
 8001936:	4770      	bx	lr
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001940:	08007280 	.word	0x08007280
  ldr r2, =_sbss
 8001944:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001948:	20000358 	.word	0x20000358

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_Init+0x28>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_Init+0x28>)
 800195a:	f043 0310 	orr.w	r3, r3, #16
 800195e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 f92b 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f000 f808 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fea4 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40022000 	.word	0x40022000

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x54>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x58>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f935 	bl	8001c0a <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 f90b 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	@ (80019d8 <HAL_InitTick+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000014 	.word	0x20000014
 80019d4:	2000001c 	.word	0x2000001c
 80019d8:	20000018 	.word	0x20000018

080019dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_IncTick+0x1c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_IncTick+0x20>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a03      	ldr	r2, [pc, #12]	@ (80019fc <HAL_IncTick+0x20>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	2000001c 	.word	0x2000001c
 80019fc:	20000208 	.word	0x20000208

08001a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000208 	.word	0x20000208

08001a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff fff0 	bl	8001a00 <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d005      	beq.n	8001a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_Delay+0x44>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ffe0 	bl	8001a00 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f7      	bhi.n	8001a3c <HAL_Delay+0x28>
  {
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000001c 	.word	0x2000001c

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	@ (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	@ 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff90 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff49 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff5e 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff90 	bl	8001b14 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5f 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffb0 	bl	8001b78 <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b08b      	sub	sp, #44	@ 0x2c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	e169      	b.n	8001f0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8158 	bne.w	8001f06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a9a      	ldr	r2, [pc, #616]	@ (8001ec4 <HAL_GPIO_Init+0x2a0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d05e      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c60:	4a98      	ldr	r2, [pc, #608]	@ (8001ec4 <HAL_GPIO_Init+0x2a0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d875      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c66:	4a98      	ldr	r2, [pc, #608]	@ (8001ec8 <HAL_GPIO_Init+0x2a4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d058      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c6c:	4a96      	ldr	r2, [pc, #600]	@ (8001ec8 <HAL_GPIO_Init+0x2a4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d86f      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c72:	4a96      	ldr	r2, [pc, #600]	@ (8001ecc <HAL_GPIO_Init+0x2a8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d052      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c78:	4a94      	ldr	r2, [pc, #592]	@ (8001ecc <HAL_GPIO_Init+0x2a8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d869      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c7e:	4a94      	ldr	r2, [pc, #592]	@ (8001ed0 <HAL_GPIO_Init+0x2ac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d04c      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c84:	4a92      	ldr	r2, [pc, #584]	@ (8001ed0 <HAL_GPIO_Init+0x2ac>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d863      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c8a:	4a92      	ldr	r2, [pc, #584]	@ (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d046      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
 8001c90:	4a90      	ldr	r2, [pc, #576]	@ (8001ed4 <HAL_GPIO_Init+0x2b0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d85d      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c96:	2b12      	cmp	r3, #18
 8001c98:	d82a      	bhi.n	8001cf0 <HAL_GPIO_Init+0xcc>
 8001c9a:	2b12      	cmp	r3, #18
 8001c9c:	d859      	bhi.n	8001d52 <HAL_GPIO_Init+0x12e>
 8001c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca4 <HAL_GPIO_Init+0x80>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001d1f 	.word	0x08001d1f
 8001ca8:	08001cf9 	.word	0x08001cf9
 8001cac:	08001d0b 	.word	0x08001d0b
 8001cb0:	08001d4d 	.word	0x08001d4d
 8001cb4:	08001d53 	.word	0x08001d53
 8001cb8:	08001d53 	.word	0x08001d53
 8001cbc:	08001d53 	.word	0x08001d53
 8001cc0:	08001d53 	.word	0x08001d53
 8001cc4:	08001d53 	.word	0x08001d53
 8001cc8:	08001d53 	.word	0x08001d53
 8001ccc:	08001d53 	.word	0x08001d53
 8001cd0:	08001d53 	.word	0x08001d53
 8001cd4:	08001d53 	.word	0x08001d53
 8001cd8:	08001d53 	.word	0x08001d53
 8001cdc:	08001d53 	.word	0x08001d53
 8001ce0:	08001d53 	.word	0x08001d53
 8001ce4:	08001d53 	.word	0x08001d53
 8001ce8:	08001d01 	.word	0x08001d01
 8001cec:	08001d15 	.word	0x08001d15
 8001cf0:	4a79      	ldr	r2, [pc, #484]	@ (8001ed8 <HAL_GPIO_Init+0x2b4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cf6:	e02c      	b.n	8001d52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	623b      	str	r3, [r7, #32]
          break;
 8001cfe:	e029      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	3304      	adds	r3, #4
 8001d06:	623b      	str	r3, [r7, #32]
          break;
 8001d08:	e024      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	3308      	adds	r3, #8
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e01f      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	330c      	adds	r3, #12
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e01a      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d26:	2304      	movs	r3, #4
 8001d28:	623b      	str	r3, [r7, #32]
          break;
 8001d2a:	e013      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d34:	2308      	movs	r3, #8
 8001d36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	611a      	str	r2, [r3, #16]
          break;
 8001d3e:	e009      	b.n	8001d54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d40:	2308      	movs	r3, #8
 8001d42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	615a      	str	r2, [r3, #20]
          break;
 8001d4a:	e003      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
          break;
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x130>
          break;
 8001d52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2bff      	cmp	r3, #255	@ 0xff
 8001d58:	d801      	bhi.n	8001d5e <HAL_GPIO_Init+0x13a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_Init+0x13e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3304      	adds	r3, #4
 8001d62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2bff      	cmp	r3, #255	@ 0xff
 8001d68:	d802      	bhi.n	8001d70 <HAL_GPIO_Init+0x14c>
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_Init+0x152>
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	3b08      	subs	r3, #8
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	6a39      	ldr	r1, [r7, #32]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	431a      	orrs	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80b1 	beq.w	8001f06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001da4:	4b4d      	ldr	r3, [pc, #308]	@ (8001edc <HAL_GPIO_Init+0x2b8>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	@ (8001edc <HAL_GPIO_Init+0x2b8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_GPIO_Init+0x2b8>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dbc:	4a48      	ldr	r2, [pc, #288]	@ (8001ee0 <HAL_GPIO_Init+0x2bc>)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a40      	ldr	r2, [pc, #256]	@ (8001ee4 <HAL_GPIO_Init+0x2c0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_GPIO_Init+0x1ec>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee8 <HAL_GPIO_Init+0x2c4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00d      	beq.n	8001e0c <HAL_GPIO_Init+0x1e8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3e      	ldr	r2, [pc, #248]	@ (8001eec <HAL_GPIO_Init+0x2c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <HAL_GPIO_Init+0x1e4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001ef0 <HAL_GPIO_Init+0x2cc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_GPIO_Init+0x1e0>
 8001e00:	2303      	movs	r3, #3
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e004      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e10:	2300      	movs	r3, #0
 8001e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e22:	492f      	ldr	r1, [pc, #188]	@ (8001ee0 <HAL_GPIO_Init+0x2bc>)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	492c      	ldr	r1, [pc, #176]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4928      	ldr	r1, [pc, #160]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e64:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4922      	ldr	r1, [pc, #136]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60cb      	str	r3, [r1, #12]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	491e      	ldr	r1, [pc, #120]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4918      	ldr	r1, [pc, #96]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4914      	ldr	r1, [pc, #80]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d021      	beq.n	8001ef8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	490e      	ldr	r1, [pc, #56]	@ (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e021      	b.n	8001f06 <HAL_GPIO_Init+0x2e2>
 8001ec2:	bf00      	nop
 8001ec4:	10320000 	.word	0x10320000
 8001ec8:	10310000 	.word	0x10310000
 8001ecc:	10220000 	.word	0x10220000
 8001ed0:	10210000 	.word	0x10210000
 8001ed4:	10120000 	.word	0x10120000
 8001ed8:	10110000 	.word	0x10110000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40010800 	.word	0x40010800
 8001ee8:	40010c00 	.word	0x40010c00
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40011400 	.word	0x40011400
 8001ef4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_GPIO_Init+0x304>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	4909      	ldr	r1, [pc, #36]	@ (8001f28 <HAL_GPIO_Init+0x304>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	3301      	adds	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f47f ae8e 	bne.w	8001c38 <HAL_GPIO_Init+0x14>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	372c      	adds	r7, #44	@ 0x2c
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40010400 	.word	0x40010400

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	807b      	strh	r3, [r7, #2]
 8001f66:	4613      	mov	r3, r2
 8001f68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f6a:	787b      	ldrb	r3, [r7, #1]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f76:	e003      	b.n	8001f80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	041a      	lsls	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	611a      	str	r2, [r3, #16]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e272      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8087 	beq.w	80020ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fac:	4b92      	ldr	r3, [pc, #584]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d00c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d112      	bne.n	8001fea <HAL_RCC_OscConfig+0x5e>
 8001fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd0:	d10b      	bne.n	8001fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd2:	4b89      	ldr	r3, [pc, #548]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d06c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x12c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d168      	bne.n	80020b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e24c      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x76>
 8001ff4:	4b80      	ldr	r3, [pc, #512]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a7f      	ldr	r2, [pc, #508]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e02e      	b.n	8002060 <HAL_RCC_OscConfig+0xd4>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x98>
 800200a:	4b7b      	ldr	r3, [pc, #492]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7a      	ldr	r2, [pc, #488]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b78      	ldr	r3, [pc, #480]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a77      	ldr	r2, [pc, #476]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e01d      	b.n	8002060 <HAL_RCC_OscConfig+0xd4>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0xbc>
 800202e:	4b72      	ldr	r3, [pc, #456]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a71      	ldr	r2, [pc, #452]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b6f      	ldr	r3, [pc, #444]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6e      	ldr	r2, [pc, #440]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0xd4>
 8002048:	4b6b      	ldr	r3, [pc, #428]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6a      	ldr	r2, [pc, #424]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800204e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b68      	ldr	r3, [pc, #416]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a67      	ldr	r2, [pc, #412]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800205a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff fcca 	bl	8001a00 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff fcc6 	bl	8001a00 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	@ 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e200      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b5d      	ldr	r3, [pc, #372]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0xe4>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff fcb6 	bl	8001a00 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff fcb2 	bl	8001a00 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	@ 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1ec      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	4b53      	ldr	r3, [pc, #332]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x10c>
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d063      	beq.n	800218e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c6:	4b4c      	ldr	r3, [pc, #304]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020d2:	4b49      	ldr	r3, [pc, #292]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d11c      	bne.n	8002118 <HAL_RCC_OscConfig+0x18c>
 80020de:	4b46      	ldr	r3, [pc, #280]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	4b43      	ldr	r3, [pc, #268]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x176>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1c0      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4939      	ldr	r1, [pc, #228]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	e03a      	b.n	800218e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	4b36      	ldr	r3, [pc, #216]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff fc6b 	bl	8001a00 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212e:	f7ff fc67 	bl	8001a00 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e1a1      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4927      	ldr	r1, [pc, #156]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002162:	4b26      	ldr	r3, [pc, #152]	@ (80021fc <HAL_RCC_OscConfig+0x270>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fc4a 	bl	8001a00 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002170:	f7ff fc46 	bl	8001a00 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e180      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d03a      	beq.n	8002210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d019      	beq.n	80021d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <HAL_RCC_OscConfig+0x274>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff fc2a 	bl	8001a00 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff fc26 	bl	8001a00 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e160      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f000 fa9c 	bl	800270c <RCC_Delay>
 80021d4:	e01c      	b.n	8002210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_RCC_OscConfig+0x274>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7ff fc10 	bl	8001a00 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e2:	e00f      	b.n	8002204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff fc0c 	bl	8001a00 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d908      	bls.n	8002204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e146      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	42420000 	.word	0x42420000
 8002200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b92      	ldr	r3, [pc, #584]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e9      	bne.n	80021e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a6 	beq.w	800236a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b8b      	ldr	r3, [pc, #556]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b88      	ldr	r3, [pc, #544]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a87      	ldr	r2, [pc, #540]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002238:	61d3      	str	r3, [r2, #28]
 800223a:	4b85      	ldr	r3, [pc, #532]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224a:	4b82      	ldr	r3, [pc, #520]	@ (8002454 <HAL_RCC_OscConfig+0x4c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002256:	4b7f      	ldr	r3, [pc, #508]	@ (8002454 <HAL_RCC_OscConfig+0x4c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7e      	ldr	r2, [pc, #504]	@ (8002454 <HAL_RCC_OscConfig+0x4c8>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002262:	f7ff fbcd 	bl	8001a00 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7ff fbc9 	bl	8001a00 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b64      	cmp	r3, #100	@ 0x64
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e103      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b75      	ldr	r3, [pc, #468]	@ (8002454 <HAL_RCC_OscConfig+0x4c8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x312>
 8002290:	4b6f      	ldr	r3, [pc, #444]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a6e      	ldr	r2, [pc, #440]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	e02d      	b.n	80022fa <HAL_RCC_OscConfig+0x36e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x334>
 80022a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a69      	ldr	r2, [pc, #420]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4b67      	ldr	r3, [pc, #412]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a66      	ldr	r2, [pc, #408]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	e01c      	b.n	80022fa <HAL_RCC_OscConfig+0x36e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x356>
 80022c8:	4b61      	ldr	r3, [pc, #388]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a60      	ldr	r2, [pc, #384]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	e00b      	b.n	80022fa <HAL_RCC_OscConfig+0x36e>
 80022e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4b58      	ldr	r3, [pc, #352]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d015      	beq.n	800232e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7ff fb7d 	bl	8001a00 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7ff fb79 	bl	8001a00 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0b1      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	4b4b      	ldr	r3, [pc, #300]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ee      	beq.n	800230a <HAL_RCC_OscConfig+0x37e>
 800232c:	e014      	b.n	8002358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7ff fb67 	bl	8001a00 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7ff fb63 	bl	8001a00 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e09b      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	4b40      	ldr	r3, [pc, #256]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ee      	bne.n	8002336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b3c      	ldr	r3, [pc, #240]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a3b      	ldr	r2, [pc, #236]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002368:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8087 	beq.w	8002482 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002374:	4b36      	ldr	r3, [pc, #216]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d061      	beq.n	8002444 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d146      	bne.n	8002416 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b33      	ldr	r3, [pc, #204]	@ (8002458 <HAL_RCC_OscConfig+0x4cc>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7ff fb37 	bl	8001a00 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7ff fb33 	bl	8001a00 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e06d      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a8:	4b29      	ldr	r3, [pc, #164]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023bc:	d108      	bne.n	80023d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4921      	ldr	r1, [pc, #132]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a19      	ldr	r1, [r3, #32]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	430b      	orrs	r3, r1
 80023e2:	491b      	ldr	r1, [pc, #108]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7ff fb07 	bl	8001a00 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f6:	f7ff fb03 	bl	8001a00 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e03d      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x46a>
 8002414:	e035      	b.n	8002482 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_RCC_OscConfig+0x4cc>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff faf0 	bl	8001a00 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7ff faec 	bl	8001a00 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e026      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x498>
 8002442:	e01e      	b.n	8002482 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e019      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
 8002458:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <HAL_RCC_OscConfig+0x500>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	429a      	cmp	r2, r3
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0d0      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b67      	ldr	r3, [pc, #412]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	4965      	ldr	r1, [pc, #404]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b63      	ldr	r3, [pc, #396]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0b8      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ec:	4b59      	ldr	r3, [pc, #356]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a58      	ldr	r2, [pc, #352]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002504:	4b53      	ldr	r3, [pc, #332]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a52      	ldr	r2, [pc, #328]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800250e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002510:	4b50      	ldr	r3, [pc, #320]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	494d      	ldr	r1, [pc, #308]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d040      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d115      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e07f      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e073      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e06b      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4936      	ldr	r1, [pc, #216]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7ff fa3e 	bl	8001a00 <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7ff fa3a 	bl	8001a00 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e053      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d210      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	4922      	ldr	r1, [pc, #136]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b20      	ldr	r3, [pc, #128]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e032      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ec:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4916      	ldr	r1, [pc, #88]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800260a:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	490e      	ldr	r1, [pc, #56]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800261e:	f000 f821 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8002622:	4602      	mov	r2, r0
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	490a      	ldr	r1, [pc, #40]	@ (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	5ccb      	ldrb	r3, [r1, r3]
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	4a09      	ldr	r2, [pc, #36]	@ (800265c <HAL_RCC_ClockConfig+0x1cc>)
 8002638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_RCC_ClockConfig+0x1d0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f99c 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
 8002658:	08006e20 	.word	0x08006e20
 800265c:	20000014 	.word	0x20000014
 8002660:	20000018 	.word	0x20000018

08002664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800267e:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b04      	cmp	r3, #4
 800268c:	d002      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x30>
 800268e:	2b08      	cmp	r3, #8
 8002690:	d003      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x36>
 8002692:	e027      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002696:	613b      	str	r3, [r7, #16]
      break;
 8002698:	e027      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	0c9b      	lsrs	r3, r3, #18
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	4a17      	ldr	r2, [pc, #92]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026b2:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0c5b      	lsrs	r3, r3, #17
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	4a11      	ldr	r2, [pc, #68]	@ (8002704 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x98>)
 80026c6:	fb03 f202 	mul.w	r2, r3, r2
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e004      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002708 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	613b      	str	r3, [r7, #16]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x98>)
 80026e6:	613b      	str	r3, [r7, #16]
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	693b      	ldr	r3, [r7, #16]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	007a1200 	.word	0x007a1200
 8002700:	08006e30 	.word	0x08006e30
 8002704:	08006e40 	.word	0x08006e40
 8002708:	003d0900 	.word	0x003d0900

0800270c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002714:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <RCC_Delay+0x34>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <RCC_Delay+0x38>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0a5b      	lsrs	r3, r3, #9
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002728:	bf00      	nop
  }
  while (Delay --);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	60fa      	str	r2, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f9      	bne.n	8002728 <RCC_Delay+0x1c>
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	20000014 	.word	0x20000014
 8002744:	10624dd3 	.word	0x10624dd3

08002748 <__cvt>:
 8002748:	2b00      	cmp	r3, #0
 800274a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800274e:	461d      	mov	r5, r3
 8002750:	bfbb      	ittet	lt
 8002752:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002756:	461d      	movlt	r5, r3
 8002758:	2300      	movge	r3, #0
 800275a:	232d      	movlt	r3, #45	@ 0x2d
 800275c:	b088      	sub	sp, #32
 800275e:	4614      	mov	r4, r2
 8002760:	bfb8      	it	lt
 8002762:	4614      	movlt	r4, r2
 8002764:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002766:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002768:	7013      	strb	r3, [r2, #0]
 800276a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800276c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002770:	f023 0820 	bic.w	r8, r3, #32
 8002774:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002778:	d005      	beq.n	8002786 <__cvt+0x3e>
 800277a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800277e:	d100      	bne.n	8002782 <__cvt+0x3a>
 8002780:	3601      	adds	r6, #1
 8002782:	2302      	movs	r3, #2
 8002784:	e000      	b.n	8002788 <__cvt+0x40>
 8002786:	2303      	movs	r3, #3
 8002788:	aa07      	add	r2, sp, #28
 800278a:	9204      	str	r2, [sp, #16]
 800278c:	aa06      	add	r2, sp, #24
 800278e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002792:	e9cd 3600 	strd	r3, r6, [sp]
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	f001 f881 	bl	80038a0 <_dtoa_r>
 800279e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80027a2:	4607      	mov	r7, r0
 80027a4:	d119      	bne.n	80027da <__cvt+0x92>
 80027a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80027a8:	07db      	lsls	r3, r3, #31
 80027aa:	d50e      	bpl.n	80027ca <__cvt+0x82>
 80027ac:	eb00 0906 	add.w	r9, r0, r6
 80027b0:	2200      	movs	r2, #0
 80027b2:	2300      	movs	r3, #0
 80027b4:	4620      	mov	r0, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	f7fe f8f6 	bl	80009a8 <__aeabi_dcmpeq>
 80027bc:	b108      	cbz	r0, 80027c2 <__cvt+0x7a>
 80027be:	f8cd 901c 	str.w	r9, [sp, #28]
 80027c2:	2230      	movs	r2, #48	@ 0x30
 80027c4:	9b07      	ldr	r3, [sp, #28]
 80027c6:	454b      	cmp	r3, r9
 80027c8:	d31e      	bcc.n	8002808 <__cvt+0xc0>
 80027ca:	4638      	mov	r0, r7
 80027cc:	9b07      	ldr	r3, [sp, #28]
 80027ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80027d0:	1bdb      	subs	r3, r3, r7
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	b008      	add	sp, #32
 80027d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80027de:	eb00 0906 	add.w	r9, r0, r6
 80027e2:	d1e5      	bne.n	80027b0 <__cvt+0x68>
 80027e4:	7803      	ldrb	r3, [r0, #0]
 80027e6:	2b30      	cmp	r3, #48	@ 0x30
 80027e8:	d10a      	bne.n	8002800 <__cvt+0xb8>
 80027ea:	2200      	movs	r2, #0
 80027ec:	2300      	movs	r3, #0
 80027ee:	4620      	mov	r0, r4
 80027f0:	4629      	mov	r1, r5
 80027f2:	f7fe f8d9 	bl	80009a8 <__aeabi_dcmpeq>
 80027f6:	b918      	cbnz	r0, 8002800 <__cvt+0xb8>
 80027f8:	f1c6 0601 	rsb	r6, r6, #1
 80027fc:	f8ca 6000 	str.w	r6, [sl]
 8002800:	f8da 3000 	ldr.w	r3, [sl]
 8002804:	4499      	add	r9, r3
 8002806:	e7d3      	b.n	80027b0 <__cvt+0x68>
 8002808:	1c59      	adds	r1, r3, #1
 800280a:	9107      	str	r1, [sp, #28]
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e7d9      	b.n	80027c4 <__cvt+0x7c>

08002810 <__exponent>:
 8002810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002812:	2900      	cmp	r1, #0
 8002814:	bfb6      	itet	lt
 8002816:	232d      	movlt	r3, #45	@ 0x2d
 8002818:	232b      	movge	r3, #43	@ 0x2b
 800281a:	4249      	neglt	r1, r1
 800281c:	2909      	cmp	r1, #9
 800281e:	7002      	strb	r2, [r0, #0]
 8002820:	7043      	strb	r3, [r0, #1]
 8002822:	dd29      	ble.n	8002878 <__exponent+0x68>
 8002824:	f10d 0307 	add.w	r3, sp, #7
 8002828:	461d      	mov	r5, r3
 800282a:	270a      	movs	r7, #10
 800282c:	fbb1 f6f7 	udiv	r6, r1, r7
 8002830:	461a      	mov	r2, r3
 8002832:	fb07 1416 	mls	r4, r7, r6, r1
 8002836:	3430      	adds	r4, #48	@ 0x30
 8002838:	f802 4c01 	strb.w	r4, [r2, #-1]
 800283c:	460c      	mov	r4, r1
 800283e:	2c63      	cmp	r4, #99	@ 0x63
 8002840:	4631      	mov	r1, r6
 8002842:	f103 33ff 	add.w	r3, r3, #4294967295
 8002846:	dcf1      	bgt.n	800282c <__exponent+0x1c>
 8002848:	3130      	adds	r1, #48	@ 0x30
 800284a:	1e94      	subs	r4, r2, #2
 800284c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002850:	4623      	mov	r3, r4
 8002852:	1c41      	adds	r1, r0, #1
 8002854:	42ab      	cmp	r3, r5
 8002856:	d30a      	bcc.n	800286e <__exponent+0x5e>
 8002858:	f10d 0309 	add.w	r3, sp, #9
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	42ac      	cmp	r4, r5
 8002860:	bf88      	it	hi
 8002862:	2300      	movhi	r3, #0
 8002864:	3302      	adds	r3, #2
 8002866:	4403      	add	r3, r0
 8002868:	1a18      	subs	r0, r3, r0
 800286a:	b003      	add	sp, #12
 800286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002872:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002876:	e7ed      	b.n	8002854 <__exponent+0x44>
 8002878:	2330      	movs	r3, #48	@ 0x30
 800287a:	3130      	adds	r1, #48	@ 0x30
 800287c:	7083      	strb	r3, [r0, #2]
 800287e:	70c1      	strb	r1, [r0, #3]
 8002880:	1d03      	adds	r3, r0, #4
 8002882:	e7f1      	b.n	8002868 <__exponent+0x58>

08002884 <_printf_float>:
 8002884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002888:	b091      	sub	sp, #68	@ 0x44
 800288a:	460c      	mov	r4, r1
 800288c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002890:	4616      	mov	r6, r2
 8002892:	461f      	mov	r7, r3
 8002894:	4605      	mov	r5, r0
 8002896:	f000 fef1 	bl	800367c <_localeconv_r>
 800289a:	6803      	ldr	r3, [r0, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	9308      	str	r3, [sp, #32]
 80028a0:	f7fd fc56 	bl	8000150 <strlen>
 80028a4:	2300      	movs	r3, #0
 80028a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80028a8:	f8d8 3000 	ldr.w	r3, [r8]
 80028ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80028ae:	3307      	adds	r3, #7
 80028b0:	f023 0307 	bic.w	r3, r3, #7
 80028b4:	f103 0208 	add.w	r2, r3, #8
 80028b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80028bc:	f8d4 b000 	ldr.w	fp, [r4]
 80028c0:	f8c8 2000 	str.w	r2, [r8]
 80028c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80028c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80028cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80028ce:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80028d2:	f04f 32ff 	mov.w	r2, #4294967295
 80028d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80028da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80028de:	4b9c      	ldr	r3, [pc, #624]	@ (8002b50 <_printf_float+0x2cc>)
 80028e0:	f7fe f894 	bl	8000a0c <__aeabi_dcmpun>
 80028e4:	bb70      	cbnz	r0, 8002944 <_printf_float+0xc0>
 80028e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80028ea:	f04f 32ff 	mov.w	r2, #4294967295
 80028ee:	4b98      	ldr	r3, [pc, #608]	@ (8002b50 <_printf_float+0x2cc>)
 80028f0:	f7fe f86e 	bl	80009d0 <__aeabi_dcmple>
 80028f4:	bb30      	cbnz	r0, 8002944 <_printf_float+0xc0>
 80028f6:	2200      	movs	r2, #0
 80028f8:	2300      	movs	r3, #0
 80028fa:	4640      	mov	r0, r8
 80028fc:	4649      	mov	r1, r9
 80028fe:	f7fe f85d 	bl	80009bc <__aeabi_dcmplt>
 8002902:	b110      	cbz	r0, 800290a <_printf_float+0x86>
 8002904:	232d      	movs	r3, #45	@ 0x2d
 8002906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800290a:	4a92      	ldr	r2, [pc, #584]	@ (8002b54 <_printf_float+0x2d0>)
 800290c:	4b92      	ldr	r3, [pc, #584]	@ (8002b58 <_printf_float+0x2d4>)
 800290e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002912:	bf94      	ite	ls
 8002914:	4690      	movls	r8, r2
 8002916:	4698      	movhi	r8, r3
 8002918:	2303      	movs	r3, #3
 800291a:	f04f 0900 	mov.w	r9, #0
 800291e:	6123      	str	r3, [r4, #16]
 8002920:	f02b 0304 	bic.w	r3, fp, #4
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	4633      	mov	r3, r6
 8002928:	4621      	mov	r1, r4
 800292a:	4628      	mov	r0, r5
 800292c:	9700      	str	r7, [sp, #0]
 800292e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002930:	f000 f9d4 	bl	8002cdc <_printf_common>
 8002934:	3001      	adds	r0, #1
 8002936:	f040 8090 	bne.w	8002a5a <_printf_float+0x1d6>
 800293a:	f04f 30ff 	mov.w	r0, #4294967295
 800293e:	b011      	add	sp, #68	@ 0x44
 8002940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	4640      	mov	r0, r8
 800294a:	4649      	mov	r1, r9
 800294c:	f7fe f85e 	bl	8000a0c <__aeabi_dcmpun>
 8002950:	b148      	cbz	r0, 8002966 <_printf_float+0xe2>
 8002952:	464b      	mov	r3, r9
 8002954:	2b00      	cmp	r3, #0
 8002956:	bfb8      	it	lt
 8002958:	232d      	movlt	r3, #45	@ 0x2d
 800295a:	4a80      	ldr	r2, [pc, #512]	@ (8002b5c <_printf_float+0x2d8>)
 800295c:	bfb8      	it	lt
 800295e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002962:	4b7f      	ldr	r3, [pc, #508]	@ (8002b60 <_printf_float+0x2dc>)
 8002964:	e7d3      	b.n	800290e <_printf_float+0x8a>
 8002966:	6863      	ldr	r3, [r4, #4]
 8002968:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	d13f      	bne.n	80029f0 <_printf_float+0x16c>
 8002970:	2306      	movs	r3, #6
 8002972:	6063      	str	r3, [r4, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800297a:	6023      	str	r3, [r4, #0]
 800297c:	9206      	str	r2, [sp, #24]
 800297e:	aa0e      	add	r2, sp, #56	@ 0x38
 8002980:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002984:	aa0d      	add	r2, sp, #52	@ 0x34
 8002986:	9203      	str	r2, [sp, #12]
 8002988:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800298c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002990:	6863      	ldr	r3, [r4, #4]
 8002992:	4642      	mov	r2, r8
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4628      	mov	r0, r5
 8002998:	464b      	mov	r3, r9
 800299a:	910a      	str	r1, [sp, #40]	@ 0x28
 800299c:	f7ff fed4 	bl	8002748 <__cvt>
 80029a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80029a2:	4680      	mov	r8, r0
 80029a4:	2947      	cmp	r1, #71	@ 0x47
 80029a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80029a8:	d128      	bne.n	80029fc <_printf_float+0x178>
 80029aa:	1cc8      	adds	r0, r1, #3
 80029ac:	db02      	blt.n	80029b4 <_printf_float+0x130>
 80029ae:	6863      	ldr	r3, [r4, #4]
 80029b0:	4299      	cmp	r1, r3
 80029b2:	dd40      	ble.n	8002a36 <_printf_float+0x1b2>
 80029b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80029b8:	fa5f fa8a 	uxtb.w	sl, sl
 80029bc:	4652      	mov	r2, sl
 80029be:	3901      	subs	r1, #1
 80029c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80029c4:	910d      	str	r1, [sp, #52]	@ 0x34
 80029c6:	f7ff ff23 	bl	8002810 <__exponent>
 80029ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80029cc:	4681      	mov	r9, r0
 80029ce:	1813      	adds	r3, r2, r0
 80029d0:	2a01      	cmp	r2, #1
 80029d2:	6123      	str	r3, [r4, #16]
 80029d4:	dc02      	bgt.n	80029dc <_printf_float+0x158>
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	07d2      	lsls	r2, r2, #31
 80029da:	d501      	bpl.n	80029e0 <_printf_float+0x15c>
 80029dc:	3301      	adds	r3, #1
 80029de:	6123      	str	r3, [r4, #16]
 80029e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d09e      	beq.n	8002926 <_printf_float+0xa2>
 80029e8:	232d      	movs	r3, #45	@ 0x2d
 80029ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029ee:	e79a      	b.n	8002926 <_printf_float+0xa2>
 80029f0:	2947      	cmp	r1, #71	@ 0x47
 80029f2:	d1bf      	bne.n	8002974 <_printf_float+0xf0>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1bd      	bne.n	8002974 <_printf_float+0xf0>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e7ba      	b.n	8002972 <_printf_float+0xee>
 80029fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002a00:	d9dc      	bls.n	80029bc <_printf_float+0x138>
 8002a02:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002a06:	d118      	bne.n	8002a3a <_printf_float+0x1b6>
 8002a08:	2900      	cmp	r1, #0
 8002a0a:	6863      	ldr	r3, [r4, #4]
 8002a0c:	dd0b      	ble.n	8002a26 <_printf_float+0x1a2>
 8002a0e:	6121      	str	r1, [r4, #16]
 8002a10:	b913      	cbnz	r3, 8002a18 <_printf_float+0x194>
 8002a12:	6822      	ldr	r2, [r4, #0]
 8002a14:	07d0      	lsls	r0, r2, #31
 8002a16:	d502      	bpl.n	8002a1e <_printf_float+0x19a>
 8002a18:	3301      	adds	r3, #1
 8002a1a:	440b      	add	r3, r1
 8002a1c:	6123      	str	r3, [r4, #16]
 8002a1e:	f04f 0900 	mov.w	r9, #0
 8002a22:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002a24:	e7dc      	b.n	80029e0 <_printf_float+0x15c>
 8002a26:	b913      	cbnz	r3, 8002a2e <_printf_float+0x1aa>
 8002a28:	6822      	ldr	r2, [r4, #0]
 8002a2a:	07d2      	lsls	r2, r2, #31
 8002a2c:	d501      	bpl.n	8002a32 <_printf_float+0x1ae>
 8002a2e:	3302      	adds	r3, #2
 8002a30:	e7f4      	b.n	8002a1c <_printf_float+0x198>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e7f2      	b.n	8002a1c <_printf_float+0x198>
 8002a36:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002a3c:	4299      	cmp	r1, r3
 8002a3e:	db05      	blt.n	8002a4c <_printf_float+0x1c8>
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	6121      	str	r1, [r4, #16]
 8002a44:	07d8      	lsls	r0, r3, #31
 8002a46:	d5ea      	bpl.n	8002a1e <_printf_float+0x19a>
 8002a48:	1c4b      	adds	r3, r1, #1
 8002a4a:	e7e7      	b.n	8002a1c <_printf_float+0x198>
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	bfcc      	ite	gt
 8002a50:	2201      	movgt	r2, #1
 8002a52:	f1c1 0202 	rsble	r2, r1, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	e7e0      	b.n	8002a1c <_printf_float+0x198>
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	055a      	lsls	r2, r3, #21
 8002a5e:	d407      	bmi.n	8002a70 <_printf_float+0x1ec>
 8002a60:	6923      	ldr	r3, [r4, #16]
 8002a62:	4642      	mov	r2, r8
 8002a64:	4631      	mov	r1, r6
 8002a66:	4628      	mov	r0, r5
 8002a68:	47b8      	blx	r7
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	d12b      	bne.n	8002ac6 <_printf_float+0x242>
 8002a6e:	e764      	b.n	800293a <_printf_float+0xb6>
 8002a70:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002a74:	f240 80dc 	bls.w	8002c30 <_printf_float+0x3ac>
 8002a78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f7fd ff92 	bl	80009a8 <__aeabi_dcmpeq>
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d033      	beq.n	8002af0 <_printf_float+0x26c>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	4631      	mov	r1, r6
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	4a35      	ldr	r2, [pc, #212]	@ (8002b64 <_printf_float+0x2e0>)
 8002a90:	47b8      	blx	r7
 8002a92:	3001      	adds	r0, #1
 8002a94:	f43f af51 	beq.w	800293a <_printf_float+0xb6>
 8002a98:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002a9c:	4543      	cmp	r3, r8
 8002a9e:	db02      	blt.n	8002aa6 <_printf_float+0x222>
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	07d8      	lsls	r0, r3, #31
 8002aa4:	d50f      	bpl.n	8002ac6 <_printf_float+0x242>
 8002aa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002aaa:	4631      	mov	r1, r6
 8002aac:	4628      	mov	r0, r5
 8002aae:	47b8      	blx	r7
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	f43f af42 	beq.w	800293a <_printf_float+0xb6>
 8002ab6:	f04f 0900 	mov.w	r9, #0
 8002aba:	f108 38ff 	add.w	r8, r8, #4294967295
 8002abe:	f104 0a1a 	add.w	sl, r4, #26
 8002ac2:	45c8      	cmp	r8, r9
 8002ac4:	dc09      	bgt.n	8002ada <_printf_float+0x256>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	079b      	lsls	r3, r3, #30
 8002aca:	f100 8102 	bmi.w	8002cd2 <_printf_float+0x44e>
 8002ace:	68e0      	ldr	r0, [r4, #12]
 8002ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002ad2:	4298      	cmp	r0, r3
 8002ad4:	bfb8      	it	lt
 8002ad6:	4618      	movlt	r0, r3
 8002ad8:	e731      	b.n	800293e <_printf_float+0xba>
 8002ada:	2301      	movs	r3, #1
 8002adc:	4652      	mov	r2, sl
 8002ade:	4631      	mov	r1, r6
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	47b8      	blx	r7
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	f43f af28 	beq.w	800293a <_printf_float+0xb6>
 8002aea:	f109 0901 	add.w	r9, r9, #1
 8002aee:	e7e8      	b.n	8002ac2 <_printf_float+0x23e>
 8002af0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	dc38      	bgt.n	8002b68 <_printf_float+0x2e4>
 8002af6:	2301      	movs	r3, #1
 8002af8:	4631      	mov	r1, r6
 8002afa:	4628      	mov	r0, r5
 8002afc:	4a19      	ldr	r2, [pc, #100]	@ (8002b64 <_printf_float+0x2e0>)
 8002afe:	47b8      	blx	r7
 8002b00:	3001      	adds	r0, #1
 8002b02:	f43f af1a 	beq.w	800293a <_printf_float+0xb6>
 8002b06:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002b0a:	ea59 0303 	orrs.w	r3, r9, r3
 8002b0e:	d102      	bne.n	8002b16 <_printf_float+0x292>
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	07d9      	lsls	r1, r3, #31
 8002b14:	d5d7      	bpl.n	8002ac6 <_printf_float+0x242>
 8002b16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	47b8      	blx	r7
 8002b20:	3001      	adds	r0, #1
 8002b22:	f43f af0a 	beq.w	800293a <_printf_float+0xb6>
 8002b26:	f04f 0a00 	mov.w	sl, #0
 8002b2a:	f104 0b1a 	add.w	fp, r4, #26
 8002b2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b30:	425b      	negs	r3, r3
 8002b32:	4553      	cmp	r3, sl
 8002b34:	dc01      	bgt.n	8002b3a <_printf_float+0x2b6>
 8002b36:	464b      	mov	r3, r9
 8002b38:	e793      	b.n	8002a62 <_printf_float+0x1de>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	465a      	mov	r2, fp
 8002b3e:	4631      	mov	r1, r6
 8002b40:	4628      	mov	r0, r5
 8002b42:	47b8      	blx	r7
 8002b44:	3001      	adds	r0, #1
 8002b46:	f43f aef8 	beq.w	800293a <_printf_float+0xb6>
 8002b4a:	f10a 0a01 	add.w	sl, sl, #1
 8002b4e:	e7ee      	b.n	8002b2e <_printf_float+0x2aa>
 8002b50:	7fefffff 	.word	0x7fefffff
 8002b54:	08006e42 	.word	0x08006e42
 8002b58:	08006e46 	.word	0x08006e46
 8002b5c:	08006e4a 	.word	0x08006e4a
 8002b60:	08006e4e 	.word	0x08006e4e
 8002b64:	08006e52 	.word	0x08006e52
 8002b68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002b6a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002b6e:	4553      	cmp	r3, sl
 8002b70:	bfa8      	it	ge
 8002b72:	4653      	movge	r3, sl
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	4699      	mov	r9, r3
 8002b78:	dc36      	bgt.n	8002be8 <_printf_float+0x364>
 8002b7a:	f04f 0b00 	mov.w	fp, #0
 8002b7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b82:	f104 021a 	add.w	r2, r4, #26
 8002b86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002b88:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b8a:	eba3 0309 	sub.w	r3, r3, r9
 8002b8e:	455b      	cmp	r3, fp
 8002b90:	dc31      	bgt.n	8002bf6 <_printf_float+0x372>
 8002b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b94:	459a      	cmp	sl, r3
 8002b96:	dc3a      	bgt.n	8002c0e <_printf_float+0x38a>
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	07da      	lsls	r2, r3, #31
 8002b9c:	d437      	bmi.n	8002c0e <_printf_float+0x38a>
 8002b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ba0:	ebaa 0903 	sub.w	r9, sl, r3
 8002ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002ba6:	ebaa 0303 	sub.w	r3, sl, r3
 8002baa:	4599      	cmp	r9, r3
 8002bac:	bfa8      	it	ge
 8002bae:	4699      	movge	r9, r3
 8002bb0:	f1b9 0f00 	cmp.w	r9, #0
 8002bb4:	dc33      	bgt.n	8002c1e <_printf_float+0x39a>
 8002bb6:	f04f 0800 	mov.w	r8, #0
 8002bba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002bbe:	f104 0b1a 	add.w	fp, r4, #26
 8002bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002bc4:	ebaa 0303 	sub.w	r3, sl, r3
 8002bc8:	eba3 0309 	sub.w	r3, r3, r9
 8002bcc:	4543      	cmp	r3, r8
 8002bce:	f77f af7a 	ble.w	8002ac6 <_printf_float+0x242>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	465a      	mov	r2, fp
 8002bd6:	4631      	mov	r1, r6
 8002bd8:	4628      	mov	r0, r5
 8002bda:	47b8      	blx	r7
 8002bdc:	3001      	adds	r0, #1
 8002bde:	f43f aeac 	beq.w	800293a <_printf_float+0xb6>
 8002be2:	f108 0801 	add.w	r8, r8, #1
 8002be6:	e7ec      	b.n	8002bc2 <_printf_float+0x33e>
 8002be8:	4642      	mov	r2, r8
 8002bea:	4631      	mov	r1, r6
 8002bec:	4628      	mov	r0, r5
 8002bee:	47b8      	blx	r7
 8002bf0:	3001      	adds	r0, #1
 8002bf2:	d1c2      	bne.n	8002b7a <_printf_float+0x2f6>
 8002bf4:	e6a1      	b.n	800293a <_printf_float+0xb6>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	4631      	mov	r1, r6
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	920a      	str	r2, [sp, #40]	@ 0x28
 8002bfe:	47b8      	blx	r7
 8002c00:	3001      	adds	r0, #1
 8002c02:	f43f ae9a 	beq.w	800293a <_printf_float+0xb6>
 8002c06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002c08:	f10b 0b01 	add.w	fp, fp, #1
 8002c0c:	e7bb      	b.n	8002b86 <_printf_float+0x302>
 8002c0e:	4631      	mov	r1, r6
 8002c10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002c14:	4628      	mov	r0, r5
 8002c16:	47b8      	blx	r7
 8002c18:	3001      	adds	r0, #1
 8002c1a:	d1c0      	bne.n	8002b9e <_printf_float+0x31a>
 8002c1c:	e68d      	b.n	800293a <_printf_float+0xb6>
 8002c1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002c20:	464b      	mov	r3, r9
 8002c22:	4631      	mov	r1, r6
 8002c24:	4628      	mov	r0, r5
 8002c26:	4442      	add	r2, r8
 8002c28:	47b8      	blx	r7
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d1c3      	bne.n	8002bb6 <_printf_float+0x332>
 8002c2e:	e684      	b.n	800293a <_printf_float+0xb6>
 8002c30:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002c34:	f1ba 0f01 	cmp.w	sl, #1
 8002c38:	dc01      	bgt.n	8002c3e <_printf_float+0x3ba>
 8002c3a:	07db      	lsls	r3, r3, #31
 8002c3c:	d536      	bpl.n	8002cac <_printf_float+0x428>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	4642      	mov	r2, r8
 8002c42:	4631      	mov	r1, r6
 8002c44:	4628      	mov	r0, r5
 8002c46:	47b8      	blx	r7
 8002c48:	3001      	adds	r0, #1
 8002c4a:	f43f ae76 	beq.w	800293a <_printf_float+0xb6>
 8002c4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002c52:	4631      	mov	r1, r6
 8002c54:	4628      	mov	r0, r5
 8002c56:	47b8      	blx	r7
 8002c58:	3001      	adds	r0, #1
 8002c5a:	f43f ae6e 	beq.w	800293a <_printf_float+0xb6>
 8002c5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002c62:	2200      	movs	r2, #0
 8002c64:	2300      	movs	r3, #0
 8002c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002c6a:	f7fd fe9d 	bl	80009a8 <__aeabi_dcmpeq>
 8002c6e:	b9c0      	cbnz	r0, 8002ca2 <_printf_float+0x41e>
 8002c70:	4653      	mov	r3, sl
 8002c72:	f108 0201 	add.w	r2, r8, #1
 8002c76:	4631      	mov	r1, r6
 8002c78:	4628      	mov	r0, r5
 8002c7a:	47b8      	blx	r7
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d10c      	bne.n	8002c9a <_printf_float+0x416>
 8002c80:	e65b      	b.n	800293a <_printf_float+0xb6>
 8002c82:	2301      	movs	r3, #1
 8002c84:	465a      	mov	r2, fp
 8002c86:	4631      	mov	r1, r6
 8002c88:	4628      	mov	r0, r5
 8002c8a:	47b8      	blx	r7
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	f43f ae54 	beq.w	800293a <_printf_float+0xb6>
 8002c92:	f108 0801 	add.w	r8, r8, #1
 8002c96:	45d0      	cmp	r8, sl
 8002c98:	dbf3      	blt.n	8002c82 <_printf_float+0x3fe>
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002ca0:	e6e0      	b.n	8002a64 <_printf_float+0x1e0>
 8002ca2:	f04f 0800 	mov.w	r8, #0
 8002ca6:	f104 0b1a 	add.w	fp, r4, #26
 8002caa:	e7f4      	b.n	8002c96 <_printf_float+0x412>
 8002cac:	2301      	movs	r3, #1
 8002cae:	4642      	mov	r2, r8
 8002cb0:	e7e1      	b.n	8002c76 <_printf_float+0x3f2>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	4631      	mov	r1, r6
 8002cb8:	4628      	mov	r0, r5
 8002cba:	47b8      	blx	r7
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	f43f ae3c 	beq.w	800293a <_printf_float+0xb6>
 8002cc2:	f108 0801 	add.w	r8, r8, #1
 8002cc6:	68e3      	ldr	r3, [r4, #12]
 8002cc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002cca:	1a5b      	subs	r3, r3, r1
 8002ccc:	4543      	cmp	r3, r8
 8002cce:	dcf0      	bgt.n	8002cb2 <_printf_float+0x42e>
 8002cd0:	e6fd      	b.n	8002ace <_printf_float+0x24a>
 8002cd2:	f04f 0800 	mov.w	r8, #0
 8002cd6:	f104 0919 	add.w	r9, r4, #25
 8002cda:	e7f4      	b.n	8002cc6 <_printf_float+0x442>

08002cdc <_printf_common>:
 8002cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce0:	4616      	mov	r6, r2
 8002ce2:	4698      	mov	r8, r3
 8002ce4:	688a      	ldr	r2, [r1, #8]
 8002ce6:	690b      	ldr	r3, [r1, #16]
 8002ce8:	4607      	mov	r7, r0
 8002cea:	4293      	cmp	r3, r2
 8002cec:	bfb8      	it	lt
 8002cee:	4613      	movlt	r3, r2
 8002cf0:	6033      	str	r3, [r6, #0]
 8002cf2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002cfc:	b10a      	cbz	r2, 8002d02 <_printf_common+0x26>
 8002cfe:	3301      	adds	r3, #1
 8002d00:	6033      	str	r3, [r6, #0]
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	0699      	lsls	r1, r3, #26
 8002d06:	bf42      	ittt	mi
 8002d08:	6833      	ldrmi	r3, [r6, #0]
 8002d0a:	3302      	addmi	r3, #2
 8002d0c:	6033      	strmi	r3, [r6, #0]
 8002d0e:	6825      	ldr	r5, [r4, #0]
 8002d10:	f015 0506 	ands.w	r5, r5, #6
 8002d14:	d106      	bne.n	8002d24 <_printf_common+0x48>
 8002d16:	f104 0a19 	add.w	sl, r4, #25
 8002d1a:	68e3      	ldr	r3, [r4, #12]
 8002d1c:	6832      	ldr	r2, [r6, #0]
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	42ab      	cmp	r3, r5
 8002d22:	dc2b      	bgt.n	8002d7c <_printf_common+0xa0>
 8002d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002d28:	6822      	ldr	r2, [r4, #0]
 8002d2a:	3b00      	subs	r3, #0
 8002d2c:	bf18      	it	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	0692      	lsls	r2, r2, #26
 8002d32:	d430      	bmi.n	8002d96 <_printf_common+0xba>
 8002d34:	4641      	mov	r1, r8
 8002d36:	4638      	mov	r0, r7
 8002d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d3c:	47c8      	blx	r9
 8002d3e:	3001      	adds	r0, #1
 8002d40:	d023      	beq.n	8002d8a <_printf_common+0xae>
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	6922      	ldr	r2, [r4, #16]
 8002d46:	f003 0306 	and.w	r3, r3, #6
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf14      	ite	ne
 8002d4e:	2500      	movne	r5, #0
 8002d50:	6833      	ldreq	r3, [r6, #0]
 8002d52:	f04f 0600 	mov.w	r6, #0
 8002d56:	bf08      	it	eq
 8002d58:	68e5      	ldreq	r5, [r4, #12]
 8002d5a:	f104 041a 	add.w	r4, r4, #26
 8002d5e:	bf08      	it	eq
 8002d60:	1aed      	subeq	r5, r5, r3
 8002d62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d66:	bf08      	it	eq
 8002d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	bfc4      	itt	gt
 8002d70:	1a9b      	subgt	r3, r3, r2
 8002d72:	18ed      	addgt	r5, r5, r3
 8002d74:	42b5      	cmp	r5, r6
 8002d76:	d11a      	bne.n	8002dae <_printf_common+0xd2>
 8002d78:	2000      	movs	r0, #0
 8002d7a:	e008      	b.n	8002d8e <_printf_common+0xb2>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	4652      	mov	r2, sl
 8002d80:	4641      	mov	r1, r8
 8002d82:	4638      	mov	r0, r7
 8002d84:	47c8      	blx	r9
 8002d86:	3001      	adds	r0, #1
 8002d88:	d103      	bne.n	8002d92 <_printf_common+0xb6>
 8002d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d92:	3501      	adds	r5, #1
 8002d94:	e7c1      	b.n	8002d1a <_printf_common+0x3e>
 8002d96:	2030      	movs	r0, #48	@ 0x30
 8002d98:	18e1      	adds	r1, r4, r3
 8002d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002da4:	4422      	add	r2, r4
 8002da6:	3302      	adds	r3, #2
 8002da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002dac:	e7c2      	b.n	8002d34 <_printf_common+0x58>
 8002dae:	2301      	movs	r3, #1
 8002db0:	4622      	mov	r2, r4
 8002db2:	4641      	mov	r1, r8
 8002db4:	4638      	mov	r0, r7
 8002db6:	47c8      	blx	r9
 8002db8:	3001      	adds	r0, #1
 8002dba:	d0e6      	beq.n	8002d8a <_printf_common+0xae>
 8002dbc:	3601      	adds	r6, #1
 8002dbe:	e7d9      	b.n	8002d74 <_printf_common+0x98>

08002dc0 <_printf_i>:
 8002dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc4:	7e0f      	ldrb	r7, [r1, #24]
 8002dc6:	4691      	mov	r9, r2
 8002dc8:	2f78      	cmp	r7, #120	@ 0x78
 8002dca:	4680      	mov	r8, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	469a      	mov	sl, r3
 8002dd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002dd6:	d807      	bhi.n	8002de8 <_printf_i+0x28>
 8002dd8:	2f62      	cmp	r7, #98	@ 0x62
 8002dda:	d80a      	bhi.n	8002df2 <_printf_i+0x32>
 8002ddc:	2f00      	cmp	r7, #0
 8002dde:	f000 80d3 	beq.w	8002f88 <_printf_i+0x1c8>
 8002de2:	2f58      	cmp	r7, #88	@ 0x58
 8002de4:	f000 80ba 	beq.w	8002f5c <_printf_i+0x19c>
 8002de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002df0:	e03a      	b.n	8002e68 <_printf_i+0xa8>
 8002df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002df6:	2b15      	cmp	r3, #21
 8002df8:	d8f6      	bhi.n	8002de8 <_printf_i+0x28>
 8002dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8002e00 <_printf_i+0x40>)
 8002dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e00:	08002e59 	.word	0x08002e59
 8002e04:	08002e6d 	.word	0x08002e6d
 8002e08:	08002de9 	.word	0x08002de9
 8002e0c:	08002de9 	.word	0x08002de9
 8002e10:	08002de9 	.word	0x08002de9
 8002e14:	08002de9 	.word	0x08002de9
 8002e18:	08002e6d 	.word	0x08002e6d
 8002e1c:	08002de9 	.word	0x08002de9
 8002e20:	08002de9 	.word	0x08002de9
 8002e24:	08002de9 	.word	0x08002de9
 8002e28:	08002de9 	.word	0x08002de9
 8002e2c:	08002f6f 	.word	0x08002f6f
 8002e30:	08002e97 	.word	0x08002e97
 8002e34:	08002f29 	.word	0x08002f29
 8002e38:	08002de9 	.word	0x08002de9
 8002e3c:	08002de9 	.word	0x08002de9
 8002e40:	08002f91 	.word	0x08002f91
 8002e44:	08002de9 	.word	0x08002de9
 8002e48:	08002e97 	.word	0x08002e97
 8002e4c:	08002de9 	.word	0x08002de9
 8002e50:	08002de9 	.word	0x08002de9
 8002e54:	08002f31 	.word	0x08002f31
 8002e58:	6833      	ldr	r3, [r6, #0]
 8002e5a:	1d1a      	adds	r2, r3, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6032      	str	r2, [r6, #0]
 8002e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e09e      	b.n	8002faa <_printf_i+0x1ea>
 8002e6c:	6833      	ldr	r3, [r6, #0]
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	1d19      	adds	r1, r3, #4
 8002e72:	6031      	str	r1, [r6, #0]
 8002e74:	0606      	lsls	r6, r0, #24
 8002e76:	d501      	bpl.n	8002e7c <_printf_i+0xbc>
 8002e78:	681d      	ldr	r5, [r3, #0]
 8002e7a:	e003      	b.n	8002e84 <_printf_i+0xc4>
 8002e7c:	0645      	lsls	r5, r0, #25
 8002e7e:	d5fb      	bpl.n	8002e78 <_printf_i+0xb8>
 8002e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e84:	2d00      	cmp	r5, #0
 8002e86:	da03      	bge.n	8002e90 <_printf_i+0xd0>
 8002e88:	232d      	movs	r3, #45	@ 0x2d
 8002e8a:	426d      	negs	r5, r5
 8002e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e90:	230a      	movs	r3, #10
 8002e92:	4859      	ldr	r0, [pc, #356]	@ (8002ff8 <_printf_i+0x238>)
 8002e94:	e011      	b.n	8002eba <_printf_i+0xfa>
 8002e96:	6821      	ldr	r1, [r4, #0]
 8002e98:	6833      	ldr	r3, [r6, #0]
 8002e9a:	0608      	lsls	r0, r1, #24
 8002e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ea0:	d402      	bmi.n	8002ea8 <_printf_i+0xe8>
 8002ea2:	0649      	lsls	r1, r1, #25
 8002ea4:	bf48      	it	mi
 8002ea6:	b2ad      	uxthmi	r5, r5
 8002ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002eaa:	6033      	str	r3, [r6, #0]
 8002eac:	bf14      	ite	ne
 8002eae:	230a      	movne	r3, #10
 8002eb0:	2308      	moveq	r3, #8
 8002eb2:	4851      	ldr	r0, [pc, #324]	@ (8002ff8 <_printf_i+0x238>)
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002eba:	6866      	ldr	r6, [r4, #4]
 8002ebc:	2e00      	cmp	r6, #0
 8002ebe:	bfa8      	it	ge
 8002ec0:	6821      	ldrge	r1, [r4, #0]
 8002ec2:	60a6      	str	r6, [r4, #8]
 8002ec4:	bfa4      	itt	ge
 8002ec6:	f021 0104 	bicge.w	r1, r1, #4
 8002eca:	6021      	strge	r1, [r4, #0]
 8002ecc:	b90d      	cbnz	r5, 8002ed2 <_printf_i+0x112>
 8002ece:	2e00      	cmp	r6, #0
 8002ed0:	d04b      	beq.n	8002f6a <_printf_i+0x1aa>
 8002ed2:	4616      	mov	r6, r2
 8002ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8002edc:	5dc7      	ldrb	r7, [r0, r7]
 8002ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ee2:	462f      	mov	r7, r5
 8002ee4:	42bb      	cmp	r3, r7
 8002ee6:	460d      	mov	r5, r1
 8002ee8:	d9f4      	bls.n	8002ed4 <_printf_i+0x114>
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d10b      	bne.n	8002f06 <_printf_i+0x146>
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	07df      	lsls	r7, r3, #31
 8002ef2:	d508      	bpl.n	8002f06 <_printf_i+0x146>
 8002ef4:	6923      	ldr	r3, [r4, #16]
 8002ef6:	6861      	ldr	r1, [r4, #4]
 8002ef8:	4299      	cmp	r1, r3
 8002efa:	bfde      	ittt	le
 8002efc:	2330      	movle	r3, #48	@ 0x30
 8002efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f06:	1b92      	subs	r2, r2, r6
 8002f08:	6122      	str	r2, [r4, #16]
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	4640      	mov	r0, r8
 8002f10:	f8cd a000 	str.w	sl, [sp]
 8002f14:	aa03      	add	r2, sp, #12
 8002f16:	f7ff fee1 	bl	8002cdc <_printf_common>
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d14a      	bne.n	8002fb4 <_printf_i+0x1f4>
 8002f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f22:	b004      	add	sp, #16
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	f043 0320 	orr.w	r3, r3, #32
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	2778      	movs	r7, #120	@ 0x78
 8002f32:	4832      	ldr	r0, [pc, #200]	@ (8002ffc <_printf_i+0x23c>)
 8002f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	6831      	ldr	r1, [r6, #0]
 8002f3c:	061f      	lsls	r7, r3, #24
 8002f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f42:	d402      	bmi.n	8002f4a <_printf_i+0x18a>
 8002f44:	065f      	lsls	r7, r3, #25
 8002f46:	bf48      	it	mi
 8002f48:	b2ad      	uxthmi	r5, r5
 8002f4a:	6031      	str	r1, [r6, #0]
 8002f4c:	07d9      	lsls	r1, r3, #31
 8002f4e:	bf44      	itt	mi
 8002f50:	f043 0320 	orrmi.w	r3, r3, #32
 8002f54:	6023      	strmi	r3, [r4, #0]
 8002f56:	b11d      	cbz	r5, 8002f60 <_printf_i+0x1a0>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	e7ab      	b.n	8002eb4 <_printf_i+0xf4>
 8002f5c:	4826      	ldr	r0, [pc, #152]	@ (8002ff8 <_printf_i+0x238>)
 8002f5e:	e7e9      	b.n	8002f34 <_printf_i+0x174>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	f023 0320 	bic.w	r3, r3, #32
 8002f66:	6023      	str	r3, [r4, #0]
 8002f68:	e7f6      	b.n	8002f58 <_printf_i+0x198>
 8002f6a:	4616      	mov	r6, r2
 8002f6c:	e7bd      	b.n	8002eea <_printf_i+0x12a>
 8002f6e:	6833      	ldr	r3, [r6, #0]
 8002f70:	6825      	ldr	r5, [r4, #0]
 8002f72:	1d18      	adds	r0, r3, #4
 8002f74:	6961      	ldr	r1, [r4, #20]
 8002f76:	6030      	str	r0, [r6, #0]
 8002f78:	062e      	lsls	r6, r5, #24
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	d501      	bpl.n	8002f82 <_printf_i+0x1c2>
 8002f7e:	6019      	str	r1, [r3, #0]
 8002f80:	e002      	b.n	8002f88 <_printf_i+0x1c8>
 8002f82:	0668      	lsls	r0, r5, #25
 8002f84:	d5fb      	bpl.n	8002f7e <_printf_i+0x1be>
 8002f86:	8019      	strh	r1, [r3, #0]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	4616      	mov	r6, r2
 8002f8c:	6123      	str	r3, [r4, #16]
 8002f8e:	e7bc      	b.n	8002f0a <_printf_i+0x14a>
 8002f90:	6833      	ldr	r3, [r6, #0]
 8002f92:	2100      	movs	r1, #0
 8002f94:	1d1a      	adds	r2, r3, #4
 8002f96:	6032      	str	r2, [r6, #0]
 8002f98:	681e      	ldr	r6, [r3, #0]
 8002f9a:	6862      	ldr	r2, [r4, #4]
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	f000 fbe4 	bl	800376a <memchr>
 8002fa2:	b108      	cbz	r0, 8002fa8 <_printf_i+0x1e8>
 8002fa4:	1b80      	subs	r0, r0, r6
 8002fa6:	6060      	str	r0, [r4, #4]
 8002fa8:	6863      	ldr	r3, [r4, #4]
 8002faa:	6123      	str	r3, [r4, #16]
 8002fac:	2300      	movs	r3, #0
 8002fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fb2:	e7aa      	b.n	8002f0a <_printf_i+0x14a>
 8002fb4:	4632      	mov	r2, r6
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	4640      	mov	r0, r8
 8002fba:	6923      	ldr	r3, [r4, #16]
 8002fbc:	47d0      	blx	sl
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	d0ad      	beq.n	8002f1e <_printf_i+0x15e>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	079b      	lsls	r3, r3, #30
 8002fc6:	d413      	bmi.n	8002ff0 <_printf_i+0x230>
 8002fc8:	68e0      	ldr	r0, [r4, #12]
 8002fca:	9b03      	ldr	r3, [sp, #12]
 8002fcc:	4298      	cmp	r0, r3
 8002fce:	bfb8      	it	lt
 8002fd0:	4618      	movlt	r0, r3
 8002fd2:	e7a6      	b.n	8002f22 <_printf_i+0x162>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4632      	mov	r2, r6
 8002fd8:	4649      	mov	r1, r9
 8002fda:	4640      	mov	r0, r8
 8002fdc:	47d0      	blx	sl
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d09d      	beq.n	8002f1e <_printf_i+0x15e>
 8002fe2:	3501      	adds	r5, #1
 8002fe4:	68e3      	ldr	r3, [r4, #12]
 8002fe6:	9903      	ldr	r1, [sp, #12]
 8002fe8:	1a5b      	subs	r3, r3, r1
 8002fea:	42ab      	cmp	r3, r5
 8002fec:	dcf2      	bgt.n	8002fd4 <_printf_i+0x214>
 8002fee:	e7eb      	b.n	8002fc8 <_printf_i+0x208>
 8002ff0:	2500      	movs	r5, #0
 8002ff2:	f104 0619 	add.w	r6, r4, #25
 8002ff6:	e7f5      	b.n	8002fe4 <_printf_i+0x224>
 8002ff8:	08006e54 	.word	0x08006e54
 8002ffc:	08006e65 	.word	0x08006e65

08003000 <_scanf_float>:
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	b087      	sub	sp, #28
 8003006:	9303      	str	r3, [sp, #12]
 8003008:	688b      	ldr	r3, [r1, #8]
 800300a:	4617      	mov	r7, r2
 800300c:	1e5a      	subs	r2, r3, #1
 800300e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003012:	bf82      	ittt	hi
 8003014:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003018:	eb03 0b05 	addhi.w	fp, r3, r5
 800301c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003020:	460a      	mov	r2, r1
 8003022:	f04f 0500 	mov.w	r5, #0
 8003026:	bf88      	it	hi
 8003028:	608b      	strhi	r3, [r1, #8]
 800302a:	680b      	ldr	r3, [r1, #0]
 800302c:	4680      	mov	r8, r0
 800302e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003032:	f842 3b1c 	str.w	r3, [r2], #28
 8003036:	460c      	mov	r4, r1
 8003038:	bf98      	it	ls
 800303a:	f04f 0b00 	movls.w	fp, #0
 800303e:	4616      	mov	r6, r2
 8003040:	46aa      	mov	sl, r5
 8003042:	46a9      	mov	r9, r5
 8003044:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003048:	9201      	str	r2, [sp, #4]
 800304a:	9502      	str	r5, [sp, #8]
 800304c:	68a2      	ldr	r2, [r4, #8]
 800304e:	b152      	cbz	r2, 8003066 <_scanf_float+0x66>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b4e      	cmp	r3, #78	@ 0x4e
 8003056:	d865      	bhi.n	8003124 <_scanf_float+0x124>
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d83d      	bhi.n	80030d8 <_scanf_float+0xd8>
 800305c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003060:	b2c8      	uxtb	r0, r1
 8003062:	280e      	cmp	r0, #14
 8003064:	d93b      	bls.n	80030de <_scanf_float+0xde>
 8003066:	f1b9 0f00 	cmp.w	r9, #0
 800306a:	d003      	beq.n	8003074 <_scanf_float+0x74>
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003072:	6023      	str	r3, [r4, #0]
 8003074:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003078:	f1ba 0f01 	cmp.w	sl, #1
 800307c:	f200 8118 	bhi.w	80032b0 <_scanf_float+0x2b0>
 8003080:	9b01      	ldr	r3, [sp, #4]
 8003082:	429e      	cmp	r6, r3
 8003084:	f200 8109 	bhi.w	800329a <_scanf_float+0x29a>
 8003088:	2001      	movs	r0, #1
 800308a:	b007      	add	sp, #28
 800308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003090:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003094:	2a0d      	cmp	r2, #13
 8003096:	d8e6      	bhi.n	8003066 <_scanf_float+0x66>
 8003098:	a101      	add	r1, pc, #4	@ (adr r1, 80030a0 <_scanf_float+0xa0>)
 800309a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080031e7 	.word	0x080031e7
 80030a4:	08003067 	.word	0x08003067
 80030a8:	08003067 	.word	0x08003067
 80030ac:	08003067 	.word	0x08003067
 80030b0:	08003247 	.word	0x08003247
 80030b4:	0800321f 	.word	0x0800321f
 80030b8:	08003067 	.word	0x08003067
 80030bc:	08003067 	.word	0x08003067
 80030c0:	080031f5 	.word	0x080031f5
 80030c4:	08003067 	.word	0x08003067
 80030c8:	08003067 	.word	0x08003067
 80030cc:	08003067 	.word	0x08003067
 80030d0:	08003067 	.word	0x08003067
 80030d4:	080031ad 	.word	0x080031ad
 80030d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80030dc:	e7da      	b.n	8003094 <_scanf_float+0x94>
 80030de:	290e      	cmp	r1, #14
 80030e0:	d8c1      	bhi.n	8003066 <_scanf_float+0x66>
 80030e2:	a001      	add	r0, pc, #4	@ (adr r0, 80030e8 <_scanf_float+0xe8>)
 80030e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80030e8:	0800319d 	.word	0x0800319d
 80030ec:	08003067 	.word	0x08003067
 80030f0:	0800319d 	.word	0x0800319d
 80030f4:	08003233 	.word	0x08003233
 80030f8:	08003067 	.word	0x08003067
 80030fc:	08003145 	.word	0x08003145
 8003100:	08003183 	.word	0x08003183
 8003104:	08003183 	.word	0x08003183
 8003108:	08003183 	.word	0x08003183
 800310c:	08003183 	.word	0x08003183
 8003110:	08003183 	.word	0x08003183
 8003114:	08003183 	.word	0x08003183
 8003118:	08003183 	.word	0x08003183
 800311c:	08003183 	.word	0x08003183
 8003120:	08003183 	.word	0x08003183
 8003124:	2b6e      	cmp	r3, #110	@ 0x6e
 8003126:	d809      	bhi.n	800313c <_scanf_float+0x13c>
 8003128:	2b60      	cmp	r3, #96	@ 0x60
 800312a:	d8b1      	bhi.n	8003090 <_scanf_float+0x90>
 800312c:	2b54      	cmp	r3, #84	@ 0x54
 800312e:	d07b      	beq.n	8003228 <_scanf_float+0x228>
 8003130:	2b59      	cmp	r3, #89	@ 0x59
 8003132:	d198      	bne.n	8003066 <_scanf_float+0x66>
 8003134:	2d07      	cmp	r5, #7
 8003136:	d196      	bne.n	8003066 <_scanf_float+0x66>
 8003138:	2508      	movs	r5, #8
 800313a:	e02c      	b.n	8003196 <_scanf_float+0x196>
 800313c:	2b74      	cmp	r3, #116	@ 0x74
 800313e:	d073      	beq.n	8003228 <_scanf_float+0x228>
 8003140:	2b79      	cmp	r3, #121	@ 0x79
 8003142:	e7f6      	b.n	8003132 <_scanf_float+0x132>
 8003144:	6821      	ldr	r1, [r4, #0]
 8003146:	05c8      	lsls	r0, r1, #23
 8003148:	d51b      	bpl.n	8003182 <_scanf_float+0x182>
 800314a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800314e:	6021      	str	r1, [r4, #0]
 8003150:	f109 0901 	add.w	r9, r9, #1
 8003154:	f1bb 0f00 	cmp.w	fp, #0
 8003158:	d003      	beq.n	8003162 <_scanf_float+0x162>
 800315a:	3201      	adds	r2, #1
 800315c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003160:	60a2      	str	r2, [r4, #8]
 8003162:	68a3      	ldr	r3, [r4, #8]
 8003164:	3b01      	subs	r3, #1
 8003166:	60a3      	str	r3, [r4, #8]
 8003168:	6923      	ldr	r3, [r4, #16]
 800316a:	3301      	adds	r3, #1
 800316c:	6123      	str	r3, [r4, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3b01      	subs	r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	f340 8087 	ble.w	8003288 <_scanf_float+0x288>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	e764      	b.n	800304c <_scanf_float+0x4c>
 8003182:	eb1a 0105 	adds.w	r1, sl, r5
 8003186:	f47f af6e 	bne.w	8003066 <_scanf_float+0x66>
 800318a:	460d      	mov	r5, r1
 800318c:	468a      	mov	sl, r1
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003194:	6022      	str	r2, [r4, #0]
 8003196:	f806 3b01 	strb.w	r3, [r6], #1
 800319a:	e7e2      	b.n	8003162 <_scanf_float+0x162>
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	0610      	lsls	r0, r2, #24
 80031a0:	f57f af61 	bpl.w	8003066 <_scanf_float+0x66>
 80031a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031a8:	6022      	str	r2, [r4, #0]
 80031aa:	e7f4      	b.n	8003196 <_scanf_float+0x196>
 80031ac:	f1ba 0f00 	cmp.w	sl, #0
 80031b0:	d10e      	bne.n	80031d0 <_scanf_float+0x1d0>
 80031b2:	f1b9 0f00 	cmp.w	r9, #0
 80031b6:	d10e      	bne.n	80031d6 <_scanf_float+0x1d6>
 80031b8:	6822      	ldr	r2, [r4, #0]
 80031ba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80031be:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80031c2:	d108      	bne.n	80031d6 <_scanf_float+0x1d6>
 80031c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80031c8:	f04f 0a01 	mov.w	sl, #1
 80031cc:	6022      	str	r2, [r4, #0]
 80031ce:	e7e2      	b.n	8003196 <_scanf_float+0x196>
 80031d0:	f1ba 0f02 	cmp.w	sl, #2
 80031d4:	d055      	beq.n	8003282 <_scanf_float+0x282>
 80031d6:	2d01      	cmp	r5, #1
 80031d8:	d002      	beq.n	80031e0 <_scanf_float+0x1e0>
 80031da:	2d04      	cmp	r5, #4
 80031dc:	f47f af43 	bne.w	8003066 <_scanf_float+0x66>
 80031e0:	3501      	adds	r5, #1
 80031e2:	b2ed      	uxtb	r5, r5
 80031e4:	e7d7      	b.n	8003196 <_scanf_float+0x196>
 80031e6:	f1ba 0f01 	cmp.w	sl, #1
 80031ea:	f47f af3c 	bne.w	8003066 <_scanf_float+0x66>
 80031ee:	f04f 0a02 	mov.w	sl, #2
 80031f2:	e7d0      	b.n	8003196 <_scanf_float+0x196>
 80031f4:	b97d      	cbnz	r5, 8003216 <_scanf_float+0x216>
 80031f6:	f1b9 0f00 	cmp.w	r9, #0
 80031fa:	f47f af37 	bne.w	800306c <_scanf_float+0x6c>
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003204:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003208:	f040 8103 	bne.w	8003412 <_scanf_float+0x412>
 800320c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003210:	2501      	movs	r5, #1
 8003212:	6022      	str	r2, [r4, #0]
 8003214:	e7bf      	b.n	8003196 <_scanf_float+0x196>
 8003216:	2d03      	cmp	r5, #3
 8003218:	d0e2      	beq.n	80031e0 <_scanf_float+0x1e0>
 800321a:	2d05      	cmp	r5, #5
 800321c:	e7de      	b.n	80031dc <_scanf_float+0x1dc>
 800321e:	2d02      	cmp	r5, #2
 8003220:	f47f af21 	bne.w	8003066 <_scanf_float+0x66>
 8003224:	2503      	movs	r5, #3
 8003226:	e7b6      	b.n	8003196 <_scanf_float+0x196>
 8003228:	2d06      	cmp	r5, #6
 800322a:	f47f af1c 	bne.w	8003066 <_scanf_float+0x66>
 800322e:	2507      	movs	r5, #7
 8003230:	e7b1      	b.n	8003196 <_scanf_float+0x196>
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	0591      	lsls	r1, r2, #22
 8003236:	f57f af16 	bpl.w	8003066 <_scanf_float+0x66>
 800323a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800323e:	6022      	str	r2, [r4, #0]
 8003240:	f8cd 9008 	str.w	r9, [sp, #8]
 8003244:	e7a7      	b.n	8003196 <_scanf_float+0x196>
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800324c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003250:	d006      	beq.n	8003260 <_scanf_float+0x260>
 8003252:	0550      	lsls	r0, r2, #21
 8003254:	f57f af07 	bpl.w	8003066 <_scanf_float+0x66>
 8003258:	f1b9 0f00 	cmp.w	r9, #0
 800325c:	f000 80d9 	beq.w	8003412 <_scanf_float+0x412>
 8003260:	0591      	lsls	r1, r2, #22
 8003262:	bf58      	it	pl
 8003264:	9902      	ldrpl	r1, [sp, #8]
 8003266:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800326a:	bf58      	it	pl
 800326c:	eba9 0101 	subpl.w	r1, r9, r1
 8003270:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003274:	f04f 0900 	mov.w	r9, #0
 8003278:	bf58      	it	pl
 800327a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800327e:	6022      	str	r2, [r4, #0]
 8003280:	e789      	b.n	8003196 <_scanf_float+0x196>
 8003282:	f04f 0a03 	mov.w	sl, #3
 8003286:	e786      	b.n	8003196 <_scanf_float+0x196>
 8003288:	4639      	mov	r1, r7
 800328a:	4640      	mov	r0, r8
 800328c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003290:	4798      	blx	r3
 8003292:	2800      	cmp	r0, #0
 8003294:	f43f aeda 	beq.w	800304c <_scanf_float+0x4c>
 8003298:	e6e5      	b.n	8003066 <_scanf_float+0x66>
 800329a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800329e:	463a      	mov	r2, r7
 80032a0:	4640      	mov	r0, r8
 80032a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80032a6:	4798      	blx	r3
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6123      	str	r3, [r4, #16]
 80032ae:	e6e7      	b.n	8003080 <_scanf_float+0x80>
 80032b0:	1e6b      	subs	r3, r5, #1
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d824      	bhi.n	8003300 <_scanf_float+0x300>
 80032b6:	2d02      	cmp	r5, #2
 80032b8:	d836      	bhi.n	8003328 <_scanf_float+0x328>
 80032ba:	9b01      	ldr	r3, [sp, #4]
 80032bc:	429e      	cmp	r6, r3
 80032be:	f67f aee3 	bls.w	8003088 <_scanf_float+0x88>
 80032c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80032c6:	463a      	mov	r2, r7
 80032c8:	4640      	mov	r0, r8
 80032ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80032ce:	4798      	blx	r3
 80032d0:	6923      	ldr	r3, [r4, #16]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	6123      	str	r3, [r4, #16]
 80032d6:	e7f0      	b.n	80032ba <_scanf_float+0x2ba>
 80032d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80032dc:	463a      	mov	r2, r7
 80032de:	4640      	mov	r0, r8
 80032e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80032e4:	4798      	blx	r3
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	6123      	str	r3, [r4, #16]
 80032ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80032f0:	fa5f fa8a 	uxtb.w	sl, sl
 80032f4:	f1ba 0f02 	cmp.w	sl, #2
 80032f8:	d1ee      	bne.n	80032d8 <_scanf_float+0x2d8>
 80032fa:	3d03      	subs	r5, #3
 80032fc:	b2ed      	uxtb	r5, r5
 80032fe:	1b76      	subs	r6, r6, r5
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	05da      	lsls	r2, r3, #23
 8003304:	d530      	bpl.n	8003368 <_scanf_float+0x368>
 8003306:	055b      	lsls	r3, r3, #21
 8003308:	d511      	bpl.n	800332e <_scanf_float+0x32e>
 800330a:	9b01      	ldr	r3, [sp, #4]
 800330c:	429e      	cmp	r6, r3
 800330e:	f67f aebb 	bls.w	8003088 <_scanf_float+0x88>
 8003312:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003316:	463a      	mov	r2, r7
 8003318:	4640      	mov	r0, r8
 800331a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800331e:	4798      	blx	r3
 8003320:	6923      	ldr	r3, [r4, #16]
 8003322:	3b01      	subs	r3, #1
 8003324:	6123      	str	r3, [r4, #16]
 8003326:	e7f0      	b.n	800330a <_scanf_float+0x30a>
 8003328:	46aa      	mov	sl, r5
 800332a:	46b3      	mov	fp, r6
 800332c:	e7de      	b.n	80032ec <_scanf_float+0x2ec>
 800332e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003332:	6923      	ldr	r3, [r4, #16]
 8003334:	2965      	cmp	r1, #101	@ 0x65
 8003336:	f103 33ff 	add.w	r3, r3, #4294967295
 800333a:	f106 35ff 	add.w	r5, r6, #4294967295
 800333e:	6123      	str	r3, [r4, #16]
 8003340:	d00c      	beq.n	800335c <_scanf_float+0x35c>
 8003342:	2945      	cmp	r1, #69	@ 0x45
 8003344:	d00a      	beq.n	800335c <_scanf_float+0x35c>
 8003346:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800334a:	463a      	mov	r2, r7
 800334c:	4640      	mov	r0, r8
 800334e:	4798      	blx	r3
 8003350:	6923      	ldr	r3, [r4, #16]
 8003352:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003356:	3b01      	subs	r3, #1
 8003358:	1eb5      	subs	r5, r6, #2
 800335a:	6123      	str	r3, [r4, #16]
 800335c:	463a      	mov	r2, r7
 800335e:	4640      	mov	r0, r8
 8003360:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003364:	4798      	blx	r3
 8003366:	462e      	mov	r6, r5
 8003368:	6822      	ldr	r2, [r4, #0]
 800336a:	f012 0210 	ands.w	r2, r2, #16
 800336e:	d001      	beq.n	8003374 <_scanf_float+0x374>
 8003370:	2000      	movs	r0, #0
 8003372:	e68a      	b.n	800308a <_scanf_float+0x8a>
 8003374:	7032      	strb	r2, [r6, #0]
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800337c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003380:	d11c      	bne.n	80033bc <_scanf_float+0x3bc>
 8003382:	9b02      	ldr	r3, [sp, #8]
 8003384:	454b      	cmp	r3, r9
 8003386:	eba3 0209 	sub.w	r2, r3, r9
 800338a:	d123      	bne.n	80033d4 <_scanf_float+0x3d4>
 800338c:	2200      	movs	r2, #0
 800338e:	4640      	mov	r0, r8
 8003390:	9901      	ldr	r1, [sp, #4]
 8003392:	f002 fbed 	bl	8005b70 <_strtod_r>
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	6825      	ldr	r5, [r4, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f015 0f02 	tst.w	r5, #2
 80033a0:	4606      	mov	r6, r0
 80033a2:	460f      	mov	r7, r1
 80033a4:	f103 0204 	add.w	r2, r3, #4
 80033a8:	d01f      	beq.n	80033ea <_scanf_float+0x3ea>
 80033aa:	9903      	ldr	r1, [sp, #12]
 80033ac:	600a      	str	r2, [r1, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	e9c3 6700 	strd	r6, r7, [r3]
 80033b4:	68e3      	ldr	r3, [r4, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60e3      	str	r3, [r4, #12]
 80033ba:	e7d9      	b.n	8003370 <_scanf_float+0x370>
 80033bc:	9b04      	ldr	r3, [sp, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0e4      	beq.n	800338c <_scanf_float+0x38c>
 80033c2:	9905      	ldr	r1, [sp, #20]
 80033c4:	230a      	movs	r3, #10
 80033c6:	4640      	mov	r0, r8
 80033c8:	3101      	adds	r1, #1
 80033ca:	f002 fc51 	bl	8005c70 <_strtol_r>
 80033ce:	9b04      	ldr	r3, [sp, #16]
 80033d0:	9e05      	ldr	r6, [sp, #20]
 80033d2:	1ac2      	subs	r2, r0, r3
 80033d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80033d8:	429e      	cmp	r6, r3
 80033da:	bf28      	it	cs
 80033dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80033e0:	4630      	mov	r0, r6
 80033e2:	490d      	ldr	r1, [pc, #52]	@ (8003418 <_scanf_float+0x418>)
 80033e4:	f000 f8de 	bl	80035a4 <siprintf>
 80033e8:	e7d0      	b.n	800338c <_scanf_float+0x38c>
 80033ea:	076d      	lsls	r5, r5, #29
 80033ec:	d4dd      	bmi.n	80033aa <_scanf_float+0x3aa>
 80033ee:	9d03      	ldr	r5, [sp, #12]
 80033f0:	602a      	str	r2, [r5, #0]
 80033f2:	681d      	ldr	r5, [r3, #0]
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	f7fd fb08 	bl	8000a0c <__aeabi_dcmpun>
 80033fc:	b120      	cbz	r0, 8003408 <_scanf_float+0x408>
 80033fe:	4807      	ldr	r0, [pc, #28]	@ (800341c <_scanf_float+0x41c>)
 8003400:	f000 f9c2 	bl	8003788 <nanf>
 8003404:	6028      	str	r0, [r5, #0]
 8003406:	e7d5      	b.n	80033b4 <_scanf_float+0x3b4>
 8003408:	4630      	mov	r0, r6
 800340a:	4639      	mov	r1, r7
 800340c:	f7fd fb5c 	bl	8000ac8 <__aeabi_d2f>
 8003410:	e7f8      	b.n	8003404 <_scanf_float+0x404>
 8003412:	f04f 0900 	mov.w	r9, #0
 8003416:	e62d      	b.n	8003074 <_scanf_float+0x74>
 8003418:	08006e76 	.word	0x08006e76
 800341c:	0800720d 	.word	0x0800720d

08003420 <std>:
 8003420:	2300      	movs	r3, #0
 8003422:	b510      	push	{r4, lr}
 8003424:	4604      	mov	r4, r0
 8003426:	e9c0 3300 	strd	r3, r3, [r0]
 800342a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800342e:	6083      	str	r3, [r0, #8]
 8003430:	8181      	strh	r1, [r0, #12]
 8003432:	6643      	str	r3, [r0, #100]	@ 0x64
 8003434:	81c2      	strh	r2, [r0, #14]
 8003436:	6183      	str	r3, [r0, #24]
 8003438:	4619      	mov	r1, r3
 800343a:	2208      	movs	r2, #8
 800343c:	305c      	adds	r0, #92	@ 0x5c
 800343e:	f000 f914 	bl	800366a <memset>
 8003442:	4b0d      	ldr	r3, [pc, #52]	@ (8003478 <std+0x58>)
 8003444:	6224      	str	r4, [r4, #32]
 8003446:	6263      	str	r3, [r4, #36]	@ 0x24
 8003448:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <std+0x5c>)
 800344a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800344c:	4b0c      	ldr	r3, [pc, #48]	@ (8003480 <std+0x60>)
 800344e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <std+0x64>)
 8003452:	6323      	str	r3, [r4, #48]	@ 0x30
 8003454:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <std+0x68>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d006      	beq.n	8003468 <std+0x48>
 800345a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800345e:	4294      	cmp	r4, r2
 8003460:	d002      	beq.n	8003468 <std+0x48>
 8003462:	33d0      	adds	r3, #208	@ 0xd0
 8003464:	429c      	cmp	r4, r3
 8003466:	d105      	bne.n	8003474 <std+0x54>
 8003468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800346c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003470:	f000 b978 	b.w	8003764 <__retarget_lock_init_recursive>
 8003474:	bd10      	pop	{r4, pc}
 8003476:	bf00      	nop
 8003478:	080035e5 	.word	0x080035e5
 800347c:	08003607 	.word	0x08003607
 8003480:	0800363f 	.word	0x0800363f
 8003484:	08003663 	.word	0x08003663
 8003488:	2000020c 	.word	0x2000020c

0800348c <stdio_exit_handler>:
 800348c:	4a02      	ldr	r2, [pc, #8]	@ (8003498 <stdio_exit_handler+0xc>)
 800348e:	4903      	ldr	r1, [pc, #12]	@ (800349c <stdio_exit_handler+0x10>)
 8003490:	4803      	ldr	r0, [pc, #12]	@ (80034a0 <stdio_exit_handler+0x14>)
 8003492:	f000 b869 	b.w	8003568 <_fwalk_sglue>
 8003496:	bf00      	nop
 8003498:	20000020 	.word	0x20000020
 800349c:	08006025 	.word	0x08006025
 80034a0:	20000030 	.word	0x20000030

080034a4 <cleanup_stdio>:
 80034a4:	6841      	ldr	r1, [r0, #4]
 80034a6:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <cleanup_stdio+0x34>)
 80034a8:	b510      	push	{r4, lr}
 80034aa:	4299      	cmp	r1, r3
 80034ac:	4604      	mov	r4, r0
 80034ae:	d001      	beq.n	80034b4 <cleanup_stdio+0x10>
 80034b0:	f002 fdb8 	bl	8006024 <_fflush_r>
 80034b4:	68a1      	ldr	r1, [r4, #8]
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <cleanup_stdio+0x38>)
 80034b8:	4299      	cmp	r1, r3
 80034ba:	d002      	beq.n	80034c2 <cleanup_stdio+0x1e>
 80034bc:	4620      	mov	r0, r4
 80034be:	f002 fdb1 	bl	8006024 <_fflush_r>
 80034c2:	68e1      	ldr	r1, [r4, #12]
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <cleanup_stdio+0x3c>)
 80034c6:	4299      	cmp	r1, r3
 80034c8:	d004      	beq.n	80034d4 <cleanup_stdio+0x30>
 80034ca:	4620      	mov	r0, r4
 80034cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d0:	f002 bda8 	b.w	8006024 <_fflush_r>
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	bf00      	nop
 80034d8:	2000020c 	.word	0x2000020c
 80034dc:	20000274 	.word	0x20000274
 80034e0:	200002dc 	.word	0x200002dc

080034e4 <global_stdio_init.part.0>:
 80034e4:	b510      	push	{r4, lr}
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <global_stdio_init.part.0+0x30>)
 80034e8:	4c0b      	ldr	r4, [pc, #44]	@ (8003518 <global_stdio_init.part.0+0x34>)
 80034ea:	4a0c      	ldr	r2, [pc, #48]	@ (800351c <global_stdio_init.part.0+0x38>)
 80034ec:	4620      	mov	r0, r4
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	2104      	movs	r1, #4
 80034f2:	2200      	movs	r2, #0
 80034f4:	f7ff ff94 	bl	8003420 <std>
 80034f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034fc:	2201      	movs	r2, #1
 80034fe:	2109      	movs	r1, #9
 8003500:	f7ff ff8e 	bl	8003420 <std>
 8003504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003508:	2202      	movs	r2, #2
 800350a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800350e:	2112      	movs	r1, #18
 8003510:	f7ff bf86 	b.w	8003420 <std>
 8003514:	20000344 	.word	0x20000344
 8003518:	2000020c 	.word	0x2000020c
 800351c:	0800348d 	.word	0x0800348d

08003520 <__sfp_lock_acquire>:
 8003520:	4801      	ldr	r0, [pc, #4]	@ (8003528 <__sfp_lock_acquire+0x8>)
 8003522:	f000 b920 	b.w	8003766 <__retarget_lock_acquire_recursive>
 8003526:	bf00      	nop
 8003528:	2000034d 	.word	0x2000034d

0800352c <__sfp_lock_release>:
 800352c:	4801      	ldr	r0, [pc, #4]	@ (8003534 <__sfp_lock_release+0x8>)
 800352e:	f000 b91b 	b.w	8003768 <__retarget_lock_release_recursive>
 8003532:	bf00      	nop
 8003534:	2000034d 	.word	0x2000034d

08003538 <__sinit>:
 8003538:	b510      	push	{r4, lr}
 800353a:	4604      	mov	r4, r0
 800353c:	f7ff fff0 	bl	8003520 <__sfp_lock_acquire>
 8003540:	6a23      	ldr	r3, [r4, #32]
 8003542:	b11b      	cbz	r3, 800354c <__sinit+0x14>
 8003544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003548:	f7ff bff0 	b.w	800352c <__sfp_lock_release>
 800354c:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <__sinit+0x28>)
 800354e:	6223      	str	r3, [r4, #32]
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <__sinit+0x2c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f5      	bne.n	8003544 <__sinit+0xc>
 8003558:	f7ff ffc4 	bl	80034e4 <global_stdio_init.part.0>
 800355c:	e7f2      	b.n	8003544 <__sinit+0xc>
 800355e:	bf00      	nop
 8003560:	080034a5 	.word	0x080034a5
 8003564:	20000344 	.word	0x20000344

08003568 <_fwalk_sglue>:
 8003568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800356c:	4607      	mov	r7, r0
 800356e:	4688      	mov	r8, r1
 8003570:	4614      	mov	r4, r2
 8003572:	2600      	movs	r6, #0
 8003574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003578:	f1b9 0901 	subs.w	r9, r9, #1
 800357c:	d505      	bpl.n	800358a <_fwalk_sglue+0x22>
 800357e:	6824      	ldr	r4, [r4, #0]
 8003580:	2c00      	cmp	r4, #0
 8003582:	d1f7      	bne.n	8003574 <_fwalk_sglue+0xc>
 8003584:	4630      	mov	r0, r6
 8003586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800358a:	89ab      	ldrh	r3, [r5, #12]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d907      	bls.n	80035a0 <_fwalk_sglue+0x38>
 8003590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003594:	3301      	adds	r3, #1
 8003596:	d003      	beq.n	80035a0 <_fwalk_sglue+0x38>
 8003598:	4629      	mov	r1, r5
 800359a:	4638      	mov	r0, r7
 800359c:	47c0      	blx	r8
 800359e:	4306      	orrs	r6, r0
 80035a0:	3568      	adds	r5, #104	@ 0x68
 80035a2:	e7e9      	b.n	8003578 <_fwalk_sglue+0x10>

080035a4 <siprintf>:
 80035a4:	b40e      	push	{r1, r2, r3}
 80035a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035aa:	b500      	push	{lr}
 80035ac:	b09c      	sub	sp, #112	@ 0x70
 80035ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80035b0:	9002      	str	r0, [sp, #8]
 80035b2:	9006      	str	r0, [sp, #24]
 80035b4:	9107      	str	r1, [sp, #28]
 80035b6:	9104      	str	r1, [sp, #16]
 80035b8:	4808      	ldr	r0, [pc, #32]	@ (80035dc <siprintf+0x38>)
 80035ba:	4909      	ldr	r1, [pc, #36]	@ (80035e0 <siprintf+0x3c>)
 80035bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80035c0:	9105      	str	r1, [sp, #20]
 80035c2:	6800      	ldr	r0, [r0, #0]
 80035c4:	a902      	add	r1, sp, #8
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	f002 fbb0 	bl	8005d2c <_svfiprintf_r>
 80035cc:	2200      	movs	r2, #0
 80035ce:	9b02      	ldr	r3, [sp, #8]
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	b01c      	add	sp, #112	@ 0x70
 80035d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80035d8:	b003      	add	sp, #12
 80035da:	4770      	bx	lr
 80035dc:	2000002c 	.word	0x2000002c
 80035e0:	ffff0208 	.word	0xffff0208

080035e4 <__sread>:
 80035e4:	b510      	push	{r4, lr}
 80035e6:	460c      	mov	r4, r1
 80035e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ec:	f000 f86c 	bl	80036c8 <_read_r>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	bfab      	itete	ge
 80035f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80035f6:	89a3      	ldrhlt	r3, [r4, #12]
 80035f8:	181b      	addge	r3, r3, r0
 80035fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80035fe:	bfac      	ite	ge
 8003600:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003602:	81a3      	strhlt	r3, [r4, #12]
 8003604:	bd10      	pop	{r4, pc}

08003606 <__swrite>:
 8003606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360a:	461f      	mov	r7, r3
 800360c:	898b      	ldrh	r3, [r1, #12]
 800360e:	4605      	mov	r5, r0
 8003610:	05db      	lsls	r3, r3, #23
 8003612:	460c      	mov	r4, r1
 8003614:	4616      	mov	r6, r2
 8003616:	d505      	bpl.n	8003624 <__swrite+0x1e>
 8003618:	2302      	movs	r3, #2
 800361a:	2200      	movs	r2, #0
 800361c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003620:	f000 f840 	bl	80036a4 <_lseek_r>
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	4632      	mov	r2, r6
 8003628:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800362c:	81a3      	strh	r3, [r4, #12]
 800362e:	4628      	mov	r0, r5
 8003630:	463b      	mov	r3, r7
 8003632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800363a:	f000 b857 	b.w	80036ec <_write_r>

0800363e <__sseek>:
 800363e:	b510      	push	{r4, lr}
 8003640:	460c      	mov	r4, r1
 8003642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003646:	f000 f82d 	bl	80036a4 <_lseek_r>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	bf15      	itete	ne
 8003650:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800365a:	81a3      	strheq	r3, [r4, #12]
 800365c:	bf18      	it	ne
 800365e:	81a3      	strhne	r3, [r4, #12]
 8003660:	bd10      	pop	{r4, pc}

08003662 <__sclose>:
 8003662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003666:	f000 b80d 	b.w	8003684 <_close_r>

0800366a <memset>:
 800366a:	4603      	mov	r3, r0
 800366c:	4402      	add	r2, r0
 800366e:	4293      	cmp	r3, r2
 8003670:	d100      	bne.n	8003674 <memset+0xa>
 8003672:	4770      	bx	lr
 8003674:	f803 1b01 	strb.w	r1, [r3], #1
 8003678:	e7f9      	b.n	800366e <memset+0x4>
	...

0800367c <_localeconv_r>:
 800367c:	4800      	ldr	r0, [pc, #0]	@ (8003680 <_localeconv_r+0x4>)
 800367e:	4770      	bx	lr
 8003680:	2000016c 	.word	0x2000016c

08003684 <_close_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	2300      	movs	r3, #0
 8003688:	4d05      	ldr	r5, [pc, #20]	@ (80036a0 <_close_r+0x1c>)
 800368a:	4604      	mov	r4, r0
 800368c:	4608      	mov	r0, r1
 800368e:	602b      	str	r3, [r5, #0]
 8003690:	f7fe f8cb 	bl	800182a <_close>
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	d102      	bne.n	800369e <_close_r+0x1a>
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	b103      	cbz	r3, 800369e <_close_r+0x1a>
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	bd38      	pop	{r3, r4, r5, pc}
 80036a0:	20000348 	.word	0x20000348

080036a4 <_lseek_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4604      	mov	r4, r0
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	2200      	movs	r2, #0
 80036ae:	4d05      	ldr	r5, [pc, #20]	@ (80036c4 <_lseek_r+0x20>)
 80036b0:	602a      	str	r2, [r5, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f7fe f8dd 	bl	8001872 <_lseek>
 80036b8:	1c43      	adds	r3, r0, #1
 80036ba:	d102      	bne.n	80036c2 <_lseek_r+0x1e>
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	b103      	cbz	r3, 80036c2 <_lseek_r+0x1e>
 80036c0:	6023      	str	r3, [r4, #0]
 80036c2:	bd38      	pop	{r3, r4, r5, pc}
 80036c4:	20000348 	.word	0x20000348

080036c8 <_read_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4604      	mov	r4, r0
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	2200      	movs	r2, #0
 80036d2:	4d05      	ldr	r5, [pc, #20]	@ (80036e8 <_read_r+0x20>)
 80036d4:	602a      	str	r2, [r5, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	f7fe f86e 	bl	80017b8 <_read>
 80036dc:	1c43      	adds	r3, r0, #1
 80036de:	d102      	bne.n	80036e6 <_read_r+0x1e>
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	b103      	cbz	r3, 80036e6 <_read_r+0x1e>
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	20000348 	.word	0x20000348

080036ec <_write_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4604      	mov	r4, r0
 80036f0:	4608      	mov	r0, r1
 80036f2:	4611      	mov	r1, r2
 80036f4:	2200      	movs	r2, #0
 80036f6:	4d05      	ldr	r5, [pc, #20]	@ (800370c <_write_r+0x20>)
 80036f8:	602a      	str	r2, [r5, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f7fe f879 	bl	80017f2 <_write>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d102      	bne.n	800370a <_write_r+0x1e>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	b103      	cbz	r3, 800370a <_write_r+0x1e>
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	20000348 	.word	0x20000348

08003710 <__errno>:
 8003710:	4b01      	ldr	r3, [pc, #4]	@ (8003718 <__errno+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2000002c 	.word	0x2000002c

0800371c <__libc_init_array>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	2600      	movs	r6, #0
 8003720:	4d0c      	ldr	r5, [pc, #48]	@ (8003754 <__libc_init_array+0x38>)
 8003722:	4c0d      	ldr	r4, [pc, #52]	@ (8003758 <__libc_init_array+0x3c>)
 8003724:	1b64      	subs	r4, r4, r5
 8003726:	10a4      	asrs	r4, r4, #2
 8003728:	42a6      	cmp	r6, r4
 800372a:	d109      	bne.n	8003740 <__libc_init_array+0x24>
 800372c:	f003 fb66 	bl	8006dfc <_init>
 8003730:	2600      	movs	r6, #0
 8003732:	4d0a      	ldr	r5, [pc, #40]	@ (800375c <__libc_init_array+0x40>)
 8003734:	4c0a      	ldr	r4, [pc, #40]	@ (8003760 <__libc_init_array+0x44>)
 8003736:	1b64      	subs	r4, r4, r5
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	42a6      	cmp	r6, r4
 800373c:	d105      	bne.n	800374a <__libc_init_array+0x2e>
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	f855 3b04 	ldr.w	r3, [r5], #4
 8003744:	4798      	blx	r3
 8003746:	3601      	adds	r6, #1
 8003748:	e7ee      	b.n	8003728 <__libc_init_array+0xc>
 800374a:	f855 3b04 	ldr.w	r3, [r5], #4
 800374e:	4798      	blx	r3
 8003750:	3601      	adds	r6, #1
 8003752:	e7f2      	b.n	800373a <__libc_init_array+0x1e>
 8003754:	08007278 	.word	0x08007278
 8003758:	08007278 	.word	0x08007278
 800375c:	08007278 	.word	0x08007278
 8003760:	0800727c 	.word	0x0800727c

08003764 <__retarget_lock_init_recursive>:
 8003764:	4770      	bx	lr

08003766 <__retarget_lock_acquire_recursive>:
 8003766:	4770      	bx	lr

08003768 <__retarget_lock_release_recursive>:
 8003768:	4770      	bx	lr

0800376a <memchr>:
 800376a:	4603      	mov	r3, r0
 800376c:	b510      	push	{r4, lr}
 800376e:	b2c9      	uxtb	r1, r1
 8003770:	4402      	add	r2, r0
 8003772:	4293      	cmp	r3, r2
 8003774:	4618      	mov	r0, r3
 8003776:	d101      	bne.n	800377c <memchr+0x12>
 8003778:	2000      	movs	r0, #0
 800377a:	e003      	b.n	8003784 <memchr+0x1a>
 800377c:	7804      	ldrb	r4, [r0, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	428c      	cmp	r4, r1
 8003782:	d1f6      	bne.n	8003772 <memchr+0x8>
 8003784:	bd10      	pop	{r4, pc}
	...

08003788 <nanf>:
 8003788:	4800      	ldr	r0, [pc, #0]	@ (800378c <nanf+0x4>)
 800378a:	4770      	bx	lr
 800378c:	7fc00000 	.word	0x7fc00000

08003790 <quorem>:
 8003790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003794:	6903      	ldr	r3, [r0, #16]
 8003796:	690c      	ldr	r4, [r1, #16]
 8003798:	4607      	mov	r7, r0
 800379a:	42a3      	cmp	r3, r4
 800379c:	db7e      	blt.n	800389c <quorem+0x10c>
 800379e:	3c01      	subs	r4, #1
 80037a0:	00a3      	lsls	r3, r4, #2
 80037a2:	f100 0514 	add.w	r5, r0, #20
 80037a6:	f101 0814 	add.w	r8, r1, #20
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80037b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037ba:	3301      	adds	r3, #1
 80037bc:	429a      	cmp	r2, r3
 80037be:	fbb2 f6f3 	udiv	r6, r2, r3
 80037c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80037c6:	d32e      	bcc.n	8003826 <quorem+0x96>
 80037c8:	f04f 0a00 	mov.w	sl, #0
 80037cc:	46c4      	mov	ip, r8
 80037ce:	46ae      	mov	lr, r5
 80037d0:	46d3      	mov	fp, sl
 80037d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80037d6:	b298      	uxth	r0, r3
 80037d8:	fb06 a000 	mla	r0, r6, r0, sl
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	0c02      	lsrs	r2, r0, #16
 80037e0:	fb06 2303 	mla	r3, r6, r3, r2
 80037e4:	f8de 2000 	ldr.w	r2, [lr]
 80037e8:	b280      	uxth	r0, r0
 80037ea:	b292      	uxth	r2, r2
 80037ec:	1a12      	subs	r2, r2, r0
 80037ee:	445a      	add	r2, fp
 80037f0:	f8de 0000 	ldr.w	r0, [lr]
 80037f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80037fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003802:	b292      	uxth	r2, r2
 8003804:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003808:	45e1      	cmp	r9, ip
 800380a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800380e:	f84e 2b04 	str.w	r2, [lr], #4
 8003812:	d2de      	bcs.n	80037d2 <quorem+0x42>
 8003814:	9b00      	ldr	r3, [sp, #0]
 8003816:	58eb      	ldr	r3, [r5, r3]
 8003818:	b92b      	cbnz	r3, 8003826 <quorem+0x96>
 800381a:	9b01      	ldr	r3, [sp, #4]
 800381c:	3b04      	subs	r3, #4
 800381e:	429d      	cmp	r5, r3
 8003820:	461a      	mov	r2, r3
 8003822:	d32f      	bcc.n	8003884 <quorem+0xf4>
 8003824:	613c      	str	r4, [r7, #16]
 8003826:	4638      	mov	r0, r7
 8003828:	f001 f9c2 	bl	8004bb0 <__mcmp>
 800382c:	2800      	cmp	r0, #0
 800382e:	db25      	blt.n	800387c <quorem+0xec>
 8003830:	4629      	mov	r1, r5
 8003832:	2000      	movs	r0, #0
 8003834:	f858 2b04 	ldr.w	r2, [r8], #4
 8003838:	f8d1 c000 	ldr.w	ip, [r1]
 800383c:	fa1f fe82 	uxth.w	lr, r2
 8003840:	fa1f f38c 	uxth.w	r3, ip
 8003844:	eba3 030e 	sub.w	r3, r3, lr
 8003848:	4403      	add	r3, r0
 800384a:	0c12      	lsrs	r2, r2, #16
 800384c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003850:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003854:	b29b      	uxth	r3, r3
 8003856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800385a:	45c1      	cmp	r9, r8
 800385c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003860:	f841 3b04 	str.w	r3, [r1], #4
 8003864:	d2e6      	bcs.n	8003834 <quorem+0xa4>
 8003866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800386a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800386e:	b922      	cbnz	r2, 800387a <quorem+0xea>
 8003870:	3b04      	subs	r3, #4
 8003872:	429d      	cmp	r5, r3
 8003874:	461a      	mov	r2, r3
 8003876:	d30b      	bcc.n	8003890 <quorem+0x100>
 8003878:	613c      	str	r4, [r7, #16]
 800387a:	3601      	adds	r6, #1
 800387c:	4630      	mov	r0, r6
 800387e:	b003      	add	sp, #12
 8003880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	3b04      	subs	r3, #4
 8003888:	2a00      	cmp	r2, #0
 800388a:	d1cb      	bne.n	8003824 <quorem+0x94>
 800388c:	3c01      	subs	r4, #1
 800388e:	e7c6      	b.n	800381e <quorem+0x8e>
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	3b04      	subs	r3, #4
 8003894:	2a00      	cmp	r2, #0
 8003896:	d1ef      	bne.n	8003878 <quorem+0xe8>
 8003898:	3c01      	subs	r4, #1
 800389a:	e7ea      	b.n	8003872 <quorem+0xe2>
 800389c:	2000      	movs	r0, #0
 800389e:	e7ee      	b.n	800387e <quorem+0xee>

080038a0 <_dtoa_r>:
 80038a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	69c7      	ldr	r7, [r0, #28]
 80038aa:	b097      	sub	sp, #92	@ 0x5c
 80038ac:	4683      	mov	fp, r0
 80038ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80038b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80038b4:	b97f      	cbnz	r7, 80038d6 <_dtoa_r+0x36>
 80038b6:	2010      	movs	r0, #16
 80038b8:	f000 fe02 	bl	80044c0 <malloc>
 80038bc:	4602      	mov	r2, r0
 80038be:	f8cb 001c 	str.w	r0, [fp, #28]
 80038c2:	b920      	cbnz	r0, 80038ce <_dtoa_r+0x2e>
 80038c4:	21ef      	movs	r1, #239	@ 0xef
 80038c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003b68 <_dtoa_r+0x2c8>)
 80038c8:	48a8      	ldr	r0, [pc, #672]	@ (8003b6c <_dtoa_r+0x2cc>)
 80038ca:	f002 fc23 	bl	8006114 <__assert_func>
 80038ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80038d2:	6007      	str	r7, [r0, #0]
 80038d4:	60c7      	str	r7, [r0, #12]
 80038d6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	b159      	cbz	r1, 80038f6 <_dtoa_r+0x56>
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	2301      	movs	r3, #1
 80038e2:	4093      	lsls	r3, r2
 80038e4:	604a      	str	r2, [r1, #4]
 80038e6:	608b      	str	r3, [r1, #8]
 80038e8:	4658      	mov	r0, fp
 80038ea:	f000 fedf 	bl	80046ac <_Bfree>
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	1e2b      	subs	r3, r5, #0
 80038f8:	bfaf      	iteee	ge
 80038fa:	2300      	movge	r3, #0
 80038fc:	2201      	movlt	r2, #1
 80038fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003902:	9303      	strlt	r3, [sp, #12]
 8003904:	bfa8      	it	ge
 8003906:	6033      	strge	r3, [r6, #0]
 8003908:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800390c:	4b98      	ldr	r3, [pc, #608]	@ (8003b70 <_dtoa_r+0x2d0>)
 800390e:	bfb8      	it	lt
 8003910:	6032      	strlt	r2, [r6, #0]
 8003912:	ea33 0308 	bics.w	r3, r3, r8
 8003916:	d112      	bne.n	800393e <_dtoa_r+0x9e>
 8003918:	f242 730f 	movw	r3, #9999	@ 0x270f
 800391c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003924:	4323      	orrs	r3, r4
 8003926:	f000 8550 	beq.w	80043ca <_dtoa_r+0xb2a>
 800392a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800392c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003b74 <_dtoa_r+0x2d4>
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8552 	beq.w	80043da <_dtoa_r+0xb3a>
 8003936:	f10a 0303 	add.w	r3, sl, #3
 800393a:	f000 bd4c 	b.w	80043d6 <_dtoa_r+0xb36>
 800393e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003942:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800394a:	2200      	movs	r2, #0
 800394c:	2300      	movs	r3, #0
 800394e:	f7fd f82b 	bl	80009a8 <__aeabi_dcmpeq>
 8003952:	4607      	mov	r7, r0
 8003954:	b158      	cbz	r0, 800396e <_dtoa_r+0xce>
 8003956:	2301      	movs	r3, #1
 8003958:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800395e:	b113      	cbz	r3, 8003966 <_dtoa_r+0xc6>
 8003960:	4b85      	ldr	r3, [pc, #532]	@ (8003b78 <_dtoa_r+0x2d8>)
 8003962:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003b7c <_dtoa_r+0x2dc>
 800396a:	f000 bd36 	b.w	80043da <_dtoa_r+0xb3a>
 800396e:	ab14      	add	r3, sp, #80	@ 0x50
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	ab15      	add	r3, sp, #84	@ 0x54
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	4658      	mov	r0, fp
 8003978:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800397c:	f001 fa30 	bl	8004de0 <__d2b>
 8003980:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003984:	4681      	mov	r9, r0
 8003986:	2e00      	cmp	r6, #0
 8003988:	d077      	beq.n	8003a7a <_dtoa_r+0x1da>
 800398a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800398e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003990:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003998:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800399c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80039a0:	9712      	str	r7, [sp, #72]	@ 0x48
 80039a2:	4619      	mov	r1, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	4b76      	ldr	r3, [pc, #472]	@ (8003b80 <_dtoa_r+0x2e0>)
 80039a8:	f7fc fbde 	bl	8000168 <__aeabi_dsub>
 80039ac:	a368      	add	r3, pc, #416	@ (adr r3, 8003b50 <_dtoa_r+0x2b0>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f7fc fd91 	bl	80004d8 <__aeabi_dmul>
 80039b6:	a368      	add	r3, pc, #416	@ (adr r3, 8003b58 <_dtoa_r+0x2b8>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fbd6 	bl	800016c <__adddf3>
 80039c0:	4604      	mov	r4, r0
 80039c2:	4630      	mov	r0, r6
 80039c4:	460d      	mov	r5, r1
 80039c6:	f7fc fd1d 	bl	8000404 <__aeabi_i2d>
 80039ca:	a365      	add	r3, pc, #404	@ (adr r3, 8003b60 <_dtoa_r+0x2c0>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fd82 	bl	80004d8 <__aeabi_dmul>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4620      	mov	r0, r4
 80039da:	4629      	mov	r1, r5
 80039dc:	f7fc fbc6 	bl	800016c <__adddf3>
 80039e0:	4604      	mov	r4, r0
 80039e2:	460d      	mov	r5, r1
 80039e4:	f7fd f828 	bl	8000a38 <__aeabi_d2iz>
 80039e8:	2200      	movs	r2, #0
 80039ea:	4607      	mov	r7, r0
 80039ec:	2300      	movs	r3, #0
 80039ee:	4620      	mov	r0, r4
 80039f0:	4629      	mov	r1, r5
 80039f2:	f7fc ffe3 	bl	80009bc <__aeabi_dcmplt>
 80039f6:	b140      	cbz	r0, 8003a0a <_dtoa_r+0x16a>
 80039f8:	4638      	mov	r0, r7
 80039fa:	f7fc fd03 	bl	8000404 <__aeabi_i2d>
 80039fe:	4622      	mov	r2, r4
 8003a00:	462b      	mov	r3, r5
 8003a02:	f7fc ffd1 	bl	80009a8 <__aeabi_dcmpeq>
 8003a06:	b900      	cbnz	r0, 8003a0a <_dtoa_r+0x16a>
 8003a08:	3f01      	subs	r7, #1
 8003a0a:	2f16      	cmp	r7, #22
 8003a0c:	d853      	bhi.n	8003ab6 <_dtoa_r+0x216>
 8003a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a12:	4b5c      	ldr	r3, [pc, #368]	@ (8003b84 <_dtoa_r+0x2e4>)
 8003a14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fc ffce 	bl	80009bc <__aeabi_dcmplt>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d04a      	beq.n	8003aba <_dtoa_r+0x21a>
 8003a24:	2300      	movs	r3, #0
 8003a26:	3f01      	subs	r7, #1
 8003a28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003a2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a2c:	1b9b      	subs	r3, r3, r6
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	bf46      	itte	mi
 8003a32:	f1c3 0801 	rsbmi	r8, r3, #1
 8003a36:	2300      	movmi	r3, #0
 8003a38:	f04f 0800 	movpl.w	r8, #0
 8003a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a3e:	bf48      	it	mi
 8003a40:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003a42:	2f00      	cmp	r7, #0
 8003a44:	db3b      	blt.n	8003abe <_dtoa_r+0x21e>
 8003a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a48:	970e      	str	r7, [sp, #56]	@ 0x38
 8003a4a:	443b      	add	r3, r7
 8003a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a4e:	2300      	movs	r3, #0
 8003a50:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	d866      	bhi.n	8003b26 <_dtoa_r+0x286>
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	bfc4      	itt	gt
 8003a5c:	3b04      	subgt	r3, #4
 8003a5e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003a60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a62:	bfc8      	it	gt
 8003a64:	2400      	movgt	r4, #0
 8003a66:	f1a3 0302 	sub.w	r3, r3, #2
 8003a6a:	bfd8      	it	le
 8003a6c:	2401      	movle	r4, #1
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d864      	bhi.n	8003b3c <_dtoa_r+0x29c>
 8003a72:	e8df f003 	tbb	[pc, r3]
 8003a76:	382b      	.short	0x382b
 8003a78:	5636      	.short	0x5636
 8003a7a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003a7e:	441e      	add	r6, r3
 8003a80:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	bfc1      	itttt	gt
 8003a88:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003a8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003a90:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003a94:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003a98:	bfd6      	itet	le
 8003a9a:	f1c3 0320 	rsble	r3, r3, #32
 8003a9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003aa2:	fa04 f003 	lslle.w	r0, r4, r3
 8003aa6:	f7fc fc9d 	bl	80003e4 <__aeabi_ui2d>
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003ab0:	3e01      	subs	r6, #1
 8003ab2:	9212      	str	r2, [sp, #72]	@ 0x48
 8003ab4:	e775      	b.n	80039a2 <_dtoa_r+0x102>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e7b6      	b.n	8003a28 <_dtoa_r+0x188>
 8003aba:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003abc:	e7b5      	b.n	8003a2a <_dtoa_r+0x18a>
 8003abe:	427b      	negs	r3, r7
 8003ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	eba8 0807 	sub.w	r8, r8, r7
 8003ac8:	930e      	str	r3, [sp, #56]	@ 0x38
 8003aca:	e7c2      	b.n	8003a52 <_dtoa_r+0x1b2>
 8003acc:	2300      	movs	r3, #0
 8003ace:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ad0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	dc35      	bgt.n	8003b42 <_dtoa_r+0x2a2>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	461a      	mov	r2, r3
 8003ada:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ade:	9221      	str	r2, [sp, #132]	@ 0x84
 8003ae0:	e00b      	b.n	8003afa <_dtoa_r+0x25a>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e7f3      	b.n	8003ace <_dtoa_r+0x22e>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003aea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	9308      	str	r3, [sp, #32]
 8003af0:	3301      	adds	r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	9307      	str	r3, [sp, #28]
 8003af6:	bfb8      	it	lt
 8003af8:	2301      	movlt	r3, #1
 8003afa:	2100      	movs	r1, #0
 8003afc:	2204      	movs	r2, #4
 8003afe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003b02:	f102 0514 	add.w	r5, r2, #20
 8003b06:	429d      	cmp	r5, r3
 8003b08:	d91f      	bls.n	8003b4a <_dtoa_r+0x2aa>
 8003b0a:	6041      	str	r1, [r0, #4]
 8003b0c:	4658      	mov	r0, fp
 8003b0e:	f000 fd8d 	bl	800462c <_Balloc>
 8003b12:	4682      	mov	sl, r0
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d139      	bne.n	8003b8c <_dtoa_r+0x2ec>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b88 <_dtoa_r+0x2e8>)
 8003b20:	e6d2      	b.n	80038c8 <_dtoa_r+0x28>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e7e0      	b.n	8003ae8 <_dtoa_r+0x248>
 8003b26:	2401      	movs	r4, #1
 8003b28:	2300      	movs	r3, #0
 8003b2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	2200      	movs	r2, #0
 8003b34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003b38:	2312      	movs	r3, #18
 8003b3a:	e7d0      	b.n	8003ade <_dtoa_r+0x23e>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b40:	e7f5      	b.n	8003b2e <_dtoa_r+0x28e>
 8003b42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003b44:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003b48:	e7d7      	b.n	8003afa <_dtoa_r+0x25a>
 8003b4a:	3101      	adds	r1, #1
 8003b4c:	0052      	lsls	r2, r2, #1
 8003b4e:	e7d8      	b.n	8003b02 <_dtoa_r+0x262>
 8003b50:	636f4361 	.word	0x636f4361
 8003b54:	3fd287a7 	.word	0x3fd287a7
 8003b58:	8b60c8b3 	.word	0x8b60c8b3
 8003b5c:	3fc68a28 	.word	0x3fc68a28
 8003b60:	509f79fb 	.word	0x509f79fb
 8003b64:	3fd34413 	.word	0x3fd34413
 8003b68:	08006e88 	.word	0x08006e88
 8003b6c:	08006e9f 	.word	0x08006e9f
 8003b70:	7ff00000 	.word	0x7ff00000
 8003b74:	08006e84 	.word	0x08006e84
 8003b78:	08006e53 	.word	0x08006e53
 8003b7c:	08006e52 	.word	0x08006e52
 8003b80:	3ff80000 	.word	0x3ff80000
 8003b84:	08006f98 	.word	0x08006f98
 8003b88:	08006ef7 	.word	0x08006ef7
 8003b8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b90:	6018      	str	r0, [r3, #0]
 8003b92:	9b07      	ldr	r3, [sp, #28]
 8003b94:	2b0e      	cmp	r3, #14
 8003b96:	f200 80a4 	bhi.w	8003ce2 <_dtoa_r+0x442>
 8003b9a:	2c00      	cmp	r4, #0
 8003b9c:	f000 80a1 	beq.w	8003ce2 <_dtoa_r+0x442>
 8003ba0:	2f00      	cmp	r7, #0
 8003ba2:	dd33      	ble.n	8003c0c <_dtoa_r+0x36c>
 8003ba4:	4b86      	ldr	r3, [pc, #536]	@ (8003dc0 <_dtoa_r+0x520>)
 8003ba6:	f007 020f 	and.w	r2, r7, #15
 8003baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bae:	05f8      	lsls	r0, r7, #23
 8003bb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bb4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003bb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003bbc:	d516      	bpl.n	8003bec <_dtoa_r+0x34c>
 8003bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bc2:	4b80      	ldr	r3, [pc, #512]	@ (8003dc4 <_dtoa_r+0x524>)
 8003bc4:	2603      	movs	r6, #3
 8003bc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003bca:	f7fc fdaf 	bl	800072c <__aeabi_ddiv>
 8003bce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bd2:	f004 040f 	and.w	r4, r4, #15
 8003bd6:	4d7b      	ldr	r5, [pc, #492]	@ (8003dc4 <_dtoa_r+0x524>)
 8003bd8:	b954      	cbnz	r4, 8003bf0 <_dtoa_r+0x350>
 8003bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003be2:	f7fc fda3 	bl	800072c <__aeabi_ddiv>
 8003be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bea:	e028      	b.n	8003c3e <_dtoa_r+0x39e>
 8003bec:	2602      	movs	r6, #2
 8003bee:	e7f2      	b.n	8003bd6 <_dtoa_r+0x336>
 8003bf0:	07e1      	lsls	r1, r4, #31
 8003bf2:	d508      	bpl.n	8003c06 <_dtoa_r+0x366>
 8003bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003bfc:	f7fc fc6c 	bl	80004d8 <__aeabi_dmul>
 8003c00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c04:	3601      	adds	r6, #1
 8003c06:	1064      	asrs	r4, r4, #1
 8003c08:	3508      	adds	r5, #8
 8003c0a:	e7e5      	b.n	8003bd8 <_dtoa_r+0x338>
 8003c0c:	f000 80d2 	beq.w	8003db4 <_dtoa_r+0x514>
 8003c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c14:	427c      	negs	r4, r7
 8003c16:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc0 <_dtoa_r+0x520>)
 8003c18:	f004 020f 	and.w	r2, r4, #15
 8003c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fc58 	bl	80004d8 <__aeabi_dmul>
 8003c28:	2602      	movs	r6, #2
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c30:	4d64      	ldr	r5, [pc, #400]	@ (8003dc4 <_dtoa_r+0x524>)
 8003c32:	1124      	asrs	r4, r4, #4
 8003c34:	2c00      	cmp	r4, #0
 8003c36:	f040 80b2 	bne.w	8003d9e <_dtoa_r+0x4fe>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d3      	bne.n	8003be6 <_dtoa_r+0x346>
 8003c3e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80b7 	beq.w	8003db8 <_dtoa_r+0x518>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc8 <_dtoa_r+0x528>)
 8003c52:	f7fc feb3 	bl	80009bc <__aeabi_dcmplt>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	f000 80ae 	beq.w	8003db8 <_dtoa_r+0x518>
 8003c5c:	9b07      	ldr	r3, [sp, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80aa 	beq.w	8003db8 <_dtoa_r+0x518>
 8003c64:	9b08      	ldr	r3, [sp, #32]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	dd37      	ble.n	8003cda <_dtoa_r+0x43a>
 8003c6a:	1e7b      	subs	r3, r7, #1
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	9304      	str	r3, [sp, #16]
 8003c70:	2200      	movs	r2, #0
 8003c72:	4629      	mov	r1, r5
 8003c74:	4b55      	ldr	r3, [pc, #340]	@ (8003dcc <_dtoa_r+0x52c>)
 8003c76:	f7fc fc2f 	bl	80004d8 <__aeabi_dmul>
 8003c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c7e:	9c08      	ldr	r4, [sp, #32]
 8003c80:	3601      	adds	r6, #1
 8003c82:	4630      	mov	r0, r6
 8003c84:	f7fc fbbe 	bl	8000404 <__aeabi_i2d>
 8003c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c8c:	f7fc fc24 	bl	80004d8 <__aeabi_dmul>
 8003c90:	2200      	movs	r2, #0
 8003c92:	4b4f      	ldr	r3, [pc, #316]	@ (8003dd0 <_dtoa_r+0x530>)
 8003c94:	f7fc fa6a 	bl	800016c <__adddf3>
 8003c98:	4605      	mov	r5, r0
 8003c9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003c9e:	2c00      	cmp	r4, #0
 8003ca0:	f040 809a 	bne.w	8003dd8 <_dtoa_r+0x538>
 8003ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd4 <_dtoa_r+0x534>)
 8003cac:	f7fc fa5c 	bl	8000168 <__aeabi_dsub>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cb8:	462a      	mov	r2, r5
 8003cba:	4633      	mov	r3, r6
 8003cbc:	f7fc fe9c 	bl	80009f8 <__aeabi_dcmpgt>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	f040 828e 	bne.w	80041e2 <_dtoa_r+0x942>
 8003cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cca:	462a      	mov	r2, r5
 8003ccc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003cd0:	f7fc fe74 	bl	80009bc <__aeabi_dcmplt>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	f040 8127 	bne.w	8003f28 <_dtoa_r+0x688>
 8003cda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003cde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003ce2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f2c0 8163 	blt.w	8003fb0 <_dtoa_r+0x710>
 8003cea:	2f0e      	cmp	r7, #14
 8003cec:	f300 8160 	bgt.w	8003fb0 <_dtoa_r+0x710>
 8003cf0:	4b33      	ldr	r3, [pc, #204]	@ (8003dc0 <_dtoa_r+0x520>)
 8003cf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003cf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cfa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003cfe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	da03      	bge.n	8003d0c <_dtoa_r+0x46c>
 8003d04:	9b07      	ldr	r3, [sp, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f340 8100 	ble.w	8003f0c <_dtoa_r+0x66c>
 8003d0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003d10:	4656      	mov	r6, sl
 8003d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d16:	4620      	mov	r0, r4
 8003d18:	4629      	mov	r1, r5
 8003d1a:	f7fc fd07 	bl	800072c <__aeabi_ddiv>
 8003d1e:	f7fc fe8b 	bl	8000a38 <__aeabi_d2iz>
 8003d22:	4680      	mov	r8, r0
 8003d24:	f7fc fb6e 	bl	8000404 <__aeabi_i2d>
 8003d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d2c:	f7fc fbd4 	bl	80004d8 <__aeabi_dmul>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4620      	mov	r0, r4
 8003d36:	4629      	mov	r1, r5
 8003d38:	f7fc fa16 	bl	8000168 <__aeabi_dsub>
 8003d3c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003d40:	9d07      	ldr	r5, [sp, #28]
 8003d42:	f806 4b01 	strb.w	r4, [r6], #1
 8003d46:	eba6 040a 	sub.w	r4, r6, sl
 8003d4a:	42a5      	cmp	r5, r4
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	f040 8116 	bne.w	8003f80 <_dtoa_r+0x6e0>
 8003d54:	f7fc fa0a 	bl	800016c <__adddf3>
 8003d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	460d      	mov	r5, r1
 8003d60:	f7fc fe4a 	bl	80009f8 <__aeabi_dcmpgt>
 8003d64:	2800      	cmp	r0, #0
 8003d66:	f040 80f8 	bne.w	8003f5a <_dtoa_r+0x6ba>
 8003d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d6e:	4620      	mov	r0, r4
 8003d70:	4629      	mov	r1, r5
 8003d72:	f7fc fe19 	bl	80009a8 <__aeabi_dcmpeq>
 8003d76:	b118      	cbz	r0, 8003d80 <_dtoa_r+0x4e0>
 8003d78:	f018 0f01 	tst.w	r8, #1
 8003d7c:	f040 80ed 	bne.w	8003f5a <_dtoa_r+0x6ba>
 8003d80:	4649      	mov	r1, r9
 8003d82:	4658      	mov	r0, fp
 8003d84:	f000 fc92 	bl	80046ac <_Bfree>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	7033      	strb	r3, [r6, #0]
 8003d8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003d8e:	3701      	adds	r7, #1
 8003d90:	601f      	str	r7, [r3, #0]
 8003d92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8320 	beq.w	80043da <_dtoa_r+0xb3a>
 8003d9a:	601e      	str	r6, [r3, #0]
 8003d9c:	e31d      	b.n	80043da <_dtoa_r+0xb3a>
 8003d9e:	07e2      	lsls	r2, r4, #31
 8003da0:	d505      	bpl.n	8003dae <_dtoa_r+0x50e>
 8003da2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003da6:	f7fc fb97 	bl	80004d8 <__aeabi_dmul>
 8003daa:	2301      	movs	r3, #1
 8003dac:	3601      	adds	r6, #1
 8003dae:	1064      	asrs	r4, r4, #1
 8003db0:	3508      	adds	r5, #8
 8003db2:	e73f      	b.n	8003c34 <_dtoa_r+0x394>
 8003db4:	2602      	movs	r6, #2
 8003db6:	e742      	b.n	8003c3e <_dtoa_r+0x39e>
 8003db8:	9c07      	ldr	r4, [sp, #28]
 8003dba:	9704      	str	r7, [sp, #16]
 8003dbc:	e761      	b.n	8003c82 <_dtoa_r+0x3e2>
 8003dbe:	bf00      	nop
 8003dc0:	08006f98 	.word	0x08006f98
 8003dc4:	08006f70 	.word	0x08006f70
 8003dc8:	3ff00000 	.word	0x3ff00000
 8003dcc:	40240000 	.word	0x40240000
 8003dd0:	401c0000 	.word	0x401c0000
 8003dd4:	40140000 	.word	0x40140000
 8003dd8:	4b70      	ldr	r3, [pc, #448]	@ (8003f9c <_dtoa_r+0x6fc>)
 8003dda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003ddc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003de0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003de4:	4454      	add	r4, sl
 8003de6:	2900      	cmp	r1, #0
 8003de8:	d045      	beq.n	8003e76 <_dtoa_r+0x5d6>
 8003dea:	2000      	movs	r0, #0
 8003dec:	496c      	ldr	r1, [pc, #432]	@ (8003fa0 <_dtoa_r+0x700>)
 8003dee:	f7fc fc9d 	bl	800072c <__aeabi_ddiv>
 8003df2:	4633      	mov	r3, r6
 8003df4:	462a      	mov	r2, r5
 8003df6:	f7fc f9b7 	bl	8000168 <__aeabi_dsub>
 8003dfa:	4656      	mov	r6, sl
 8003dfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e04:	f7fc fe18 	bl	8000a38 <__aeabi_d2iz>
 8003e08:	4605      	mov	r5, r0
 8003e0a:	f7fc fafb 	bl	8000404 <__aeabi_i2d>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e16:	f7fc f9a7 	bl	8000168 <__aeabi_dsub>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	3530      	adds	r5, #48	@ 0x30
 8003e20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e28:	f806 5b01 	strb.w	r5, [r6], #1
 8003e2c:	f7fc fdc6 	bl	80009bc <__aeabi_dcmplt>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d163      	bne.n	8003efc <_dtoa_r+0x65c>
 8003e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e38:	2000      	movs	r0, #0
 8003e3a:	495a      	ldr	r1, [pc, #360]	@ (8003fa4 <_dtoa_r+0x704>)
 8003e3c:	f7fc f994 	bl	8000168 <__aeabi_dsub>
 8003e40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e44:	f7fc fdba 	bl	80009bc <__aeabi_dcmplt>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f040 8087 	bne.w	8003f5c <_dtoa_r+0x6bc>
 8003e4e:	42a6      	cmp	r6, r4
 8003e50:	f43f af43 	beq.w	8003cda <_dtoa_r+0x43a>
 8003e54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4b53      	ldr	r3, [pc, #332]	@ (8003fa8 <_dtoa_r+0x708>)
 8003e5c:	f7fc fb3c 	bl	80004d8 <__aeabi_dmul>
 8003e60:	2200      	movs	r2, #0
 8003e62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa8 <_dtoa_r+0x708>)
 8003e6c:	f7fc fb34 	bl	80004d8 <__aeabi_dmul>
 8003e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e74:	e7c4      	b.n	8003e00 <_dtoa_r+0x560>
 8003e76:	4631      	mov	r1, r6
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f7fc fb2d 	bl	80004d8 <__aeabi_dmul>
 8003e7e:	4656      	mov	r6, sl
 8003e80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e84:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e8a:	f7fc fdd5 	bl	8000a38 <__aeabi_d2iz>
 8003e8e:	4605      	mov	r5, r0
 8003e90:	f7fc fab8 	bl	8000404 <__aeabi_i2d>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e9c:	f7fc f964 	bl	8000168 <__aeabi_dsub>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	3530      	adds	r5, #48	@ 0x30
 8003ea6:	f806 5b01 	strb.w	r5, [r6], #1
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	d124      	bne.n	8003f00 <_dtoa_r+0x660>
 8003eb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003eba:	4b39      	ldr	r3, [pc, #228]	@ (8003fa0 <_dtoa_r+0x700>)
 8003ebc:	f7fc f956 	bl	800016c <__adddf3>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ec8:	f7fc fd96 	bl	80009f8 <__aeabi_dcmpgt>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d145      	bne.n	8003f5c <_dtoa_r+0x6bc>
 8003ed0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	4932      	ldr	r1, [pc, #200]	@ (8003fa0 <_dtoa_r+0x700>)
 8003ed8:	f7fc f946 	bl	8000168 <__aeabi_dsub>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ee4:	f7fc fd6a 	bl	80009bc <__aeabi_dcmplt>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	f43f aef6 	beq.w	8003cda <_dtoa_r+0x43a>
 8003eee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003ef0:	1e73      	subs	r3, r6, #1
 8003ef2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003ef4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003ef8:	2b30      	cmp	r3, #48	@ 0x30
 8003efa:	d0f8      	beq.n	8003eee <_dtoa_r+0x64e>
 8003efc:	9f04      	ldr	r7, [sp, #16]
 8003efe:	e73f      	b.n	8003d80 <_dtoa_r+0x4e0>
 8003f00:	4b29      	ldr	r3, [pc, #164]	@ (8003fa8 <_dtoa_r+0x708>)
 8003f02:	f7fc fae9 	bl	80004d8 <__aeabi_dmul>
 8003f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f0a:	e7bc      	b.n	8003e86 <_dtoa_r+0x5e6>
 8003f0c:	d10c      	bne.n	8003f28 <_dtoa_r+0x688>
 8003f0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f12:	2200      	movs	r2, #0
 8003f14:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <_dtoa_r+0x70c>)
 8003f16:	f7fc fadf 	bl	80004d8 <__aeabi_dmul>
 8003f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f1e:	f7fc fd61 	bl	80009e4 <__aeabi_dcmpge>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f000 815b 	beq.w	80041de <_dtoa_r+0x93e>
 8003f28:	2400      	movs	r4, #0
 8003f2a:	4625      	mov	r5, r4
 8003f2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f2e:	4656      	mov	r6, sl
 8003f30:	43db      	mvns	r3, r3
 8003f32:	9304      	str	r3, [sp, #16]
 8003f34:	2700      	movs	r7, #0
 8003f36:	4621      	mov	r1, r4
 8003f38:	4658      	mov	r0, fp
 8003f3a:	f000 fbb7 	bl	80046ac <_Bfree>
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	d0dc      	beq.n	8003efc <_dtoa_r+0x65c>
 8003f42:	b12f      	cbz	r7, 8003f50 <_dtoa_r+0x6b0>
 8003f44:	42af      	cmp	r7, r5
 8003f46:	d003      	beq.n	8003f50 <_dtoa_r+0x6b0>
 8003f48:	4639      	mov	r1, r7
 8003f4a:	4658      	mov	r0, fp
 8003f4c:	f000 fbae 	bl	80046ac <_Bfree>
 8003f50:	4629      	mov	r1, r5
 8003f52:	4658      	mov	r0, fp
 8003f54:	f000 fbaa 	bl	80046ac <_Bfree>
 8003f58:	e7d0      	b.n	8003efc <_dtoa_r+0x65c>
 8003f5a:	9704      	str	r7, [sp, #16]
 8003f5c:	4633      	mov	r3, r6
 8003f5e:	461e      	mov	r6, r3
 8003f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f64:	2a39      	cmp	r2, #57	@ 0x39
 8003f66:	d107      	bne.n	8003f78 <_dtoa_r+0x6d8>
 8003f68:	459a      	cmp	sl, r3
 8003f6a:	d1f8      	bne.n	8003f5e <_dtoa_r+0x6be>
 8003f6c:	9a04      	ldr	r2, [sp, #16]
 8003f6e:	3201      	adds	r2, #1
 8003f70:	9204      	str	r2, [sp, #16]
 8003f72:	2230      	movs	r2, #48	@ 0x30
 8003f74:	f88a 2000 	strb.w	r2, [sl]
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	3201      	adds	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e7bd      	b.n	8003efc <_dtoa_r+0x65c>
 8003f80:	2200      	movs	r2, #0
 8003f82:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <_dtoa_r+0x708>)
 8003f84:	f7fc faa8 	bl	80004d8 <__aeabi_dmul>
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	460d      	mov	r5, r1
 8003f90:	f7fc fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	f43f aebc 	beq.w	8003d12 <_dtoa_r+0x472>
 8003f9a:	e6f1      	b.n	8003d80 <_dtoa_r+0x4e0>
 8003f9c:	08006f98 	.word	0x08006f98
 8003fa0:	3fe00000 	.word	0x3fe00000
 8003fa4:	3ff00000 	.word	0x3ff00000
 8003fa8:	40240000 	.word	0x40240000
 8003fac:	40140000 	.word	0x40140000
 8003fb0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003fb2:	2a00      	cmp	r2, #0
 8003fb4:	f000 80db 	beq.w	800416e <_dtoa_r+0x8ce>
 8003fb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003fba:	2a01      	cmp	r2, #1
 8003fbc:	f300 80bf 	bgt.w	800413e <_dtoa_r+0x89e>
 8003fc0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	f000 80b7 	beq.w	8004136 <_dtoa_r+0x896>
 8003fc8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003fcc:	4646      	mov	r6, r8
 8003fce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003fd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	441a      	add	r2, r3
 8003fd6:	4658      	mov	r0, fp
 8003fd8:	4498      	add	r8, r3
 8003fda:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fdc:	f000 fc64 	bl	80048a8 <__i2b>
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	b15e      	cbz	r6, 8003ffc <_dtoa_r+0x75c>
 8003fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	dd08      	ble.n	8003ffc <_dtoa_r+0x75c>
 8003fea:	42b3      	cmp	r3, r6
 8003fec:	bfa8      	it	ge
 8003fee:	4633      	movge	r3, r6
 8003ff0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ff2:	eba8 0803 	sub.w	r8, r8, r3
 8003ff6:	1af6      	subs	r6, r6, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ffe:	b1f3      	cbz	r3, 800403e <_dtoa_r+0x79e>
 8004000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80b7 	beq.w	8004176 <_dtoa_r+0x8d6>
 8004008:	b18c      	cbz	r4, 800402e <_dtoa_r+0x78e>
 800400a:	4629      	mov	r1, r5
 800400c:	4622      	mov	r2, r4
 800400e:	4658      	mov	r0, fp
 8004010:	f000 fd08 	bl	8004a24 <__pow5mult>
 8004014:	464a      	mov	r2, r9
 8004016:	4601      	mov	r1, r0
 8004018:	4605      	mov	r5, r0
 800401a:	4658      	mov	r0, fp
 800401c:	f000 fc5a 	bl	80048d4 <__multiply>
 8004020:	4649      	mov	r1, r9
 8004022:	9004      	str	r0, [sp, #16]
 8004024:	4658      	mov	r0, fp
 8004026:	f000 fb41 	bl	80046ac <_Bfree>
 800402a:	9b04      	ldr	r3, [sp, #16]
 800402c:	4699      	mov	r9, r3
 800402e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004030:	1b1a      	subs	r2, r3, r4
 8004032:	d004      	beq.n	800403e <_dtoa_r+0x79e>
 8004034:	4649      	mov	r1, r9
 8004036:	4658      	mov	r0, fp
 8004038:	f000 fcf4 	bl	8004a24 <__pow5mult>
 800403c:	4681      	mov	r9, r0
 800403e:	2101      	movs	r1, #1
 8004040:	4658      	mov	r0, fp
 8004042:	f000 fc31 	bl	80048a8 <__i2b>
 8004046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004048:	4604      	mov	r4, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 81c9 	beq.w	80043e2 <_dtoa_r+0xb42>
 8004050:	461a      	mov	r2, r3
 8004052:	4601      	mov	r1, r0
 8004054:	4658      	mov	r0, fp
 8004056:	f000 fce5 	bl	8004a24 <__pow5mult>
 800405a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800405c:	4604      	mov	r4, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	f300 808f 	bgt.w	8004182 <_dtoa_r+0x8e2>
 8004064:	9b02      	ldr	r3, [sp, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f040 8087 	bne.w	800417a <_dtoa_r+0x8da>
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 8083 	bne.w	800417e <_dtoa_r+0x8de>
 8004078:	9b03      	ldr	r3, [sp, #12]
 800407a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800407e:	0d1b      	lsrs	r3, r3, #20
 8004080:	051b      	lsls	r3, r3, #20
 8004082:	b12b      	cbz	r3, 8004090 <_dtoa_r+0x7f0>
 8004084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004086:	f108 0801 	add.w	r8, r8, #1
 800408a:	3301      	adds	r3, #1
 800408c:	9309      	str	r3, [sp, #36]	@ 0x24
 800408e:	2301      	movs	r3, #1
 8004090:	930a      	str	r3, [sp, #40]	@ 0x28
 8004092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 81aa 	beq.w	80043ee <_dtoa_r+0xb4e>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80040a0:	6918      	ldr	r0, [r3, #16]
 80040a2:	f000 fbb5 	bl	8004810 <__hi0bits>
 80040a6:	f1c0 0020 	rsb	r0, r0, #32
 80040aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040ac:	4418      	add	r0, r3
 80040ae:	f010 001f 	ands.w	r0, r0, #31
 80040b2:	d071      	beq.n	8004198 <_dtoa_r+0x8f8>
 80040b4:	f1c0 0320 	rsb	r3, r0, #32
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	dd65      	ble.n	8004188 <_dtoa_r+0x8e8>
 80040bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040be:	f1c0 001c 	rsb	r0, r0, #28
 80040c2:	4403      	add	r3, r0
 80040c4:	4480      	add	r8, r0
 80040c6:	4406      	add	r6, r0
 80040c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ca:	f1b8 0f00 	cmp.w	r8, #0
 80040ce:	dd05      	ble.n	80040dc <_dtoa_r+0x83c>
 80040d0:	4649      	mov	r1, r9
 80040d2:	4642      	mov	r2, r8
 80040d4:	4658      	mov	r0, fp
 80040d6:	f000 fcff 	bl	8004ad8 <__lshift>
 80040da:	4681      	mov	r9, r0
 80040dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	dd05      	ble.n	80040ee <_dtoa_r+0x84e>
 80040e2:	4621      	mov	r1, r4
 80040e4:	461a      	mov	r2, r3
 80040e6:	4658      	mov	r0, fp
 80040e8:	f000 fcf6 	bl	8004ad8 <__lshift>
 80040ec:	4604      	mov	r4, r0
 80040ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d053      	beq.n	800419c <_dtoa_r+0x8fc>
 80040f4:	4621      	mov	r1, r4
 80040f6:	4648      	mov	r0, r9
 80040f8:	f000 fd5a 	bl	8004bb0 <__mcmp>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	da4d      	bge.n	800419c <_dtoa_r+0x8fc>
 8004100:	1e7b      	subs	r3, r7, #1
 8004102:	4649      	mov	r1, r9
 8004104:	9304      	str	r3, [sp, #16]
 8004106:	220a      	movs	r2, #10
 8004108:	2300      	movs	r3, #0
 800410a:	4658      	mov	r0, fp
 800410c:	f000 faf0 	bl	80046f0 <__multadd>
 8004110:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004112:	4681      	mov	r9, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 816c 	beq.w	80043f2 <_dtoa_r+0xb52>
 800411a:	2300      	movs	r3, #0
 800411c:	4629      	mov	r1, r5
 800411e:	220a      	movs	r2, #10
 8004120:	4658      	mov	r0, fp
 8004122:	f000 fae5 	bl	80046f0 <__multadd>
 8004126:	9b08      	ldr	r3, [sp, #32]
 8004128:	4605      	mov	r5, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	dc61      	bgt.n	80041f2 <_dtoa_r+0x952>
 800412e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004130:	2b02      	cmp	r3, #2
 8004132:	dc3b      	bgt.n	80041ac <_dtoa_r+0x90c>
 8004134:	e05d      	b.n	80041f2 <_dtoa_r+0x952>
 8004136:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004138:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800413c:	e746      	b.n	8003fcc <_dtoa_r+0x72c>
 800413e:	9b07      	ldr	r3, [sp, #28]
 8004140:	1e5c      	subs	r4, r3, #1
 8004142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004144:	42a3      	cmp	r3, r4
 8004146:	bfbf      	itttt	lt
 8004148:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800414a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800414c:	1ae3      	sublt	r3, r4, r3
 800414e:	18d2      	addlt	r2, r2, r3
 8004150:	bfa8      	it	ge
 8004152:	1b1c      	subge	r4, r3, r4
 8004154:	9b07      	ldr	r3, [sp, #28]
 8004156:	bfbe      	ittt	lt
 8004158:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800415a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800415c:	2400      	movlt	r4, #0
 800415e:	2b00      	cmp	r3, #0
 8004160:	bfb5      	itete	lt
 8004162:	eba8 0603 	sublt.w	r6, r8, r3
 8004166:	4646      	movge	r6, r8
 8004168:	2300      	movlt	r3, #0
 800416a:	9b07      	ldrge	r3, [sp, #28]
 800416c:	e730      	b.n	8003fd0 <_dtoa_r+0x730>
 800416e:	4646      	mov	r6, r8
 8004170:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004172:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004174:	e735      	b.n	8003fe2 <_dtoa_r+0x742>
 8004176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004178:	e75c      	b.n	8004034 <_dtoa_r+0x794>
 800417a:	2300      	movs	r3, #0
 800417c:	e788      	b.n	8004090 <_dtoa_r+0x7f0>
 800417e:	9b02      	ldr	r3, [sp, #8]
 8004180:	e786      	b.n	8004090 <_dtoa_r+0x7f0>
 8004182:	2300      	movs	r3, #0
 8004184:	930a      	str	r3, [sp, #40]	@ 0x28
 8004186:	e788      	b.n	800409a <_dtoa_r+0x7fa>
 8004188:	d09f      	beq.n	80040ca <_dtoa_r+0x82a>
 800418a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800418c:	331c      	adds	r3, #28
 800418e:	441a      	add	r2, r3
 8004190:	4498      	add	r8, r3
 8004192:	441e      	add	r6, r3
 8004194:	9209      	str	r2, [sp, #36]	@ 0x24
 8004196:	e798      	b.n	80040ca <_dtoa_r+0x82a>
 8004198:	4603      	mov	r3, r0
 800419a:	e7f6      	b.n	800418a <_dtoa_r+0x8ea>
 800419c:	9b07      	ldr	r3, [sp, #28]
 800419e:	9704      	str	r7, [sp, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	dc20      	bgt.n	80041e6 <_dtoa_r+0x946>
 80041a4:	9308      	str	r3, [sp, #32]
 80041a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	dd1e      	ble.n	80041ea <_dtoa_r+0x94a>
 80041ac:	9b08      	ldr	r3, [sp, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f47f aebc 	bne.w	8003f2c <_dtoa_r+0x68c>
 80041b4:	4621      	mov	r1, r4
 80041b6:	2205      	movs	r2, #5
 80041b8:	4658      	mov	r0, fp
 80041ba:	f000 fa99 	bl	80046f0 <__multadd>
 80041be:	4601      	mov	r1, r0
 80041c0:	4604      	mov	r4, r0
 80041c2:	4648      	mov	r0, r9
 80041c4:	f000 fcf4 	bl	8004bb0 <__mcmp>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	f77f aeaf 	ble.w	8003f2c <_dtoa_r+0x68c>
 80041ce:	2331      	movs	r3, #49	@ 0x31
 80041d0:	4656      	mov	r6, sl
 80041d2:	f806 3b01 	strb.w	r3, [r6], #1
 80041d6:	9b04      	ldr	r3, [sp, #16]
 80041d8:	3301      	adds	r3, #1
 80041da:	9304      	str	r3, [sp, #16]
 80041dc:	e6aa      	b.n	8003f34 <_dtoa_r+0x694>
 80041de:	9c07      	ldr	r4, [sp, #28]
 80041e0:	9704      	str	r7, [sp, #16]
 80041e2:	4625      	mov	r5, r4
 80041e4:	e7f3      	b.n	80041ce <_dtoa_r+0x92e>
 80041e6:	9b07      	ldr	r3, [sp, #28]
 80041e8:	9308      	str	r3, [sp, #32]
 80041ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8104 	beq.w	80043fa <_dtoa_r+0xb5a>
 80041f2:	2e00      	cmp	r6, #0
 80041f4:	dd05      	ble.n	8004202 <_dtoa_r+0x962>
 80041f6:	4629      	mov	r1, r5
 80041f8:	4632      	mov	r2, r6
 80041fa:	4658      	mov	r0, fp
 80041fc:	f000 fc6c 	bl	8004ad8 <__lshift>
 8004200:	4605      	mov	r5, r0
 8004202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d05a      	beq.n	80042be <_dtoa_r+0xa1e>
 8004208:	4658      	mov	r0, fp
 800420a:	6869      	ldr	r1, [r5, #4]
 800420c:	f000 fa0e 	bl	800462c <_Balloc>
 8004210:	4606      	mov	r6, r0
 8004212:	b928      	cbnz	r0, 8004220 <_dtoa_r+0x980>
 8004214:	4602      	mov	r2, r0
 8004216:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800421a:	4b83      	ldr	r3, [pc, #524]	@ (8004428 <_dtoa_r+0xb88>)
 800421c:	f7ff bb54 	b.w	80038c8 <_dtoa_r+0x28>
 8004220:	692a      	ldr	r2, [r5, #16]
 8004222:	f105 010c 	add.w	r1, r5, #12
 8004226:	3202      	adds	r2, #2
 8004228:	0092      	lsls	r2, r2, #2
 800422a:	300c      	adds	r0, #12
 800422c:	f001 ff5e 	bl	80060ec <memcpy>
 8004230:	2201      	movs	r2, #1
 8004232:	4631      	mov	r1, r6
 8004234:	4658      	mov	r0, fp
 8004236:	f000 fc4f 	bl	8004ad8 <__lshift>
 800423a:	462f      	mov	r7, r5
 800423c:	4605      	mov	r5, r0
 800423e:	f10a 0301 	add.w	r3, sl, #1
 8004242:	9307      	str	r3, [sp, #28]
 8004244:	9b08      	ldr	r3, [sp, #32]
 8004246:	4453      	add	r3, sl
 8004248:	930b      	str	r3, [sp, #44]	@ 0x2c
 800424a:	9b02      	ldr	r3, [sp, #8]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	930a      	str	r3, [sp, #40]	@ 0x28
 8004252:	9b07      	ldr	r3, [sp, #28]
 8004254:	4621      	mov	r1, r4
 8004256:	3b01      	subs	r3, #1
 8004258:	4648      	mov	r0, r9
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	f7ff fa98 	bl	8003790 <quorem>
 8004260:	4639      	mov	r1, r7
 8004262:	9008      	str	r0, [sp, #32]
 8004264:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004268:	4648      	mov	r0, r9
 800426a:	f000 fca1 	bl	8004bb0 <__mcmp>
 800426e:	462a      	mov	r2, r5
 8004270:	9009      	str	r0, [sp, #36]	@ 0x24
 8004272:	4621      	mov	r1, r4
 8004274:	4658      	mov	r0, fp
 8004276:	f000 fcb7 	bl	8004be8 <__mdiff>
 800427a:	68c2      	ldr	r2, [r0, #12]
 800427c:	4606      	mov	r6, r0
 800427e:	bb02      	cbnz	r2, 80042c2 <_dtoa_r+0xa22>
 8004280:	4601      	mov	r1, r0
 8004282:	4648      	mov	r0, r9
 8004284:	f000 fc94 	bl	8004bb0 <__mcmp>
 8004288:	4602      	mov	r2, r0
 800428a:	4631      	mov	r1, r6
 800428c:	4658      	mov	r0, fp
 800428e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004290:	f000 fa0c 	bl	80046ac <_Bfree>
 8004294:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004296:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004298:	9e07      	ldr	r6, [sp, #28]
 800429a:	ea43 0102 	orr.w	r1, r3, r2
 800429e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042a0:	4319      	orrs	r1, r3
 80042a2:	d110      	bne.n	80042c6 <_dtoa_r+0xa26>
 80042a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80042a8:	d029      	beq.n	80042fe <_dtoa_r+0xa5e>
 80042aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	dd02      	ble.n	80042b6 <_dtoa_r+0xa16>
 80042b0:	9b08      	ldr	r3, [sp, #32]
 80042b2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80042b6:	9b02      	ldr	r3, [sp, #8]
 80042b8:	f883 8000 	strb.w	r8, [r3]
 80042bc:	e63b      	b.n	8003f36 <_dtoa_r+0x696>
 80042be:	4628      	mov	r0, r5
 80042c0:	e7bb      	b.n	800423a <_dtoa_r+0x99a>
 80042c2:	2201      	movs	r2, #1
 80042c4:	e7e1      	b.n	800428a <_dtoa_r+0x9ea>
 80042c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	db04      	blt.n	80042d6 <_dtoa_r+0xa36>
 80042cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80042ce:	430b      	orrs	r3, r1
 80042d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80042d2:	430b      	orrs	r3, r1
 80042d4:	d120      	bne.n	8004318 <_dtoa_r+0xa78>
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	dded      	ble.n	80042b6 <_dtoa_r+0xa16>
 80042da:	4649      	mov	r1, r9
 80042dc:	2201      	movs	r2, #1
 80042de:	4658      	mov	r0, fp
 80042e0:	f000 fbfa 	bl	8004ad8 <__lshift>
 80042e4:	4621      	mov	r1, r4
 80042e6:	4681      	mov	r9, r0
 80042e8:	f000 fc62 	bl	8004bb0 <__mcmp>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	dc03      	bgt.n	80042f8 <_dtoa_r+0xa58>
 80042f0:	d1e1      	bne.n	80042b6 <_dtoa_r+0xa16>
 80042f2:	f018 0f01 	tst.w	r8, #1
 80042f6:	d0de      	beq.n	80042b6 <_dtoa_r+0xa16>
 80042f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80042fc:	d1d8      	bne.n	80042b0 <_dtoa_r+0xa10>
 80042fe:	2339      	movs	r3, #57	@ 0x39
 8004300:	9a02      	ldr	r2, [sp, #8]
 8004302:	7013      	strb	r3, [r2, #0]
 8004304:	4633      	mov	r3, r6
 8004306:	461e      	mov	r6, r3
 8004308:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800430c:	3b01      	subs	r3, #1
 800430e:	2a39      	cmp	r2, #57	@ 0x39
 8004310:	d052      	beq.n	80043b8 <_dtoa_r+0xb18>
 8004312:	3201      	adds	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e60e      	b.n	8003f36 <_dtoa_r+0x696>
 8004318:	2a00      	cmp	r2, #0
 800431a:	dd07      	ble.n	800432c <_dtoa_r+0xa8c>
 800431c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004320:	d0ed      	beq.n	80042fe <_dtoa_r+0xa5e>
 8004322:	9a02      	ldr	r2, [sp, #8]
 8004324:	f108 0301 	add.w	r3, r8, #1
 8004328:	7013      	strb	r3, [r2, #0]
 800432a:	e604      	b.n	8003f36 <_dtoa_r+0x696>
 800432c:	9b07      	ldr	r3, [sp, #28]
 800432e:	9a07      	ldr	r2, [sp, #28]
 8004330:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004336:	4293      	cmp	r3, r2
 8004338:	d028      	beq.n	800438c <_dtoa_r+0xaec>
 800433a:	4649      	mov	r1, r9
 800433c:	2300      	movs	r3, #0
 800433e:	220a      	movs	r2, #10
 8004340:	4658      	mov	r0, fp
 8004342:	f000 f9d5 	bl	80046f0 <__multadd>
 8004346:	42af      	cmp	r7, r5
 8004348:	4681      	mov	r9, r0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	f04f 020a 	mov.w	r2, #10
 8004352:	4639      	mov	r1, r7
 8004354:	4658      	mov	r0, fp
 8004356:	d107      	bne.n	8004368 <_dtoa_r+0xac8>
 8004358:	f000 f9ca 	bl	80046f0 <__multadd>
 800435c:	4607      	mov	r7, r0
 800435e:	4605      	mov	r5, r0
 8004360:	9b07      	ldr	r3, [sp, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	9307      	str	r3, [sp, #28]
 8004366:	e774      	b.n	8004252 <_dtoa_r+0x9b2>
 8004368:	f000 f9c2 	bl	80046f0 <__multadd>
 800436c:	4629      	mov	r1, r5
 800436e:	4607      	mov	r7, r0
 8004370:	2300      	movs	r3, #0
 8004372:	220a      	movs	r2, #10
 8004374:	4658      	mov	r0, fp
 8004376:	f000 f9bb 	bl	80046f0 <__multadd>
 800437a:	4605      	mov	r5, r0
 800437c:	e7f0      	b.n	8004360 <_dtoa_r+0xac0>
 800437e:	9b08      	ldr	r3, [sp, #32]
 8004380:	2700      	movs	r7, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfcc      	ite	gt
 8004386:	461e      	movgt	r6, r3
 8004388:	2601      	movle	r6, #1
 800438a:	4456      	add	r6, sl
 800438c:	4649      	mov	r1, r9
 800438e:	2201      	movs	r2, #1
 8004390:	4658      	mov	r0, fp
 8004392:	f000 fba1 	bl	8004ad8 <__lshift>
 8004396:	4621      	mov	r1, r4
 8004398:	4681      	mov	r9, r0
 800439a:	f000 fc09 	bl	8004bb0 <__mcmp>
 800439e:	2800      	cmp	r0, #0
 80043a0:	dcb0      	bgt.n	8004304 <_dtoa_r+0xa64>
 80043a2:	d102      	bne.n	80043aa <_dtoa_r+0xb0a>
 80043a4:	f018 0f01 	tst.w	r8, #1
 80043a8:	d1ac      	bne.n	8004304 <_dtoa_r+0xa64>
 80043aa:	4633      	mov	r3, r6
 80043ac:	461e      	mov	r6, r3
 80043ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043b2:	2a30      	cmp	r2, #48	@ 0x30
 80043b4:	d0fa      	beq.n	80043ac <_dtoa_r+0xb0c>
 80043b6:	e5be      	b.n	8003f36 <_dtoa_r+0x696>
 80043b8:	459a      	cmp	sl, r3
 80043ba:	d1a4      	bne.n	8004306 <_dtoa_r+0xa66>
 80043bc:	9b04      	ldr	r3, [sp, #16]
 80043be:	3301      	adds	r3, #1
 80043c0:	9304      	str	r3, [sp, #16]
 80043c2:	2331      	movs	r3, #49	@ 0x31
 80043c4:	f88a 3000 	strb.w	r3, [sl]
 80043c8:	e5b5      	b.n	8003f36 <_dtoa_r+0x696>
 80043ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80043cc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800442c <_dtoa_r+0xb8c>
 80043d0:	b11b      	cbz	r3, 80043da <_dtoa_r+0xb3a>
 80043d2:	f10a 0308 	add.w	r3, sl, #8
 80043d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4650      	mov	r0, sl
 80043dc:	b017      	add	sp, #92	@ 0x5c
 80043de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f77f ae3d 	ble.w	8004064 <_dtoa_r+0x7c4>
 80043ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80043ee:	2001      	movs	r0, #1
 80043f0:	e65b      	b.n	80040aa <_dtoa_r+0x80a>
 80043f2:	9b08      	ldr	r3, [sp, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f77f aed6 	ble.w	80041a6 <_dtoa_r+0x906>
 80043fa:	4656      	mov	r6, sl
 80043fc:	4621      	mov	r1, r4
 80043fe:	4648      	mov	r0, r9
 8004400:	f7ff f9c6 	bl	8003790 <quorem>
 8004404:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004408:	9b08      	ldr	r3, [sp, #32]
 800440a:	f806 8b01 	strb.w	r8, [r6], #1
 800440e:	eba6 020a 	sub.w	r2, r6, sl
 8004412:	4293      	cmp	r3, r2
 8004414:	ddb3      	ble.n	800437e <_dtoa_r+0xade>
 8004416:	4649      	mov	r1, r9
 8004418:	2300      	movs	r3, #0
 800441a:	220a      	movs	r2, #10
 800441c:	4658      	mov	r0, fp
 800441e:	f000 f967 	bl	80046f0 <__multadd>
 8004422:	4681      	mov	r9, r0
 8004424:	e7ea      	b.n	80043fc <_dtoa_r+0xb5c>
 8004426:	bf00      	nop
 8004428:	08006ef7 	.word	0x08006ef7
 800442c:	08006e7b 	.word	0x08006e7b

08004430 <_free_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4605      	mov	r5, r0
 8004434:	2900      	cmp	r1, #0
 8004436:	d040      	beq.n	80044ba <_free_r+0x8a>
 8004438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443c:	1f0c      	subs	r4, r1, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	bfb8      	it	lt
 8004442:	18e4      	addlt	r4, r4, r3
 8004444:	f000 f8e6 	bl	8004614 <__malloc_lock>
 8004448:	4a1c      	ldr	r2, [pc, #112]	@ (80044bc <_free_r+0x8c>)
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	b933      	cbnz	r3, 800445c <_free_r+0x2c>
 800444e:	6063      	str	r3, [r4, #4]
 8004450:	6014      	str	r4, [r2, #0]
 8004452:	4628      	mov	r0, r5
 8004454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004458:	f000 b8e2 	b.w	8004620 <__malloc_unlock>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d908      	bls.n	8004472 <_free_r+0x42>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	1821      	adds	r1, r4, r0
 8004464:	428b      	cmp	r3, r1
 8004466:	bf01      	itttt	eq
 8004468:	6819      	ldreq	r1, [r3, #0]
 800446a:	685b      	ldreq	r3, [r3, #4]
 800446c:	1809      	addeq	r1, r1, r0
 800446e:	6021      	streq	r1, [r4, #0]
 8004470:	e7ed      	b.n	800444e <_free_r+0x1e>
 8004472:	461a      	mov	r2, r3
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	b10b      	cbz	r3, 800447c <_free_r+0x4c>
 8004478:	42a3      	cmp	r3, r4
 800447a:	d9fa      	bls.n	8004472 <_free_r+0x42>
 800447c:	6811      	ldr	r1, [r2, #0]
 800447e:	1850      	adds	r0, r2, r1
 8004480:	42a0      	cmp	r0, r4
 8004482:	d10b      	bne.n	800449c <_free_r+0x6c>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	4401      	add	r1, r0
 8004488:	1850      	adds	r0, r2, r1
 800448a:	4283      	cmp	r3, r0
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	d1e0      	bne.n	8004452 <_free_r+0x22>
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4408      	add	r0, r1
 8004496:	6010      	str	r0, [r2, #0]
 8004498:	6053      	str	r3, [r2, #4]
 800449a:	e7da      	b.n	8004452 <_free_r+0x22>
 800449c:	d902      	bls.n	80044a4 <_free_r+0x74>
 800449e:	230c      	movs	r3, #12
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	e7d6      	b.n	8004452 <_free_r+0x22>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	1821      	adds	r1, r4, r0
 80044a8:	428b      	cmp	r3, r1
 80044aa:	bf01      	itttt	eq
 80044ac:	6819      	ldreq	r1, [r3, #0]
 80044ae:	685b      	ldreq	r3, [r3, #4]
 80044b0:	1809      	addeq	r1, r1, r0
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	6063      	str	r3, [r4, #4]
 80044b6:	6054      	str	r4, [r2, #4]
 80044b8:	e7cb      	b.n	8004452 <_free_r+0x22>
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20000354 	.word	0x20000354

080044c0 <malloc>:
 80044c0:	4b02      	ldr	r3, [pc, #8]	@ (80044cc <malloc+0xc>)
 80044c2:	4601      	mov	r1, r0
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	f000 b825 	b.w	8004514 <_malloc_r>
 80044ca:	bf00      	nop
 80044cc:	2000002c 	.word	0x2000002c

080044d0 <sbrk_aligned>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004510 <sbrk_aligned+0x40>)
 80044d4:	460c      	mov	r4, r1
 80044d6:	6831      	ldr	r1, [r6, #0]
 80044d8:	4605      	mov	r5, r0
 80044da:	b911      	cbnz	r1, 80044e2 <sbrk_aligned+0x12>
 80044dc:	f001 fdf6 	bl	80060cc <_sbrk_r>
 80044e0:	6030      	str	r0, [r6, #0]
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f001 fdf1 	bl	80060cc <_sbrk_r>
 80044ea:	1c43      	adds	r3, r0, #1
 80044ec:	d103      	bne.n	80044f6 <sbrk_aligned+0x26>
 80044ee:	f04f 34ff 	mov.w	r4, #4294967295
 80044f2:	4620      	mov	r0, r4
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
 80044f6:	1cc4      	adds	r4, r0, #3
 80044f8:	f024 0403 	bic.w	r4, r4, #3
 80044fc:	42a0      	cmp	r0, r4
 80044fe:	d0f8      	beq.n	80044f2 <sbrk_aligned+0x22>
 8004500:	1a21      	subs	r1, r4, r0
 8004502:	4628      	mov	r0, r5
 8004504:	f001 fde2 	bl	80060cc <_sbrk_r>
 8004508:	3001      	adds	r0, #1
 800450a:	d1f2      	bne.n	80044f2 <sbrk_aligned+0x22>
 800450c:	e7ef      	b.n	80044ee <sbrk_aligned+0x1e>
 800450e:	bf00      	nop
 8004510:	20000350 	.word	0x20000350

08004514 <_malloc_r>:
 8004514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004518:	1ccd      	adds	r5, r1, #3
 800451a:	f025 0503 	bic.w	r5, r5, #3
 800451e:	3508      	adds	r5, #8
 8004520:	2d0c      	cmp	r5, #12
 8004522:	bf38      	it	cc
 8004524:	250c      	movcc	r5, #12
 8004526:	2d00      	cmp	r5, #0
 8004528:	4606      	mov	r6, r0
 800452a:	db01      	blt.n	8004530 <_malloc_r+0x1c>
 800452c:	42a9      	cmp	r1, r5
 800452e:	d904      	bls.n	800453a <_malloc_r+0x26>
 8004530:	230c      	movs	r3, #12
 8004532:	6033      	str	r3, [r6, #0]
 8004534:	2000      	movs	r0, #0
 8004536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800453a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004610 <_malloc_r+0xfc>
 800453e:	f000 f869 	bl	8004614 <__malloc_lock>
 8004542:	f8d8 3000 	ldr.w	r3, [r8]
 8004546:	461c      	mov	r4, r3
 8004548:	bb44      	cbnz	r4, 800459c <_malloc_r+0x88>
 800454a:	4629      	mov	r1, r5
 800454c:	4630      	mov	r0, r6
 800454e:	f7ff ffbf 	bl	80044d0 <sbrk_aligned>
 8004552:	1c43      	adds	r3, r0, #1
 8004554:	4604      	mov	r4, r0
 8004556:	d158      	bne.n	800460a <_malloc_r+0xf6>
 8004558:	f8d8 4000 	ldr.w	r4, [r8]
 800455c:	4627      	mov	r7, r4
 800455e:	2f00      	cmp	r7, #0
 8004560:	d143      	bne.n	80045ea <_malloc_r+0xd6>
 8004562:	2c00      	cmp	r4, #0
 8004564:	d04b      	beq.n	80045fe <_malloc_r+0xea>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	4639      	mov	r1, r7
 800456a:	4630      	mov	r0, r6
 800456c:	eb04 0903 	add.w	r9, r4, r3
 8004570:	f001 fdac 	bl	80060cc <_sbrk_r>
 8004574:	4581      	cmp	r9, r0
 8004576:	d142      	bne.n	80045fe <_malloc_r+0xea>
 8004578:	6821      	ldr	r1, [r4, #0]
 800457a:	4630      	mov	r0, r6
 800457c:	1a6d      	subs	r5, r5, r1
 800457e:	4629      	mov	r1, r5
 8004580:	f7ff ffa6 	bl	80044d0 <sbrk_aligned>
 8004584:	3001      	adds	r0, #1
 8004586:	d03a      	beq.n	80045fe <_malloc_r+0xea>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	442b      	add	r3, r5
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	f8d8 3000 	ldr.w	r3, [r8]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	bb62      	cbnz	r2, 80045f0 <_malloc_r+0xdc>
 8004596:	f8c8 7000 	str.w	r7, [r8]
 800459a:	e00f      	b.n	80045bc <_malloc_r+0xa8>
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	1b52      	subs	r2, r2, r5
 80045a0:	d420      	bmi.n	80045e4 <_malloc_r+0xd0>
 80045a2:	2a0b      	cmp	r2, #11
 80045a4:	d917      	bls.n	80045d6 <_malloc_r+0xc2>
 80045a6:	1961      	adds	r1, r4, r5
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	6025      	str	r5, [r4, #0]
 80045ac:	bf18      	it	ne
 80045ae:	6059      	strne	r1, [r3, #4]
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	bf08      	it	eq
 80045b4:	f8c8 1000 	streq.w	r1, [r8]
 80045b8:	5162      	str	r2, [r4, r5]
 80045ba:	604b      	str	r3, [r1, #4]
 80045bc:	4630      	mov	r0, r6
 80045be:	f000 f82f 	bl	8004620 <__malloc_unlock>
 80045c2:	f104 000b 	add.w	r0, r4, #11
 80045c6:	1d23      	adds	r3, r4, #4
 80045c8:	f020 0007 	bic.w	r0, r0, #7
 80045cc:	1ac2      	subs	r2, r0, r3
 80045ce:	bf1c      	itt	ne
 80045d0:	1a1b      	subne	r3, r3, r0
 80045d2:	50a3      	strne	r3, [r4, r2]
 80045d4:	e7af      	b.n	8004536 <_malloc_r+0x22>
 80045d6:	6862      	ldr	r2, [r4, #4]
 80045d8:	42a3      	cmp	r3, r4
 80045da:	bf0c      	ite	eq
 80045dc:	f8c8 2000 	streq.w	r2, [r8]
 80045e0:	605a      	strne	r2, [r3, #4]
 80045e2:	e7eb      	b.n	80045bc <_malloc_r+0xa8>
 80045e4:	4623      	mov	r3, r4
 80045e6:	6864      	ldr	r4, [r4, #4]
 80045e8:	e7ae      	b.n	8004548 <_malloc_r+0x34>
 80045ea:	463c      	mov	r4, r7
 80045ec:	687f      	ldr	r7, [r7, #4]
 80045ee:	e7b6      	b.n	800455e <_malloc_r+0x4a>
 80045f0:	461a      	mov	r2, r3
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d1fb      	bne.n	80045f0 <_malloc_r+0xdc>
 80045f8:	2300      	movs	r3, #0
 80045fa:	6053      	str	r3, [r2, #4]
 80045fc:	e7de      	b.n	80045bc <_malloc_r+0xa8>
 80045fe:	230c      	movs	r3, #12
 8004600:	4630      	mov	r0, r6
 8004602:	6033      	str	r3, [r6, #0]
 8004604:	f000 f80c 	bl	8004620 <__malloc_unlock>
 8004608:	e794      	b.n	8004534 <_malloc_r+0x20>
 800460a:	6005      	str	r5, [r0, #0]
 800460c:	e7d6      	b.n	80045bc <_malloc_r+0xa8>
 800460e:	bf00      	nop
 8004610:	20000354 	.word	0x20000354

08004614 <__malloc_lock>:
 8004614:	4801      	ldr	r0, [pc, #4]	@ (800461c <__malloc_lock+0x8>)
 8004616:	f7ff b8a6 	b.w	8003766 <__retarget_lock_acquire_recursive>
 800461a:	bf00      	nop
 800461c:	2000034c 	.word	0x2000034c

08004620 <__malloc_unlock>:
 8004620:	4801      	ldr	r0, [pc, #4]	@ (8004628 <__malloc_unlock+0x8>)
 8004622:	f7ff b8a1 	b.w	8003768 <__retarget_lock_release_recursive>
 8004626:	bf00      	nop
 8004628:	2000034c 	.word	0x2000034c

0800462c <_Balloc>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	69c6      	ldr	r6, [r0, #28]
 8004630:	4604      	mov	r4, r0
 8004632:	460d      	mov	r5, r1
 8004634:	b976      	cbnz	r6, 8004654 <_Balloc+0x28>
 8004636:	2010      	movs	r0, #16
 8004638:	f7ff ff42 	bl	80044c0 <malloc>
 800463c:	4602      	mov	r2, r0
 800463e:	61e0      	str	r0, [r4, #28]
 8004640:	b920      	cbnz	r0, 800464c <_Balloc+0x20>
 8004642:	216b      	movs	r1, #107	@ 0x6b
 8004644:	4b17      	ldr	r3, [pc, #92]	@ (80046a4 <_Balloc+0x78>)
 8004646:	4818      	ldr	r0, [pc, #96]	@ (80046a8 <_Balloc+0x7c>)
 8004648:	f001 fd64 	bl	8006114 <__assert_func>
 800464c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004650:	6006      	str	r6, [r0, #0]
 8004652:	60c6      	str	r6, [r0, #12]
 8004654:	69e6      	ldr	r6, [r4, #28]
 8004656:	68f3      	ldr	r3, [r6, #12]
 8004658:	b183      	cbz	r3, 800467c <_Balloc+0x50>
 800465a:	69e3      	ldr	r3, [r4, #28]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004662:	b9b8      	cbnz	r0, 8004694 <_Balloc+0x68>
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f605 	lsl.w	r6, r1, r5
 800466a:	1d72      	adds	r2, r6, #5
 800466c:	4620      	mov	r0, r4
 800466e:	0092      	lsls	r2, r2, #2
 8004670:	f001 fd6e 	bl	8006150 <_calloc_r>
 8004674:	b160      	cbz	r0, 8004690 <_Balloc+0x64>
 8004676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800467a:	e00e      	b.n	800469a <_Balloc+0x6e>
 800467c:	2221      	movs	r2, #33	@ 0x21
 800467e:	2104      	movs	r1, #4
 8004680:	4620      	mov	r0, r4
 8004682:	f001 fd65 	bl	8006150 <_calloc_r>
 8004686:	69e3      	ldr	r3, [r4, #28]
 8004688:	60f0      	str	r0, [r6, #12]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e4      	bne.n	800465a <_Balloc+0x2e>
 8004690:	2000      	movs	r0, #0
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	6802      	ldr	r2, [r0, #0]
 8004696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800469a:	2300      	movs	r3, #0
 800469c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80046a0:	e7f7      	b.n	8004692 <_Balloc+0x66>
 80046a2:	bf00      	nop
 80046a4:	08006e88 	.word	0x08006e88
 80046a8:	08006f08 	.word	0x08006f08

080046ac <_Bfree>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	69c6      	ldr	r6, [r0, #28]
 80046b0:	4605      	mov	r5, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	b976      	cbnz	r6, 80046d4 <_Bfree+0x28>
 80046b6:	2010      	movs	r0, #16
 80046b8:	f7ff ff02 	bl	80044c0 <malloc>
 80046bc:	4602      	mov	r2, r0
 80046be:	61e8      	str	r0, [r5, #28]
 80046c0:	b920      	cbnz	r0, 80046cc <_Bfree+0x20>
 80046c2:	218f      	movs	r1, #143	@ 0x8f
 80046c4:	4b08      	ldr	r3, [pc, #32]	@ (80046e8 <_Bfree+0x3c>)
 80046c6:	4809      	ldr	r0, [pc, #36]	@ (80046ec <_Bfree+0x40>)
 80046c8:	f001 fd24 	bl	8006114 <__assert_func>
 80046cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046d0:	6006      	str	r6, [r0, #0]
 80046d2:	60c6      	str	r6, [r0, #12]
 80046d4:	b13c      	cbz	r4, 80046e6 <_Bfree+0x3a>
 80046d6:	69eb      	ldr	r3, [r5, #28]
 80046d8:	6862      	ldr	r2, [r4, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046e0:	6021      	str	r1, [r4, #0]
 80046e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	08006e88 	.word	0x08006e88
 80046ec:	08006f08 	.word	0x08006f08

080046f0 <__multadd>:
 80046f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f4:	4607      	mov	r7, r0
 80046f6:	460c      	mov	r4, r1
 80046f8:	461e      	mov	r6, r3
 80046fa:	2000      	movs	r0, #0
 80046fc:	690d      	ldr	r5, [r1, #16]
 80046fe:	f101 0c14 	add.w	ip, r1, #20
 8004702:	f8dc 3000 	ldr.w	r3, [ip]
 8004706:	3001      	adds	r0, #1
 8004708:	b299      	uxth	r1, r3
 800470a:	fb02 6101 	mla	r1, r2, r1, r6
 800470e:	0c1e      	lsrs	r6, r3, #16
 8004710:	0c0b      	lsrs	r3, r1, #16
 8004712:	fb02 3306 	mla	r3, r2, r6, r3
 8004716:	b289      	uxth	r1, r1
 8004718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800471c:	4285      	cmp	r5, r0
 800471e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004722:	f84c 1b04 	str.w	r1, [ip], #4
 8004726:	dcec      	bgt.n	8004702 <__multadd+0x12>
 8004728:	b30e      	cbz	r6, 800476e <__multadd+0x7e>
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	42ab      	cmp	r3, r5
 800472e:	dc19      	bgt.n	8004764 <__multadd+0x74>
 8004730:	6861      	ldr	r1, [r4, #4]
 8004732:	4638      	mov	r0, r7
 8004734:	3101      	adds	r1, #1
 8004736:	f7ff ff79 	bl	800462c <_Balloc>
 800473a:	4680      	mov	r8, r0
 800473c:	b928      	cbnz	r0, 800474a <__multadd+0x5a>
 800473e:	4602      	mov	r2, r0
 8004740:	21ba      	movs	r1, #186	@ 0xba
 8004742:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <__multadd+0x84>)
 8004744:	480c      	ldr	r0, [pc, #48]	@ (8004778 <__multadd+0x88>)
 8004746:	f001 fce5 	bl	8006114 <__assert_func>
 800474a:	6922      	ldr	r2, [r4, #16]
 800474c:	f104 010c 	add.w	r1, r4, #12
 8004750:	3202      	adds	r2, #2
 8004752:	0092      	lsls	r2, r2, #2
 8004754:	300c      	adds	r0, #12
 8004756:	f001 fcc9 	bl	80060ec <memcpy>
 800475a:	4621      	mov	r1, r4
 800475c:	4638      	mov	r0, r7
 800475e:	f7ff ffa5 	bl	80046ac <_Bfree>
 8004762:	4644      	mov	r4, r8
 8004764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004768:	3501      	adds	r5, #1
 800476a:	615e      	str	r6, [r3, #20]
 800476c:	6125      	str	r5, [r4, #16]
 800476e:	4620      	mov	r0, r4
 8004770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004774:	08006ef7 	.word	0x08006ef7
 8004778:	08006f08 	.word	0x08006f08

0800477c <__s2b>:
 800477c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004780:	4615      	mov	r5, r2
 8004782:	2209      	movs	r2, #9
 8004784:	461f      	mov	r7, r3
 8004786:	3308      	adds	r3, #8
 8004788:	460c      	mov	r4, r1
 800478a:	fb93 f3f2 	sdiv	r3, r3, r2
 800478e:	4606      	mov	r6, r0
 8004790:	2201      	movs	r2, #1
 8004792:	2100      	movs	r1, #0
 8004794:	429a      	cmp	r2, r3
 8004796:	db09      	blt.n	80047ac <__s2b+0x30>
 8004798:	4630      	mov	r0, r6
 800479a:	f7ff ff47 	bl	800462c <_Balloc>
 800479e:	b940      	cbnz	r0, 80047b2 <__s2b+0x36>
 80047a0:	4602      	mov	r2, r0
 80047a2:	21d3      	movs	r1, #211	@ 0xd3
 80047a4:	4b18      	ldr	r3, [pc, #96]	@ (8004808 <__s2b+0x8c>)
 80047a6:	4819      	ldr	r0, [pc, #100]	@ (800480c <__s2b+0x90>)
 80047a8:	f001 fcb4 	bl	8006114 <__assert_func>
 80047ac:	0052      	lsls	r2, r2, #1
 80047ae:	3101      	adds	r1, #1
 80047b0:	e7f0      	b.n	8004794 <__s2b+0x18>
 80047b2:	9b08      	ldr	r3, [sp, #32]
 80047b4:	2d09      	cmp	r5, #9
 80047b6:	6143      	str	r3, [r0, #20]
 80047b8:	f04f 0301 	mov.w	r3, #1
 80047bc:	6103      	str	r3, [r0, #16]
 80047be:	dd16      	ble.n	80047ee <__s2b+0x72>
 80047c0:	f104 0909 	add.w	r9, r4, #9
 80047c4:	46c8      	mov	r8, r9
 80047c6:	442c      	add	r4, r5
 80047c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80047cc:	4601      	mov	r1, r0
 80047ce:	220a      	movs	r2, #10
 80047d0:	4630      	mov	r0, r6
 80047d2:	3b30      	subs	r3, #48	@ 0x30
 80047d4:	f7ff ff8c 	bl	80046f0 <__multadd>
 80047d8:	45a0      	cmp	r8, r4
 80047da:	d1f5      	bne.n	80047c8 <__s2b+0x4c>
 80047dc:	f1a5 0408 	sub.w	r4, r5, #8
 80047e0:	444c      	add	r4, r9
 80047e2:	1b2d      	subs	r5, r5, r4
 80047e4:	1963      	adds	r3, r4, r5
 80047e6:	42bb      	cmp	r3, r7
 80047e8:	db04      	blt.n	80047f4 <__s2b+0x78>
 80047ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ee:	2509      	movs	r5, #9
 80047f0:	340a      	adds	r4, #10
 80047f2:	e7f6      	b.n	80047e2 <__s2b+0x66>
 80047f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80047f8:	4601      	mov	r1, r0
 80047fa:	220a      	movs	r2, #10
 80047fc:	4630      	mov	r0, r6
 80047fe:	3b30      	subs	r3, #48	@ 0x30
 8004800:	f7ff ff76 	bl	80046f0 <__multadd>
 8004804:	e7ee      	b.n	80047e4 <__s2b+0x68>
 8004806:	bf00      	nop
 8004808:	08006ef7 	.word	0x08006ef7
 800480c:	08006f08 	.word	0x08006f08

08004810 <__hi0bits>:
 8004810:	4603      	mov	r3, r0
 8004812:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004816:	bf3a      	itte	cc
 8004818:	0403      	lslcc	r3, r0, #16
 800481a:	2010      	movcc	r0, #16
 800481c:	2000      	movcs	r0, #0
 800481e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004822:	bf3c      	itt	cc
 8004824:	021b      	lslcc	r3, r3, #8
 8004826:	3008      	addcc	r0, #8
 8004828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800482c:	bf3c      	itt	cc
 800482e:	011b      	lslcc	r3, r3, #4
 8004830:	3004      	addcc	r0, #4
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004836:	bf3c      	itt	cc
 8004838:	009b      	lslcc	r3, r3, #2
 800483a:	3002      	addcc	r0, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	db05      	blt.n	800484c <__hi0bits+0x3c>
 8004840:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004844:	f100 0001 	add.w	r0, r0, #1
 8004848:	bf08      	it	eq
 800484a:	2020      	moveq	r0, #32
 800484c:	4770      	bx	lr

0800484e <__lo0bits>:
 800484e:	6803      	ldr	r3, [r0, #0]
 8004850:	4602      	mov	r2, r0
 8004852:	f013 0007 	ands.w	r0, r3, #7
 8004856:	d00b      	beq.n	8004870 <__lo0bits+0x22>
 8004858:	07d9      	lsls	r1, r3, #31
 800485a:	d421      	bmi.n	80048a0 <__lo0bits+0x52>
 800485c:	0798      	lsls	r0, r3, #30
 800485e:	bf49      	itett	mi
 8004860:	085b      	lsrmi	r3, r3, #1
 8004862:	089b      	lsrpl	r3, r3, #2
 8004864:	2001      	movmi	r0, #1
 8004866:	6013      	strmi	r3, [r2, #0]
 8004868:	bf5c      	itt	pl
 800486a:	2002      	movpl	r0, #2
 800486c:	6013      	strpl	r3, [r2, #0]
 800486e:	4770      	bx	lr
 8004870:	b299      	uxth	r1, r3
 8004872:	b909      	cbnz	r1, 8004878 <__lo0bits+0x2a>
 8004874:	2010      	movs	r0, #16
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	b2d9      	uxtb	r1, r3
 800487a:	b909      	cbnz	r1, 8004880 <__lo0bits+0x32>
 800487c:	3008      	adds	r0, #8
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	0719      	lsls	r1, r3, #28
 8004882:	bf04      	itt	eq
 8004884:	091b      	lsreq	r3, r3, #4
 8004886:	3004      	addeq	r0, #4
 8004888:	0799      	lsls	r1, r3, #30
 800488a:	bf04      	itt	eq
 800488c:	089b      	lsreq	r3, r3, #2
 800488e:	3002      	addeq	r0, #2
 8004890:	07d9      	lsls	r1, r3, #31
 8004892:	d403      	bmi.n	800489c <__lo0bits+0x4e>
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	f100 0001 	add.w	r0, r0, #1
 800489a:	d003      	beq.n	80048a4 <__lo0bits+0x56>
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4770      	bx	lr
 80048a0:	2000      	movs	r0, #0
 80048a2:	4770      	bx	lr
 80048a4:	2020      	movs	r0, #32
 80048a6:	4770      	bx	lr

080048a8 <__i2b>:
 80048a8:	b510      	push	{r4, lr}
 80048aa:	460c      	mov	r4, r1
 80048ac:	2101      	movs	r1, #1
 80048ae:	f7ff febd 	bl	800462c <_Balloc>
 80048b2:	4602      	mov	r2, r0
 80048b4:	b928      	cbnz	r0, 80048c2 <__i2b+0x1a>
 80048b6:	f240 1145 	movw	r1, #325	@ 0x145
 80048ba:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <__i2b+0x24>)
 80048bc:	4804      	ldr	r0, [pc, #16]	@ (80048d0 <__i2b+0x28>)
 80048be:	f001 fc29 	bl	8006114 <__assert_func>
 80048c2:	2301      	movs	r3, #1
 80048c4:	6144      	str	r4, [r0, #20]
 80048c6:	6103      	str	r3, [r0, #16]
 80048c8:	bd10      	pop	{r4, pc}
 80048ca:	bf00      	nop
 80048cc:	08006ef7 	.word	0x08006ef7
 80048d0:	08006f08 	.word	0x08006f08

080048d4 <__multiply>:
 80048d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d8:	4614      	mov	r4, r2
 80048da:	690a      	ldr	r2, [r1, #16]
 80048dc:	6923      	ldr	r3, [r4, #16]
 80048de:	460f      	mov	r7, r1
 80048e0:	429a      	cmp	r2, r3
 80048e2:	bfa2      	ittt	ge
 80048e4:	4623      	movge	r3, r4
 80048e6:	460c      	movge	r4, r1
 80048e8:	461f      	movge	r7, r3
 80048ea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80048ee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80048f2:	68a3      	ldr	r3, [r4, #8]
 80048f4:	6861      	ldr	r1, [r4, #4]
 80048f6:	eb0a 0609 	add.w	r6, sl, r9
 80048fa:	42b3      	cmp	r3, r6
 80048fc:	b085      	sub	sp, #20
 80048fe:	bfb8      	it	lt
 8004900:	3101      	addlt	r1, #1
 8004902:	f7ff fe93 	bl	800462c <_Balloc>
 8004906:	b930      	cbnz	r0, 8004916 <__multiply+0x42>
 8004908:	4602      	mov	r2, r0
 800490a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800490e:	4b43      	ldr	r3, [pc, #268]	@ (8004a1c <__multiply+0x148>)
 8004910:	4843      	ldr	r0, [pc, #268]	@ (8004a20 <__multiply+0x14c>)
 8004912:	f001 fbff 	bl	8006114 <__assert_func>
 8004916:	f100 0514 	add.w	r5, r0, #20
 800491a:	462b      	mov	r3, r5
 800491c:	2200      	movs	r2, #0
 800491e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004922:	4543      	cmp	r3, r8
 8004924:	d321      	bcc.n	800496a <__multiply+0x96>
 8004926:	f107 0114 	add.w	r1, r7, #20
 800492a:	f104 0214 	add.w	r2, r4, #20
 800492e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004932:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004936:	9302      	str	r3, [sp, #8]
 8004938:	1b13      	subs	r3, r2, r4
 800493a:	3b15      	subs	r3, #21
 800493c:	f023 0303 	bic.w	r3, r3, #3
 8004940:	3304      	adds	r3, #4
 8004942:	f104 0715 	add.w	r7, r4, #21
 8004946:	42ba      	cmp	r2, r7
 8004948:	bf38      	it	cc
 800494a:	2304      	movcc	r3, #4
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	9b02      	ldr	r3, [sp, #8]
 8004950:	9103      	str	r1, [sp, #12]
 8004952:	428b      	cmp	r3, r1
 8004954:	d80c      	bhi.n	8004970 <__multiply+0x9c>
 8004956:	2e00      	cmp	r6, #0
 8004958:	dd03      	ble.n	8004962 <__multiply+0x8e>
 800495a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800495e:	2b00      	cmp	r3, #0
 8004960:	d05a      	beq.n	8004a18 <__multiply+0x144>
 8004962:	6106      	str	r6, [r0, #16]
 8004964:	b005      	add	sp, #20
 8004966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496a:	f843 2b04 	str.w	r2, [r3], #4
 800496e:	e7d8      	b.n	8004922 <__multiply+0x4e>
 8004970:	f8b1 a000 	ldrh.w	sl, [r1]
 8004974:	f1ba 0f00 	cmp.w	sl, #0
 8004978:	d023      	beq.n	80049c2 <__multiply+0xee>
 800497a:	46a9      	mov	r9, r5
 800497c:	f04f 0c00 	mov.w	ip, #0
 8004980:	f104 0e14 	add.w	lr, r4, #20
 8004984:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004988:	f8d9 3000 	ldr.w	r3, [r9]
 800498c:	fa1f fb87 	uxth.w	fp, r7
 8004990:	b29b      	uxth	r3, r3
 8004992:	fb0a 330b 	mla	r3, sl, fp, r3
 8004996:	4463      	add	r3, ip
 8004998:	f8d9 c000 	ldr.w	ip, [r9]
 800499c:	0c3f      	lsrs	r7, r7, #16
 800499e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80049a2:	fb0a c707 	mla	r7, sl, r7, ip
 80049a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80049b0:	4572      	cmp	r2, lr
 80049b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80049b6:	f849 3b04 	str.w	r3, [r9], #4
 80049ba:	d8e3      	bhi.n	8004984 <__multiply+0xb0>
 80049bc:	9b01      	ldr	r3, [sp, #4]
 80049be:	f845 c003 	str.w	ip, [r5, r3]
 80049c2:	9b03      	ldr	r3, [sp, #12]
 80049c4:	3104      	adds	r1, #4
 80049c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80049ca:	f1b9 0f00 	cmp.w	r9, #0
 80049ce:	d021      	beq.n	8004a14 <__multiply+0x140>
 80049d0:	46ae      	mov	lr, r5
 80049d2:	f04f 0a00 	mov.w	sl, #0
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	f104 0c14 	add.w	ip, r4, #20
 80049dc:	f8bc b000 	ldrh.w	fp, [ip]
 80049e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	fb09 770b 	mla	r7, r9, fp, r7
 80049ea:	4457      	add	r7, sl
 80049ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80049f0:	f84e 3b04 	str.w	r3, [lr], #4
 80049f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80049f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049fc:	f8be 3000 	ldrh.w	r3, [lr]
 8004a00:	4562      	cmp	r2, ip
 8004a02:	fb09 330a 	mla	r3, r9, sl, r3
 8004a06:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004a0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a0e:	d8e5      	bhi.n	80049dc <__multiply+0x108>
 8004a10:	9f01      	ldr	r7, [sp, #4]
 8004a12:	51eb      	str	r3, [r5, r7]
 8004a14:	3504      	adds	r5, #4
 8004a16:	e79a      	b.n	800494e <__multiply+0x7a>
 8004a18:	3e01      	subs	r6, #1
 8004a1a:	e79c      	b.n	8004956 <__multiply+0x82>
 8004a1c:	08006ef7 	.word	0x08006ef7
 8004a20:	08006f08 	.word	0x08006f08

08004a24 <__pow5mult>:
 8004a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a28:	4615      	mov	r5, r2
 8004a2a:	f012 0203 	ands.w	r2, r2, #3
 8004a2e:	4607      	mov	r7, r0
 8004a30:	460e      	mov	r6, r1
 8004a32:	d007      	beq.n	8004a44 <__pow5mult+0x20>
 8004a34:	4c25      	ldr	r4, [pc, #148]	@ (8004acc <__pow5mult+0xa8>)
 8004a36:	3a01      	subs	r2, #1
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a3e:	f7ff fe57 	bl	80046f0 <__multadd>
 8004a42:	4606      	mov	r6, r0
 8004a44:	10ad      	asrs	r5, r5, #2
 8004a46:	d03d      	beq.n	8004ac4 <__pow5mult+0xa0>
 8004a48:	69fc      	ldr	r4, [r7, #28]
 8004a4a:	b97c      	cbnz	r4, 8004a6c <__pow5mult+0x48>
 8004a4c:	2010      	movs	r0, #16
 8004a4e:	f7ff fd37 	bl	80044c0 <malloc>
 8004a52:	4602      	mov	r2, r0
 8004a54:	61f8      	str	r0, [r7, #28]
 8004a56:	b928      	cbnz	r0, 8004a64 <__pow5mult+0x40>
 8004a58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad0 <__pow5mult+0xac>)
 8004a5e:	481d      	ldr	r0, [pc, #116]	@ (8004ad4 <__pow5mult+0xb0>)
 8004a60:	f001 fb58 	bl	8006114 <__assert_func>
 8004a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a68:	6004      	str	r4, [r0, #0]
 8004a6a:	60c4      	str	r4, [r0, #12]
 8004a6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a74:	b94c      	cbnz	r4, 8004a8a <__pow5mult+0x66>
 8004a76:	f240 2171 	movw	r1, #625	@ 0x271
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f7ff ff14 	bl	80048a8 <__i2b>
 8004a80:	2300      	movs	r3, #0
 8004a82:	4604      	mov	r4, r0
 8004a84:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a88:	6003      	str	r3, [r0, #0]
 8004a8a:	f04f 0900 	mov.w	r9, #0
 8004a8e:	07eb      	lsls	r3, r5, #31
 8004a90:	d50a      	bpl.n	8004aa8 <__pow5mult+0x84>
 8004a92:	4631      	mov	r1, r6
 8004a94:	4622      	mov	r2, r4
 8004a96:	4638      	mov	r0, r7
 8004a98:	f7ff ff1c 	bl	80048d4 <__multiply>
 8004a9c:	4680      	mov	r8, r0
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff fe03 	bl	80046ac <_Bfree>
 8004aa6:	4646      	mov	r6, r8
 8004aa8:	106d      	asrs	r5, r5, #1
 8004aaa:	d00b      	beq.n	8004ac4 <__pow5mult+0xa0>
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	b938      	cbnz	r0, 8004ac0 <__pow5mult+0x9c>
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f7ff ff0d 	bl	80048d4 <__multiply>
 8004aba:	6020      	str	r0, [r4, #0]
 8004abc:	f8c0 9000 	str.w	r9, [r0]
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	e7e4      	b.n	8004a8e <__pow5mult+0x6a>
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aca:	bf00      	nop
 8004acc:	08006f64 	.word	0x08006f64
 8004ad0:	08006e88 	.word	0x08006e88
 8004ad4:	08006f08 	.word	0x08006f08

08004ad8 <__lshift>:
 8004ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004adc:	460c      	mov	r4, r1
 8004ade:	4607      	mov	r7, r0
 8004ae0:	4691      	mov	r9, r2
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	6849      	ldr	r1, [r1, #4]
 8004ae6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004aea:	68a3      	ldr	r3, [r4, #8]
 8004aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004af0:	f108 0601 	add.w	r6, r8, #1
 8004af4:	42b3      	cmp	r3, r6
 8004af6:	db0b      	blt.n	8004b10 <__lshift+0x38>
 8004af8:	4638      	mov	r0, r7
 8004afa:	f7ff fd97 	bl	800462c <_Balloc>
 8004afe:	4605      	mov	r5, r0
 8004b00:	b948      	cbnz	r0, 8004b16 <__lshift+0x3e>
 8004b02:	4602      	mov	r2, r0
 8004b04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004b08:	4b27      	ldr	r3, [pc, #156]	@ (8004ba8 <__lshift+0xd0>)
 8004b0a:	4828      	ldr	r0, [pc, #160]	@ (8004bac <__lshift+0xd4>)
 8004b0c:	f001 fb02 	bl	8006114 <__assert_func>
 8004b10:	3101      	adds	r1, #1
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	e7ee      	b.n	8004af4 <__lshift+0x1c>
 8004b16:	2300      	movs	r3, #0
 8004b18:	f100 0114 	add.w	r1, r0, #20
 8004b1c:	f100 0210 	add.w	r2, r0, #16
 8004b20:	4618      	mov	r0, r3
 8004b22:	4553      	cmp	r3, sl
 8004b24:	db33      	blt.n	8004b8e <__lshift+0xb6>
 8004b26:	6920      	ldr	r0, [r4, #16]
 8004b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b2c:	f104 0314 	add.w	r3, r4, #20
 8004b30:	f019 091f 	ands.w	r9, r9, #31
 8004b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b3c:	d02b      	beq.n	8004b96 <__lshift+0xbe>
 8004b3e:	468a      	mov	sl, r1
 8004b40:	2200      	movs	r2, #0
 8004b42:	f1c9 0e20 	rsb	lr, r9, #32
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	fa00 f009 	lsl.w	r0, r0, r9
 8004b4c:	4310      	orrs	r0, r2
 8004b4e:	f84a 0b04 	str.w	r0, [sl], #4
 8004b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b56:	459c      	cmp	ip, r3
 8004b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b5c:	d8f3      	bhi.n	8004b46 <__lshift+0x6e>
 8004b5e:	ebac 0304 	sub.w	r3, ip, r4
 8004b62:	3b15      	subs	r3, #21
 8004b64:	f023 0303 	bic.w	r3, r3, #3
 8004b68:	3304      	adds	r3, #4
 8004b6a:	f104 0015 	add.w	r0, r4, #21
 8004b6e:	4584      	cmp	ip, r0
 8004b70:	bf38      	it	cc
 8004b72:	2304      	movcc	r3, #4
 8004b74:	50ca      	str	r2, [r1, r3]
 8004b76:	b10a      	cbz	r2, 8004b7c <__lshift+0xa4>
 8004b78:	f108 0602 	add.w	r6, r8, #2
 8004b7c:	3e01      	subs	r6, #1
 8004b7e:	4638      	mov	r0, r7
 8004b80:	4621      	mov	r1, r4
 8004b82:	612e      	str	r6, [r5, #16]
 8004b84:	f7ff fd92 	bl	80046ac <_Bfree>
 8004b88:	4628      	mov	r0, r5
 8004b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b92:	3301      	adds	r3, #1
 8004b94:	e7c5      	b.n	8004b22 <__lshift+0x4a>
 8004b96:	3904      	subs	r1, #4
 8004b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b9c:	459c      	cmp	ip, r3
 8004b9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004ba2:	d8f9      	bhi.n	8004b98 <__lshift+0xc0>
 8004ba4:	e7ea      	b.n	8004b7c <__lshift+0xa4>
 8004ba6:	bf00      	nop
 8004ba8:	08006ef7 	.word	0x08006ef7
 8004bac:	08006f08 	.word	0x08006f08

08004bb0 <__mcmp>:
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	690a      	ldr	r2, [r1, #16]
 8004bb4:	6900      	ldr	r0, [r0, #16]
 8004bb6:	b530      	push	{r4, r5, lr}
 8004bb8:	1a80      	subs	r0, r0, r2
 8004bba:	d10e      	bne.n	8004bda <__mcmp+0x2a>
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	3114      	adds	r1, #20
 8004bc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004bc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004bc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004bcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004bd0:	4295      	cmp	r5, r2
 8004bd2:	d003      	beq.n	8004bdc <__mcmp+0x2c>
 8004bd4:	d205      	bcs.n	8004be2 <__mcmp+0x32>
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	bd30      	pop	{r4, r5, pc}
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d3f3      	bcc.n	8004bc8 <__mcmp+0x18>
 8004be0:	e7fb      	b.n	8004bda <__mcmp+0x2a>
 8004be2:	2001      	movs	r0, #1
 8004be4:	e7f9      	b.n	8004bda <__mcmp+0x2a>
	...

08004be8 <__mdiff>:
 8004be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	4689      	mov	r9, r1
 8004bee:	4606      	mov	r6, r0
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4648      	mov	r0, r9
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	f7ff ffdb 	bl	8004bb0 <__mcmp>
 8004bfa:	1e05      	subs	r5, r0, #0
 8004bfc:	d112      	bne.n	8004c24 <__mdiff+0x3c>
 8004bfe:	4629      	mov	r1, r5
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7ff fd13 	bl	800462c <_Balloc>
 8004c06:	4602      	mov	r2, r0
 8004c08:	b928      	cbnz	r0, 8004c16 <__mdiff+0x2e>
 8004c0a:	f240 2137 	movw	r1, #567	@ 0x237
 8004c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d08 <__mdiff+0x120>)
 8004c10:	483e      	ldr	r0, [pc, #248]	@ (8004d0c <__mdiff+0x124>)
 8004c12:	f001 fa7f 	bl	8006114 <__assert_func>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	b003      	add	sp, #12
 8004c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c24:	bfbc      	itt	lt
 8004c26:	464b      	movlt	r3, r9
 8004c28:	46a1      	movlt	r9, r4
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004c30:	bfba      	itte	lt
 8004c32:	461c      	movlt	r4, r3
 8004c34:	2501      	movlt	r5, #1
 8004c36:	2500      	movge	r5, #0
 8004c38:	f7ff fcf8 	bl	800462c <_Balloc>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	b918      	cbnz	r0, 8004c48 <__mdiff+0x60>
 8004c40:	f240 2145 	movw	r1, #581	@ 0x245
 8004c44:	4b30      	ldr	r3, [pc, #192]	@ (8004d08 <__mdiff+0x120>)
 8004c46:	e7e3      	b.n	8004c10 <__mdiff+0x28>
 8004c48:	f100 0b14 	add.w	fp, r0, #20
 8004c4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004c50:	f109 0310 	add.w	r3, r9, #16
 8004c54:	60c5      	str	r5, [r0, #12]
 8004c56:	f04f 0c00 	mov.w	ip, #0
 8004c5a:	f109 0514 	add.w	r5, r9, #20
 8004c5e:	46d9      	mov	r9, fp
 8004c60:	6926      	ldr	r6, [r4, #16]
 8004c62:	f104 0e14 	add.w	lr, r4, #20
 8004c66:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004c6a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	9b01      	ldr	r3, [sp, #4]
 8004c72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004c76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004c7a:	b281      	uxth	r1, r0
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	fa1f f38a 	uxth.w	r3, sl
 8004c82:	1a5b      	subs	r3, r3, r1
 8004c84:	0c00      	lsrs	r0, r0, #16
 8004c86:	4463      	add	r3, ip
 8004c88:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004c8c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004c96:	4576      	cmp	r6, lr
 8004c98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004c9c:	f849 3b04 	str.w	r3, [r9], #4
 8004ca0:	d8e6      	bhi.n	8004c70 <__mdiff+0x88>
 8004ca2:	1b33      	subs	r3, r6, r4
 8004ca4:	3b15      	subs	r3, #21
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	3415      	adds	r4, #21
 8004cac:	3304      	adds	r3, #4
 8004cae:	42a6      	cmp	r6, r4
 8004cb0:	bf38      	it	cc
 8004cb2:	2304      	movcc	r3, #4
 8004cb4:	441d      	add	r5, r3
 8004cb6:	445b      	add	r3, fp
 8004cb8:	461e      	mov	r6, r3
 8004cba:	462c      	mov	r4, r5
 8004cbc:	4544      	cmp	r4, r8
 8004cbe:	d30e      	bcc.n	8004cde <__mdiff+0xf6>
 8004cc0:	f108 0103 	add.w	r1, r8, #3
 8004cc4:	1b49      	subs	r1, r1, r5
 8004cc6:	f021 0103 	bic.w	r1, r1, #3
 8004cca:	3d03      	subs	r5, #3
 8004ccc:	45a8      	cmp	r8, r5
 8004cce:	bf38      	it	cc
 8004cd0:	2100      	movcc	r1, #0
 8004cd2:	440b      	add	r3, r1
 8004cd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004cd8:	b199      	cbz	r1, 8004d02 <__mdiff+0x11a>
 8004cda:	6117      	str	r7, [r2, #16]
 8004cdc:	e79e      	b.n	8004c1c <__mdiff+0x34>
 8004cde:	46e6      	mov	lr, ip
 8004ce0:	f854 1b04 	ldr.w	r1, [r4], #4
 8004ce4:	fa1f fc81 	uxth.w	ip, r1
 8004ce8:	44f4      	add	ip, lr
 8004cea:	0c08      	lsrs	r0, r1, #16
 8004cec:	4471      	add	r1, lr
 8004cee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004cf2:	b289      	uxth	r1, r1
 8004cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004cf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004cfc:	f846 1b04 	str.w	r1, [r6], #4
 8004d00:	e7dc      	b.n	8004cbc <__mdiff+0xd4>
 8004d02:	3f01      	subs	r7, #1
 8004d04:	e7e6      	b.n	8004cd4 <__mdiff+0xec>
 8004d06:	bf00      	nop
 8004d08:	08006ef7 	.word	0x08006ef7
 8004d0c:	08006f08 	.word	0x08006f08

08004d10 <__ulp>:
 8004d10:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <__ulp+0x3c>)
 8004d12:	400b      	ands	r3, r1
 8004d14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	dc08      	bgt.n	8004d2e <__ulp+0x1e>
 8004d1c:	425b      	negs	r3, r3
 8004d1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8004d22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004d26:	da04      	bge.n	8004d32 <__ulp+0x22>
 8004d28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d2c:	4113      	asrs	r3, r2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	e008      	b.n	8004d44 <__ulp+0x34>
 8004d32:	f1a2 0314 	sub.w	r3, r2, #20
 8004d36:	2b1e      	cmp	r3, #30
 8004d38:	bfd6      	itet	le
 8004d3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8004d3e:	2201      	movgt	r2, #1
 8004d40:	40da      	lsrle	r2, r3
 8004d42:	2300      	movs	r3, #0
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	7ff00000 	.word	0x7ff00000

08004d50 <__b2d>:
 8004d50:	6902      	ldr	r2, [r0, #16]
 8004d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d54:	f100 0614 	add.w	r6, r0, #20
 8004d58:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004d5c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8004d60:	4f1e      	ldr	r7, [pc, #120]	@ (8004ddc <__b2d+0x8c>)
 8004d62:	4620      	mov	r0, r4
 8004d64:	f7ff fd54 	bl	8004810 <__hi0bits>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f1c0 0020 	rsb	r0, r0, #32
 8004d6e:	2b0a      	cmp	r3, #10
 8004d70:	f1a2 0504 	sub.w	r5, r2, #4
 8004d74:	6008      	str	r0, [r1, #0]
 8004d76:	dc12      	bgt.n	8004d9e <__b2d+0x4e>
 8004d78:	42ae      	cmp	r6, r5
 8004d7a:	bf2c      	ite	cs
 8004d7c:	2200      	movcs	r2, #0
 8004d7e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004d82:	f1c3 0c0b 	rsb	ip, r3, #11
 8004d86:	3315      	adds	r3, #21
 8004d88:	fa24 fe0c 	lsr.w	lr, r4, ip
 8004d8c:	fa04 f303 	lsl.w	r3, r4, r3
 8004d90:	fa22 f20c 	lsr.w	r2, r2, ip
 8004d94:	ea4e 0107 	orr.w	r1, lr, r7
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d9e:	42ae      	cmp	r6, r5
 8004da0:	bf36      	itet	cc
 8004da2:	f1a2 0508 	subcc.w	r5, r2, #8
 8004da6:	2200      	movcs	r2, #0
 8004da8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004dac:	3b0b      	subs	r3, #11
 8004dae:	d012      	beq.n	8004dd6 <__b2d+0x86>
 8004db0:	f1c3 0720 	rsb	r7, r3, #32
 8004db4:	fa22 f107 	lsr.w	r1, r2, r7
 8004db8:	409c      	lsls	r4, r3
 8004dba:	430c      	orrs	r4, r1
 8004dbc:	42b5      	cmp	r5, r6
 8004dbe:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8004dc2:	bf94      	ite	ls
 8004dc4:	2400      	movls	r4, #0
 8004dc6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	40fc      	lsrs	r4, r7
 8004dce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004dd2:	4322      	orrs	r2, r4
 8004dd4:	e7e1      	b.n	8004d9a <__b2d+0x4a>
 8004dd6:	ea44 0107 	orr.w	r1, r4, r7
 8004dda:	e7de      	b.n	8004d9a <__b2d+0x4a>
 8004ddc:	3ff00000 	.word	0x3ff00000

08004de0 <__d2b>:
 8004de0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004de4:	2101      	movs	r1, #1
 8004de6:	4690      	mov	r8, r2
 8004de8:	4699      	mov	r9, r3
 8004dea:	9e08      	ldr	r6, [sp, #32]
 8004dec:	f7ff fc1e 	bl	800462c <_Balloc>
 8004df0:	4604      	mov	r4, r0
 8004df2:	b930      	cbnz	r0, 8004e02 <__d2b+0x22>
 8004df4:	4602      	mov	r2, r0
 8004df6:	f240 310f 	movw	r1, #783	@ 0x30f
 8004dfa:	4b23      	ldr	r3, [pc, #140]	@ (8004e88 <__d2b+0xa8>)
 8004dfc:	4823      	ldr	r0, [pc, #140]	@ (8004e8c <__d2b+0xac>)
 8004dfe:	f001 f989 	bl	8006114 <__assert_func>
 8004e02:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004e06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e0a:	b10d      	cbz	r5, 8004e10 <__d2b+0x30>
 8004e0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	f1b8 0300 	subs.w	r3, r8, #0
 8004e16:	d024      	beq.n	8004e62 <__d2b+0x82>
 8004e18:	4668      	mov	r0, sp
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	f7ff fd17 	bl	800484e <__lo0bits>
 8004e20:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004e24:	b1d8      	cbz	r0, 8004e5e <__d2b+0x7e>
 8004e26:	f1c0 0320 	rsb	r3, r0, #32
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	40c2      	lsrs	r2, r0
 8004e32:	6163      	str	r3, [r4, #20]
 8004e34:	9201      	str	r2, [sp, #4]
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2201      	moveq	r2, #1
 8004e3e:	2202      	movne	r2, #2
 8004e40:	61a3      	str	r3, [r4, #24]
 8004e42:	6122      	str	r2, [r4, #16]
 8004e44:	b1ad      	cbz	r5, 8004e72 <__d2b+0x92>
 8004e46:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004e4a:	4405      	add	r5, r0
 8004e4c:	6035      	str	r5, [r6, #0]
 8004e4e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e54:	6018      	str	r0, [r3, #0]
 8004e56:	4620      	mov	r0, r4
 8004e58:	b002      	add	sp, #8
 8004e5a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004e5e:	6161      	str	r1, [r4, #20]
 8004e60:	e7e9      	b.n	8004e36 <__d2b+0x56>
 8004e62:	a801      	add	r0, sp, #4
 8004e64:	f7ff fcf3 	bl	800484e <__lo0bits>
 8004e68:	9b01      	ldr	r3, [sp, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	6163      	str	r3, [r4, #20]
 8004e6e:	3020      	adds	r0, #32
 8004e70:	e7e7      	b.n	8004e42 <__d2b+0x62>
 8004e72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004e76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e7a:	6030      	str	r0, [r6, #0]
 8004e7c:	6918      	ldr	r0, [r3, #16]
 8004e7e:	f7ff fcc7 	bl	8004810 <__hi0bits>
 8004e82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e86:	e7e4      	b.n	8004e52 <__d2b+0x72>
 8004e88:	08006ef7 	.word	0x08006ef7
 8004e8c:	08006f08 	.word	0x08006f08

08004e90 <__ratio>:
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	b085      	sub	sp, #20
 8004e96:	e9cd 1000 	strd	r1, r0, [sp]
 8004e9a:	a902      	add	r1, sp, #8
 8004e9c:	f7ff ff58 	bl	8004d50 <__b2d>
 8004ea0:	468b      	mov	fp, r1
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	460f      	mov	r7, r1
 8004ea6:	9800      	ldr	r0, [sp, #0]
 8004ea8:	a903      	add	r1, sp, #12
 8004eaa:	f7ff ff51 	bl	8004d50 <__b2d>
 8004eae:	460d      	mov	r5, r1
 8004eb0:	9b01      	ldr	r3, [sp, #4]
 8004eb2:	4689      	mov	r9, r1
 8004eb4:	6919      	ldr	r1, [r3, #16]
 8004eb6:	9b00      	ldr	r3, [sp, #0]
 8004eb8:	4604      	mov	r4, r0
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	1ac9      	subs	r1, r1, r3
 8004ec0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfcd      	iteet	gt
 8004ece:	463a      	movgt	r2, r7
 8004ed0:	462a      	movle	r2, r5
 8004ed2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004ed6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8004eda:	bfd8      	it	le
 8004edc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	f7fb fc21 	bl	800072c <__aeabi_ddiv>
 8004eea:	b005      	add	sp, #20
 8004eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004ef0 <__copybits>:
 8004ef0:	3901      	subs	r1, #1
 8004ef2:	b570      	push	{r4, r5, r6, lr}
 8004ef4:	1149      	asrs	r1, r1, #5
 8004ef6:	6914      	ldr	r4, [r2, #16]
 8004ef8:	3101      	adds	r1, #1
 8004efa:	f102 0314 	add.w	r3, r2, #20
 8004efe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004f06:	1f05      	subs	r5, r0, #4
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d30c      	bcc.n	8004f26 <__copybits+0x36>
 8004f0c:	1aa3      	subs	r3, r4, r2
 8004f0e:	3b11      	subs	r3, #17
 8004f10:	f023 0303 	bic.w	r3, r3, #3
 8004f14:	3211      	adds	r2, #17
 8004f16:	42a2      	cmp	r2, r4
 8004f18:	bf88      	it	hi
 8004f1a:	2300      	movhi	r3, #0
 8004f1c:	4418      	add	r0, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4288      	cmp	r0, r1
 8004f22:	d305      	bcc.n	8004f30 <__copybits+0x40>
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	f853 6b04 	ldr.w	r6, [r3], #4
 8004f2a:	f845 6f04 	str.w	r6, [r5, #4]!
 8004f2e:	e7eb      	b.n	8004f08 <__copybits+0x18>
 8004f30:	f840 3b04 	str.w	r3, [r0], #4
 8004f34:	e7f4      	b.n	8004f20 <__copybits+0x30>

08004f36 <__any_on>:
 8004f36:	f100 0214 	add.w	r2, r0, #20
 8004f3a:	6900      	ldr	r0, [r0, #16]
 8004f3c:	114b      	asrs	r3, r1, #5
 8004f3e:	4298      	cmp	r0, r3
 8004f40:	b510      	push	{r4, lr}
 8004f42:	db11      	blt.n	8004f68 <__any_on+0x32>
 8004f44:	dd0a      	ble.n	8004f5c <__any_on+0x26>
 8004f46:	f011 011f 	ands.w	r1, r1, #31
 8004f4a:	d007      	beq.n	8004f5c <__any_on+0x26>
 8004f4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004f50:	fa24 f001 	lsr.w	r0, r4, r1
 8004f54:	fa00 f101 	lsl.w	r1, r0, r1
 8004f58:	428c      	cmp	r4, r1
 8004f5a:	d10b      	bne.n	8004f74 <__any_on+0x3e>
 8004f5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d803      	bhi.n	8004f6c <__any_on+0x36>
 8004f64:	2000      	movs	r0, #0
 8004f66:	bd10      	pop	{r4, pc}
 8004f68:	4603      	mov	r3, r0
 8004f6a:	e7f7      	b.n	8004f5c <__any_on+0x26>
 8004f6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f70:	2900      	cmp	r1, #0
 8004f72:	d0f5      	beq.n	8004f60 <__any_on+0x2a>
 8004f74:	2001      	movs	r0, #1
 8004f76:	e7f6      	b.n	8004f66 <__any_on+0x30>

08004f78 <sulp>:
 8004f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7c:	460f      	mov	r7, r1
 8004f7e:	4690      	mov	r8, r2
 8004f80:	f7ff fec6 	bl	8004d10 <__ulp>
 8004f84:	4604      	mov	r4, r0
 8004f86:	460d      	mov	r5, r1
 8004f88:	f1b8 0f00 	cmp.w	r8, #0
 8004f8c:	d011      	beq.n	8004fb2 <sulp+0x3a>
 8004f8e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004f92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dd0b      	ble.n	8004fb2 <sulp+0x3a>
 8004f9a:	2400      	movs	r4, #0
 8004f9c:	051b      	lsls	r3, r3, #20
 8004f9e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004fa2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	462b      	mov	r3, r5
 8004faa:	f7fb fa95 	bl	80004d8 <__aeabi_dmul>
 8004fae:	4604      	mov	r4, r0
 8004fb0:	460d      	mov	r5, r1
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fba:	0000      	movs	r0, r0
 8004fbc:	0000      	movs	r0, r0
	...

08004fc0 <_strtod_l>:
 8004fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc4:	b09f      	sub	sp, #124	@ 0x7c
 8004fc6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	921a      	str	r2, [sp, #104]	@ 0x68
 8004fce:	f04f 0a00 	mov.w	sl, #0
 8004fd2:	f04f 0b00 	mov.w	fp, #0
 8004fd6:	460a      	mov	r2, r1
 8004fd8:	9005      	str	r0, [sp, #20]
 8004fda:	9219      	str	r2, [sp, #100]	@ 0x64
 8004fdc:	7811      	ldrb	r1, [r2, #0]
 8004fde:	292b      	cmp	r1, #43	@ 0x2b
 8004fe0:	d048      	beq.n	8005074 <_strtod_l+0xb4>
 8004fe2:	d836      	bhi.n	8005052 <_strtod_l+0x92>
 8004fe4:	290d      	cmp	r1, #13
 8004fe6:	d830      	bhi.n	800504a <_strtod_l+0x8a>
 8004fe8:	2908      	cmp	r1, #8
 8004fea:	d830      	bhi.n	800504e <_strtod_l+0x8e>
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d039      	beq.n	8005064 <_strtod_l+0xa4>
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004ff4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004ff6:	782a      	ldrb	r2, [r5, #0]
 8004ff8:	2a30      	cmp	r2, #48	@ 0x30
 8004ffa:	f040 80b1 	bne.w	8005160 <_strtod_l+0x1a0>
 8004ffe:	786a      	ldrb	r2, [r5, #1]
 8005000:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005004:	2a58      	cmp	r2, #88	@ 0x58
 8005006:	d16c      	bne.n	80050e2 <_strtod_l+0x122>
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800500c:	4a8e      	ldr	r2, [pc, #568]	@ (8005248 <_strtod_l+0x288>)
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	ab1a      	add	r3, sp, #104	@ 0x68
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	9805      	ldr	r0, [sp, #20]
 8005016:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005018:	a919      	add	r1, sp, #100	@ 0x64
 800501a:	f001 f915 	bl	8006248 <__gethex>
 800501e:	f010 060f 	ands.w	r6, r0, #15
 8005022:	4604      	mov	r4, r0
 8005024:	d005      	beq.n	8005032 <_strtod_l+0x72>
 8005026:	2e06      	cmp	r6, #6
 8005028:	d126      	bne.n	8005078 <_strtod_l+0xb8>
 800502a:	2300      	movs	r3, #0
 800502c:	3501      	adds	r5, #1
 800502e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005034:	2b00      	cmp	r3, #0
 8005036:	f040 8584 	bne.w	8005b42 <_strtod_l+0xb82>
 800503a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800503c:	b1bb      	cbz	r3, 800506e <_strtod_l+0xae>
 800503e:	4650      	mov	r0, sl
 8005040:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005044:	b01f      	add	sp, #124	@ 0x7c
 8005046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504a:	2920      	cmp	r1, #32
 800504c:	d1d0      	bne.n	8004ff0 <_strtod_l+0x30>
 800504e:	3201      	adds	r2, #1
 8005050:	e7c3      	b.n	8004fda <_strtod_l+0x1a>
 8005052:	292d      	cmp	r1, #45	@ 0x2d
 8005054:	d1cc      	bne.n	8004ff0 <_strtod_l+0x30>
 8005056:	2101      	movs	r1, #1
 8005058:	910b      	str	r1, [sp, #44]	@ 0x2c
 800505a:	1c51      	adds	r1, r2, #1
 800505c:	9119      	str	r1, [sp, #100]	@ 0x64
 800505e:	7852      	ldrb	r2, [r2, #1]
 8005060:	2a00      	cmp	r2, #0
 8005062:	d1c7      	bne.n	8004ff4 <_strtod_l+0x34>
 8005064:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005066:	9419      	str	r4, [sp, #100]	@ 0x64
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 8568 	bne.w	8005b3e <_strtod_l+0xb7e>
 800506e:	4650      	mov	r0, sl
 8005070:	4659      	mov	r1, fp
 8005072:	e7e7      	b.n	8005044 <_strtod_l+0x84>
 8005074:	2100      	movs	r1, #0
 8005076:	e7ef      	b.n	8005058 <_strtod_l+0x98>
 8005078:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800507a:	b13a      	cbz	r2, 800508c <_strtod_l+0xcc>
 800507c:	2135      	movs	r1, #53	@ 0x35
 800507e:	a81c      	add	r0, sp, #112	@ 0x70
 8005080:	f7ff ff36 	bl	8004ef0 <__copybits>
 8005084:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005086:	9805      	ldr	r0, [sp, #20]
 8005088:	f7ff fb10 	bl	80046ac <_Bfree>
 800508c:	3e01      	subs	r6, #1
 800508e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005090:	2e04      	cmp	r6, #4
 8005092:	d806      	bhi.n	80050a2 <_strtod_l+0xe2>
 8005094:	e8df f006 	tbb	[pc, r6]
 8005098:	201d0314 	.word	0x201d0314
 800509c:	14          	.byte	0x14
 800509d:	00          	.byte	0x00
 800509e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80050a2:	05e1      	lsls	r1, r4, #23
 80050a4:	bf48      	it	mi
 80050a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80050aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80050ae:	0d1b      	lsrs	r3, r3, #20
 80050b0:	051b      	lsls	r3, r3, #20
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1bd      	bne.n	8005032 <_strtod_l+0x72>
 80050b6:	f7fe fb2b 	bl	8003710 <__errno>
 80050ba:	2322      	movs	r3, #34	@ 0x22
 80050bc:	6003      	str	r3, [r0, #0]
 80050be:	e7b8      	b.n	8005032 <_strtod_l+0x72>
 80050c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80050c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80050c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80050cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80050d0:	e7e7      	b.n	80050a2 <_strtod_l+0xe2>
 80050d2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800524c <_strtod_l+0x28c>
 80050d6:	e7e4      	b.n	80050a2 <_strtod_l+0xe2>
 80050d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80050dc:	f04f 3aff 	mov.w	sl, #4294967295
 80050e0:	e7df      	b.n	80050a2 <_strtod_l+0xe2>
 80050e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	2b30      	cmp	r3, #48	@ 0x30
 80050ec:	d0f9      	beq.n	80050e2 <_strtod_l+0x122>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d09f      	beq.n	8005032 <_strtod_l+0x72>
 80050f2:	2301      	movs	r3, #1
 80050f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80050f8:	220a      	movs	r2, #10
 80050fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80050fc:	2300      	movs	r3, #0
 80050fe:	461f      	mov	r7, r3
 8005100:	9308      	str	r3, [sp, #32]
 8005102:	930a      	str	r3, [sp, #40]	@ 0x28
 8005104:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005106:	7805      	ldrb	r5, [r0, #0]
 8005108:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800510c:	b2d9      	uxtb	r1, r3
 800510e:	2909      	cmp	r1, #9
 8005110:	d928      	bls.n	8005164 <_strtod_l+0x1a4>
 8005112:	2201      	movs	r2, #1
 8005114:	494e      	ldr	r1, [pc, #312]	@ (8005250 <_strtod_l+0x290>)
 8005116:	f000 ffc7 	bl	80060a8 <strncmp>
 800511a:	2800      	cmp	r0, #0
 800511c:	d032      	beq.n	8005184 <_strtod_l+0x1c4>
 800511e:	2000      	movs	r0, #0
 8005120:	462a      	mov	r2, r5
 8005122:	4681      	mov	r9, r0
 8005124:	463d      	mov	r5, r7
 8005126:	4603      	mov	r3, r0
 8005128:	2a65      	cmp	r2, #101	@ 0x65
 800512a:	d001      	beq.n	8005130 <_strtod_l+0x170>
 800512c:	2a45      	cmp	r2, #69	@ 0x45
 800512e:	d114      	bne.n	800515a <_strtod_l+0x19a>
 8005130:	b91d      	cbnz	r5, 800513a <_strtod_l+0x17a>
 8005132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005134:	4302      	orrs	r2, r0
 8005136:	d095      	beq.n	8005064 <_strtod_l+0xa4>
 8005138:	2500      	movs	r5, #0
 800513a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800513c:	1c62      	adds	r2, r4, #1
 800513e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005140:	7862      	ldrb	r2, [r4, #1]
 8005142:	2a2b      	cmp	r2, #43	@ 0x2b
 8005144:	d077      	beq.n	8005236 <_strtod_l+0x276>
 8005146:	2a2d      	cmp	r2, #45	@ 0x2d
 8005148:	d07b      	beq.n	8005242 <_strtod_l+0x282>
 800514a:	f04f 0c00 	mov.w	ip, #0
 800514e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005152:	2909      	cmp	r1, #9
 8005154:	f240 8082 	bls.w	800525c <_strtod_l+0x29c>
 8005158:	9419      	str	r4, [sp, #100]	@ 0x64
 800515a:	f04f 0800 	mov.w	r8, #0
 800515e:	e0a2      	b.n	80052a6 <_strtod_l+0x2e6>
 8005160:	2300      	movs	r3, #0
 8005162:	e7c7      	b.n	80050f4 <_strtod_l+0x134>
 8005164:	2f08      	cmp	r7, #8
 8005166:	bfd5      	itete	le
 8005168:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800516a:	9908      	ldrgt	r1, [sp, #32]
 800516c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005170:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005174:	f100 0001 	add.w	r0, r0, #1
 8005178:	bfd4      	ite	le
 800517a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800517c:	9308      	strgt	r3, [sp, #32]
 800517e:	3701      	adds	r7, #1
 8005180:	9019      	str	r0, [sp, #100]	@ 0x64
 8005182:	e7bf      	b.n	8005104 <_strtod_l+0x144>
 8005184:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	9219      	str	r2, [sp, #100]	@ 0x64
 800518a:	785a      	ldrb	r2, [r3, #1]
 800518c:	b37f      	cbz	r7, 80051ee <_strtod_l+0x22e>
 800518e:	4681      	mov	r9, r0
 8005190:	463d      	mov	r5, r7
 8005192:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005196:	2b09      	cmp	r3, #9
 8005198:	d912      	bls.n	80051c0 <_strtod_l+0x200>
 800519a:	2301      	movs	r3, #1
 800519c:	e7c4      	b.n	8005128 <_strtod_l+0x168>
 800519e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051a0:	3001      	adds	r0, #1
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80051a6:	785a      	ldrb	r2, [r3, #1]
 80051a8:	2a30      	cmp	r2, #48	@ 0x30
 80051aa:	d0f8      	beq.n	800519e <_strtod_l+0x1de>
 80051ac:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	f200 84cb 	bhi.w	8005b4c <_strtod_l+0xb8c>
 80051b6:	4681      	mov	r9, r0
 80051b8:	2000      	movs	r0, #0
 80051ba:	4605      	mov	r5, r0
 80051bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051be:	930c      	str	r3, [sp, #48]	@ 0x30
 80051c0:	3a30      	subs	r2, #48	@ 0x30
 80051c2:	f100 0301 	add.w	r3, r0, #1
 80051c6:	d02a      	beq.n	800521e <_strtod_l+0x25e>
 80051c8:	4499      	add	r9, r3
 80051ca:	210a      	movs	r1, #10
 80051cc:	462b      	mov	r3, r5
 80051ce:	eb00 0c05 	add.w	ip, r0, r5
 80051d2:	4563      	cmp	r3, ip
 80051d4:	d10d      	bne.n	80051f2 <_strtod_l+0x232>
 80051d6:	1c69      	adds	r1, r5, #1
 80051d8:	4401      	add	r1, r0
 80051da:	4428      	add	r0, r5
 80051dc:	2808      	cmp	r0, #8
 80051de:	dc16      	bgt.n	800520e <_strtod_l+0x24e>
 80051e0:	230a      	movs	r3, #10
 80051e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80051e4:	fb03 2300 	mla	r3, r3, r0, r2
 80051e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ea:	2300      	movs	r3, #0
 80051ec:	e018      	b.n	8005220 <_strtod_l+0x260>
 80051ee:	4638      	mov	r0, r7
 80051f0:	e7da      	b.n	80051a8 <_strtod_l+0x1e8>
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	f103 0301 	add.w	r3, r3, #1
 80051f8:	dc03      	bgt.n	8005202 <_strtod_l+0x242>
 80051fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80051fc:	434e      	muls	r6, r1
 80051fe:	960a      	str	r6, [sp, #40]	@ 0x28
 8005200:	e7e7      	b.n	80051d2 <_strtod_l+0x212>
 8005202:	2b10      	cmp	r3, #16
 8005204:	bfde      	ittt	le
 8005206:	9e08      	ldrle	r6, [sp, #32]
 8005208:	434e      	mulle	r6, r1
 800520a:	9608      	strle	r6, [sp, #32]
 800520c:	e7e1      	b.n	80051d2 <_strtod_l+0x212>
 800520e:	280f      	cmp	r0, #15
 8005210:	dceb      	bgt.n	80051ea <_strtod_l+0x22a>
 8005212:	230a      	movs	r3, #10
 8005214:	9808      	ldr	r0, [sp, #32]
 8005216:	fb03 2300 	mla	r3, r3, r0, r2
 800521a:	9308      	str	r3, [sp, #32]
 800521c:	e7e5      	b.n	80051ea <_strtod_l+0x22a>
 800521e:	4629      	mov	r1, r5
 8005220:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005222:	460d      	mov	r5, r1
 8005224:	1c50      	adds	r0, r2, #1
 8005226:	9019      	str	r0, [sp, #100]	@ 0x64
 8005228:	7852      	ldrb	r2, [r2, #1]
 800522a:	4618      	mov	r0, r3
 800522c:	e7b1      	b.n	8005192 <_strtod_l+0x1d2>
 800522e:	f04f 0900 	mov.w	r9, #0
 8005232:	2301      	movs	r3, #1
 8005234:	e77d      	b.n	8005132 <_strtod_l+0x172>
 8005236:	f04f 0c00 	mov.w	ip, #0
 800523a:	1ca2      	adds	r2, r4, #2
 800523c:	9219      	str	r2, [sp, #100]	@ 0x64
 800523e:	78a2      	ldrb	r2, [r4, #2]
 8005240:	e785      	b.n	800514e <_strtod_l+0x18e>
 8005242:	f04f 0c01 	mov.w	ip, #1
 8005246:	e7f8      	b.n	800523a <_strtod_l+0x27a>
 8005248:	08007078 	.word	0x08007078
 800524c:	7ff00000 	.word	0x7ff00000
 8005250:	08007060 	.word	0x08007060
 8005254:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005256:	1c51      	adds	r1, r2, #1
 8005258:	9119      	str	r1, [sp, #100]	@ 0x64
 800525a:	7852      	ldrb	r2, [r2, #1]
 800525c:	2a30      	cmp	r2, #48	@ 0x30
 800525e:	d0f9      	beq.n	8005254 <_strtod_l+0x294>
 8005260:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005264:	2908      	cmp	r1, #8
 8005266:	f63f af78 	bhi.w	800515a <_strtod_l+0x19a>
 800526a:	f04f 080a 	mov.w	r8, #10
 800526e:	3a30      	subs	r2, #48	@ 0x30
 8005270:	920e      	str	r2, [sp, #56]	@ 0x38
 8005272:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005274:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005276:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005278:	1c56      	adds	r6, r2, #1
 800527a:	9619      	str	r6, [sp, #100]	@ 0x64
 800527c:	7852      	ldrb	r2, [r2, #1]
 800527e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005282:	f1be 0f09 	cmp.w	lr, #9
 8005286:	d939      	bls.n	80052fc <_strtod_l+0x33c>
 8005288:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800528a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800528e:	1a76      	subs	r6, r6, r1
 8005290:	2e08      	cmp	r6, #8
 8005292:	dc03      	bgt.n	800529c <_strtod_l+0x2dc>
 8005294:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005296:	4588      	cmp	r8, r1
 8005298:	bfa8      	it	ge
 800529a:	4688      	movge	r8, r1
 800529c:	f1bc 0f00 	cmp.w	ip, #0
 80052a0:	d001      	beq.n	80052a6 <_strtod_l+0x2e6>
 80052a2:	f1c8 0800 	rsb	r8, r8, #0
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	d14e      	bne.n	8005348 <_strtod_l+0x388>
 80052aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80052ac:	4308      	orrs	r0, r1
 80052ae:	f47f aec0 	bne.w	8005032 <_strtod_l+0x72>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f47f aed6 	bne.w	8005064 <_strtod_l+0xa4>
 80052b8:	2a69      	cmp	r2, #105	@ 0x69
 80052ba:	d028      	beq.n	800530e <_strtod_l+0x34e>
 80052bc:	dc25      	bgt.n	800530a <_strtod_l+0x34a>
 80052be:	2a49      	cmp	r2, #73	@ 0x49
 80052c0:	d025      	beq.n	800530e <_strtod_l+0x34e>
 80052c2:	2a4e      	cmp	r2, #78	@ 0x4e
 80052c4:	f47f aece 	bne.w	8005064 <_strtod_l+0xa4>
 80052c8:	499a      	ldr	r1, [pc, #616]	@ (8005534 <_strtod_l+0x574>)
 80052ca:	a819      	add	r0, sp, #100	@ 0x64
 80052cc:	f001 f9de 	bl	800668c <__match>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f43f aec7 	beq.w	8005064 <_strtod_l+0xa4>
 80052d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b28      	cmp	r3, #40	@ 0x28
 80052dc:	d12e      	bne.n	800533c <_strtod_l+0x37c>
 80052de:	4996      	ldr	r1, [pc, #600]	@ (8005538 <_strtod_l+0x578>)
 80052e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80052e2:	a819      	add	r0, sp, #100	@ 0x64
 80052e4:	f001 f9e6 	bl	80066b4 <__hexnan>
 80052e8:	2805      	cmp	r0, #5
 80052ea:	d127      	bne.n	800533c <_strtod_l+0x37c>
 80052ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80052ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80052f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80052f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80052fa:	e69a      	b.n	8005032 <_strtod_l+0x72>
 80052fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80052fe:	fb08 2101 	mla	r1, r8, r1, r2
 8005302:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005306:	920e      	str	r2, [sp, #56]	@ 0x38
 8005308:	e7b5      	b.n	8005276 <_strtod_l+0x2b6>
 800530a:	2a6e      	cmp	r2, #110	@ 0x6e
 800530c:	e7da      	b.n	80052c4 <_strtod_l+0x304>
 800530e:	498b      	ldr	r1, [pc, #556]	@ (800553c <_strtod_l+0x57c>)
 8005310:	a819      	add	r0, sp, #100	@ 0x64
 8005312:	f001 f9bb 	bl	800668c <__match>
 8005316:	2800      	cmp	r0, #0
 8005318:	f43f aea4 	beq.w	8005064 <_strtod_l+0xa4>
 800531c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800531e:	4988      	ldr	r1, [pc, #544]	@ (8005540 <_strtod_l+0x580>)
 8005320:	3b01      	subs	r3, #1
 8005322:	a819      	add	r0, sp, #100	@ 0x64
 8005324:	9319      	str	r3, [sp, #100]	@ 0x64
 8005326:	f001 f9b1 	bl	800668c <__match>
 800532a:	b910      	cbnz	r0, 8005332 <_strtod_l+0x372>
 800532c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800532e:	3301      	adds	r3, #1
 8005330:	9319      	str	r3, [sp, #100]	@ 0x64
 8005332:	f04f 0a00 	mov.w	sl, #0
 8005336:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005544 <_strtod_l+0x584>
 800533a:	e67a      	b.n	8005032 <_strtod_l+0x72>
 800533c:	4882      	ldr	r0, [pc, #520]	@ (8005548 <_strtod_l+0x588>)
 800533e:	f000 fee3 	bl	8006108 <nan>
 8005342:	4682      	mov	sl, r0
 8005344:	468b      	mov	fp, r1
 8005346:	e674      	b.n	8005032 <_strtod_l+0x72>
 8005348:	eba8 0309 	sub.w	r3, r8, r9
 800534c:	2f00      	cmp	r7, #0
 800534e:	bf08      	it	eq
 8005350:	462f      	moveq	r7, r5
 8005352:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005354:	2d10      	cmp	r5, #16
 8005356:	462c      	mov	r4, r5
 8005358:	9309      	str	r3, [sp, #36]	@ 0x24
 800535a:	bfa8      	it	ge
 800535c:	2410      	movge	r4, #16
 800535e:	f7fb f841 	bl	80003e4 <__aeabi_ui2d>
 8005362:	2d09      	cmp	r5, #9
 8005364:	4682      	mov	sl, r0
 8005366:	468b      	mov	fp, r1
 8005368:	dc11      	bgt.n	800538e <_strtod_l+0x3ce>
 800536a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	f43f ae60 	beq.w	8005032 <_strtod_l+0x72>
 8005372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005374:	dd76      	ble.n	8005464 <_strtod_l+0x4a4>
 8005376:	2b16      	cmp	r3, #22
 8005378:	dc5d      	bgt.n	8005436 <_strtod_l+0x476>
 800537a:	4974      	ldr	r1, [pc, #464]	@ (800554c <_strtod_l+0x58c>)
 800537c:	4652      	mov	r2, sl
 800537e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005382:	465b      	mov	r3, fp
 8005384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005388:	f7fb f8a6 	bl	80004d8 <__aeabi_dmul>
 800538c:	e7d9      	b.n	8005342 <_strtod_l+0x382>
 800538e:	4b6f      	ldr	r3, [pc, #444]	@ (800554c <_strtod_l+0x58c>)
 8005390:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005394:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005398:	f7fb f89e 	bl	80004d8 <__aeabi_dmul>
 800539c:	4682      	mov	sl, r0
 800539e:	9808      	ldr	r0, [sp, #32]
 80053a0:	468b      	mov	fp, r1
 80053a2:	f7fb f81f 	bl	80003e4 <__aeabi_ui2d>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4650      	mov	r0, sl
 80053ac:	4659      	mov	r1, fp
 80053ae:	f7fa fedd 	bl	800016c <__adddf3>
 80053b2:	2d0f      	cmp	r5, #15
 80053b4:	4682      	mov	sl, r0
 80053b6:	468b      	mov	fp, r1
 80053b8:	ddd7      	ble.n	800536a <_strtod_l+0x3aa>
 80053ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053bc:	1b2c      	subs	r4, r5, r4
 80053be:	441c      	add	r4, r3
 80053c0:	2c00      	cmp	r4, #0
 80053c2:	f340 8096 	ble.w	80054f2 <_strtod_l+0x532>
 80053c6:	f014 030f 	ands.w	r3, r4, #15
 80053ca:	d00a      	beq.n	80053e2 <_strtod_l+0x422>
 80053cc:	495f      	ldr	r1, [pc, #380]	@ (800554c <_strtod_l+0x58c>)
 80053ce:	4652      	mov	r2, sl
 80053d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80053d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053d8:	465b      	mov	r3, fp
 80053da:	f7fb f87d 	bl	80004d8 <__aeabi_dmul>
 80053de:	4682      	mov	sl, r0
 80053e0:	468b      	mov	fp, r1
 80053e2:	f034 040f 	bics.w	r4, r4, #15
 80053e6:	d073      	beq.n	80054d0 <_strtod_l+0x510>
 80053e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80053ec:	dd48      	ble.n	8005480 <_strtod_l+0x4c0>
 80053ee:	2400      	movs	r4, #0
 80053f0:	46a0      	mov	r8, r4
 80053f2:	46a1      	mov	r9, r4
 80053f4:	940a      	str	r4, [sp, #40]	@ 0x28
 80053f6:	2322      	movs	r3, #34	@ 0x22
 80053f8:	f04f 0a00 	mov.w	sl, #0
 80053fc:	9a05      	ldr	r2, [sp, #20]
 80053fe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005544 <_strtod_l+0x584>
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	f43f ae13 	beq.w	8005032 <_strtod_l+0x72>
 800540c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800540e:	9805      	ldr	r0, [sp, #20]
 8005410:	f7ff f94c 	bl	80046ac <_Bfree>
 8005414:	4649      	mov	r1, r9
 8005416:	9805      	ldr	r0, [sp, #20]
 8005418:	f7ff f948 	bl	80046ac <_Bfree>
 800541c:	4641      	mov	r1, r8
 800541e:	9805      	ldr	r0, [sp, #20]
 8005420:	f7ff f944 	bl	80046ac <_Bfree>
 8005424:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005426:	9805      	ldr	r0, [sp, #20]
 8005428:	f7ff f940 	bl	80046ac <_Bfree>
 800542c:	4621      	mov	r1, r4
 800542e:	9805      	ldr	r0, [sp, #20]
 8005430:	f7ff f93c 	bl	80046ac <_Bfree>
 8005434:	e5fd      	b.n	8005032 <_strtod_l+0x72>
 8005436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005438:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800543c:	4293      	cmp	r3, r2
 800543e:	dbbc      	blt.n	80053ba <_strtod_l+0x3fa>
 8005440:	4c42      	ldr	r4, [pc, #264]	@ (800554c <_strtod_l+0x58c>)
 8005442:	f1c5 050f 	rsb	r5, r5, #15
 8005446:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800544a:	4652      	mov	r2, sl
 800544c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005450:	465b      	mov	r3, fp
 8005452:	f7fb f841 	bl	80004d8 <__aeabi_dmul>
 8005456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005458:	1b5d      	subs	r5, r3, r5
 800545a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800545e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005462:	e791      	b.n	8005388 <_strtod_l+0x3c8>
 8005464:	3316      	adds	r3, #22
 8005466:	dba8      	blt.n	80053ba <_strtod_l+0x3fa>
 8005468:	4b38      	ldr	r3, [pc, #224]	@ (800554c <_strtod_l+0x58c>)
 800546a:	eba9 0808 	sub.w	r8, r9, r8
 800546e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005472:	4650      	mov	r0, sl
 8005474:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005478:	4659      	mov	r1, fp
 800547a:	f7fb f957 	bl	800072c <__aeabi_ddiv>
 800547e:	e760      	b.n	8005342 <_strtod_l+0x382>
 8005480:	4b33      	ldr	r3, [pc, #204]	@ (8005550 <_strtod_l+0x590>)
 8005482:	4650      	mov	r0, sl
 8005484:	9308      	str	r3, [sp, #32]
 8005486:	2300      	movs	r3, #0
 8005488:	4659      	mov	r1, fp
 800548a:	461e      	mov	r6, r3
 800548c:	1124      	asrs	r4, r4, #4
 800548e:	2c01      	cmp	r4, #1
 8005490:	dc21      	bgt.n	80054d6 <_strtod_l+0x516>
 8005492:	b10b      	cbz	r3, 8005498 <_strtod_l+0x4d8>
 8005494:	4682      	mov	sl, r0
 8005496:	468b      	mov	fp, r1
 8005498:	492d      	ldr	r1, [pc, #180]	@ (8005550 <_strtod_l+0x590>)
 800549a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800549e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80054a2:	4652      	mov	r2, sl
 80054a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054a8:	465b      	mov	r3, fp
 80054aa:	f7fb f815 	bl	80004d8 <__aeabi_dmul>
 80054ae:	4b25      	ldr	r3, [pc, #148]	@ (8005544 <_strtod_l+0x584>)
 80054b0:	460a      	mov	r2, r1
 80054b2:	400b      	ands	r3, r1
 80054b4:	4927      	ldr	r1, [pc, #156]	@ (8005554 <_strtod_l+0x594>)
 80054b6:	4682      	mov	sl, r0
 80054b8:	428b      	cmp	r3, r1
 80054ba:	d898      	bhi.n	80053ee <_strtod_l+0x42e>
 80054bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80054c0:	428b      	cmp	r3, r1
 80054c2:	bf86      	itte	hi
 80054c4:	f04f 3aff 	movhi.w	sl, #4294967295
 80054c8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005558 <_strtod_l+0x598>
 80054cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80054d0:	2300      	movs	r3, #0
 80054d2:	9308      	str	r3, [sp, #32]
 80054d4:	e07a      	b.n	80055cc <_strtod_l+0x60c>
 80054d6:	07e2      	lsls	r2, r4, #31
 80054d8:	d505      	bpl.n	80054e6 <_strtod_l+0x526>
 80054da:	9b08      	ldr	r3, [sp, #32]
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fa fffa 	bl	80004d8 <__aeabi_dmul>
 80054e4:	2301      	movs	r3, #1
 80054e6:	9a08      	ldr	r2, [sp, #32]
 80054e8:	3601      	adds	r6, #1
 80054ea:	3208      	adds	r2, #8
 80054ec:	1064      	asrs	r4, r4, #1
 80054ee:	9208      	str	r2, [sp, #32]
 80054f0:	e7cd      	b.n	800548e <_strtod_l+0x4ce>
 80054f2:	d0ed      	beq.n	80054d0 <_strtod_l+0x510>
 80054f4:	4264      	negs	r4, r4
 80054f6:	f014 020f 	ands.w	r2, r4, #15
 80054fa:	d00a      	beq.n	8005512 <_strtod_l+0x552>
 80054fc:	4b13      	ldr	r3, [pc, #76]	@ (800554c <_strtod_l+0x58c>)
 80054fe:	4650      	mov	r0, sl
 8005500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005504:	4659      	mov	r1, fp
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f7fb f90f 	bl	800072c <__aeabi_ddiv>
 800550e:	4682      	mov	sl, r0
 8005510:	468b      	mov	fp, r1
 8005512:	1124      	asrs	r4, r4, #4
 8005514:	d0dc      	beq.n	80054d0 <_strtod_l+0x510>
 8005516:	2c1f      	cmp	r4, #31
 8005518:	dd20      	ble.n	800555c <_strtod_l+0x59c>
 800551a:	2400      	movs	r4, #0
 800551c:	46a0      	mov	r8, r4
 800551e:	46a1      	mov	r9, r4
 8005520:	940a      	str	r4, [sp, #40]	@ 0x28
 8005522:	2322      	movs	r3, #34	@ 0x22
 8005524:	9a05      	ldr	r2, [sp, #20]
 8005526:	f04f 0a00 	mov.w	sl, #0
 800552a:	f04f 0b00 	mov.w	fp, #0
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e768      	b.n	8005404 <_strtod_l+0x444>
 8005532:	bf00      	nop
 8005534:	08006e4f 	.word	0x08006e4f
 8005538:	08007064 	.word	0x08007064
 800553c:	08006e47 	.word	0x08006e47
 8005540:	08006e7e 	.word	0x08006e7e
 8005544:	7ff00000 	.word	0x7ff00000
 8005548:	0800720d 	.word	0x0800720d
 800554c:	08006f98 	.word	0x08006f98
 8005550:	08006f70 	.word	0x08006f70
 8005554:	7ca00000 	.word	0x7ca00000
 8005558:	7fefffff 	.word	0x7fefffff
 800555c:	f014 0310 	ands.w	r3, r4, #16
 8005560:	bf18      	it	ne
 8005562:	236a      	movne	r3, #106	@ 0x6a
 8005564:	4650      	mov	r0, sl
 8005566:	9308      	str	r3, [sp, #32]
 8005568:	4659      	mov	r1, fp
 800556a:	2300      	movs	r3, #0
 800556c:	4ea9      	ldr	r6, [pc, #676]	@ (8005814 <_strtod_l+0x854>)
 800556e:	07e2      	lsls	r2, r4, #31
 8005570:	d504      	bpl.n	800557c <_strtod_l+0x5bc>
 8005572:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005576:	f7fa ffaf 	bl	80004d8 <__aeabi_dmul>
 800557a:	2301      	movs	r3, #1
 800557c:	1064      	asrs	r4, r4, #1
 800557e:	f106 0608 	add.w	r6, r6, #8
 8005582:	d1f4      	bne.n	800556e <_strtod_l+0x5ae>
 8005584:	b10b      	cbz	r3, 800558a <_strtod_l+0x5ca>
 8005586:	4682      	mov	sl, r0
 8005588:	468b      	mov	fp, r1
 800558a:	9b08      	ldr	r3, [sp, #32]
 800558c:	b1b3      	cbz	r3, 80055bc <_strtod_l+0x5fc>
 800558e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005592:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005596:	2b00      	cmp	r3, #0
 8005598:	4659      	mov	r1, fp
 800559a:	dd0f      	ble.n	80055bc <_strtod_l+0x5fc>
 800559c:	2b1f      	cmp	r3, #31
 800559e:	dd57      	ble.n	8005650 <_strtod_l+0x690>
 80055a0:	2b34      	cmp	r3, #52	@ 0x34
 80055a2:	bfd8      	it	le
 80055a4:	f04f 33ff 	movle.w	r3, #4294967295
 80055a8:	f04f 0a00 	mov.w	sl, #0
 80055ac:	bfcf      	iteee	gt
 80055ae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80055b2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80055b6:	4093      	lslle	r3, r2
 80055b8:	ea03 0b01 	andle.w	fp, r3, r1
 80055bc:	2200      	movs	r2, #0
 80055be:	2300      	movs	r3, #0
 80055c0:	4650      	mov	r0, sl
 80055c2:	4659      	mov	r1, fp
 80055c4:	f7fb f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d1a6      	bne.n	800551a <_strtod_l+0x55a>
 80055cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ce:	463a      	mov	r2, r7
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80055d4:	462b      	mov	r3, r5
 80055d6:	9805      	ldr	r0, [sp, #20]
 80055d8:	f7ff f8d0 	bl	800477c <__s2b>
 80055dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80055de:	2800      	cmp	r0, #0
 80055e0:	f43f af05 	beq.w	80053ee <_strtod_l+0x42e>
 80055e4:	2400      	movs	r4, #0
 80055e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055e8:	eba9 0308 	sub.w	r3, r9, r8
 80055ec:	2a00      	cmp	r2, #0
 80055ee:	bfa8      	it	ge
 80055f0:	2300      	movge	r3, #0
 80055f2:	46a0      	mov	r8, r4
 80055f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80055f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80055fa:	9316      	str	r3, [sp, #88]	@ 0x58
 80055fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055fe:	9805      	ldr	r0, [sp, #20]
 8005600:	6859      	ldr	r1, [r3, #4]
 8005602:	f7ff f813 	bl	800462c <_Balloc>
 8005606:	4681      	mov	r9, r0
 8005608:	2800      	cmp	r0, #0
 800560a:	f43f aef4 	beq.w	80053f6 <_strtod_l+0x436>
 800560e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005610:	300c      	adds	r0, #12
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	f103 010c 	add.w	r1, r3, #12
 8005618:	3202      	adds	r2, #2
 800561a:	0092      	lsls	r2, r2, #2
 800561c:	f000 fd66 	bl	80060ec <memcpy>
 8005620:	ab1c      	add	r3, sp, #112	@ 0x70
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	4652      	mov	r2, sl
 800562a:	465b      	mov	r3, fp
 800562c:	9805      	ldr	r0, [sp, #20]
 800562e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005632:	f7ff fbd5 	bl	8004de0 <__d2b>
 8005636:	901a      	str	r0, [sp, #104]	@ 0x68
 8005638:	2800      	cmp	r0, #0
 800563a:	f43f aedc 	beq.w	80053f6 <_strtod_l+0x436>
 800563e:	2101      	movs	r1, #1
 8005640:	9805      	ldr	r0, [sp, #20]
 8005642:	f7ff f931 	bl	80048a8 <__i2b>
 8005646:	4680      	mov	r8, r0
 8005648:	b948      	cbnz	r0, 800565e <_strtod_l+0x69e>
 800564a:	f04f 0800 	mov.w	r8, #0
 800564e:	e6d2      	b.n	80053f6 <_strtod_l+0x436>
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	ea03 0a0a 	and.w	sl, r3, sl
 800565c:	e7ae      	b.n	80055bc <_strtod_l+0x5fc>
 800565e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005660:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005662:	2d00      	cmp	r5, #0
 8005664:	bfab      	itete	ge
 8005666:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005668:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800566a:	18ef      	addge	r7, r5, r3
 800566c:	1b5e      	sublt	r6, r3, r5
 800566e:	9b08      	ldr	r3, [sp, #32]
 8005670:	bfa8      	it	ge
 8005672:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005674:	eba5 0503 	sub.w	r5, r5, r3
 8005678:	4415      	add	r5, r2
 800567a:	4b67      	ldr	r3, [pc, #412]	@ (8005818 <_strtod_l+0x858>)
 800567c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005680:	bfb8      	it	lt
 8005682:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005684:	429d      	cmp	r5, r3
 8005686:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800568a:	da50      	bge.n	800572e <_strtod_l+0x76e>
 800568c:	1b5b      	subs	r3, r3, r5
 800568e:	2b1f      	cmp	r3, #31
 8005690:	f04f 0101 	mov.w	r1, #1
 8005694:	eba2 0203 	sub.w	r2, r2, r3
 8005698:	dc3d      	bgt.n	8005716 <_strtod_l+0x756>
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056a0:	2300      	movs	r3, #0
 80056a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80056a4:	18bd      	adds	r5, r7, r2
 80056a6:	9b08      	ldr	r3, [sp, #32]
 80056a8:	42af      	cmp	r7, r5
 80056aa:	4416      	add	r6, r2
 80056ac:	441e      	add	r6, r3
 80056ae:	463b      	mov	r3, r7
 80056b0:	bfa8      	it	ge
 80056b2:	462b      	movge	r3, r5
 80056b4:	42b3      	cmp	r3, r6
 80056b6:	bfa8      	it	ge
 80056b8:	4633      	movge	r3, r6
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bfc2      	ittt	gt
 80056be:	1aed      	subgt	r5, r5, r3
 80056c0:	1af6      	subgt	r6, r6, r3
 80056c2:	1aff      	subgt	r7, r7, r3
 80056c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	dd16      	ble.n	80056f8 <_strtod_l+0x738>
 80056ca:	4641      	mov	r1, r8
 80056cc:	461a      	mov	r2, r3
 80056ce:	9805      	ldr	r0, [sp, #20]
 80056d0:	f7ff f9a8 	bl	8004a24 <__pow5mult>
 80056d4:	4680      	mov	r8, r0
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d0b7      	beq.n	800564a <_strtod_l+0x68a>
 80056da:	4601      	mov	r1, r0
 80056dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80056de:	9805      	ldr	r0, [sp, #20]
 80056e0:	f7ff f8f8 	bl	80048d4 <__multiply>
 80056e4:	900e      	str	r0, [sp, #56]	@ 0x38
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f43f ae85 	beq.w	80053f6 <_strtod_l+0x436>
 80056ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80056ee:	9805      	ldr	r0, [sp, #20]
 80056f0:	f7fe ffdc 	bl	80046ac <_Bfree>
 80056f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	dc1d      	bgt.n	8005738 <_strtod_l+0x778>
 80056fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dd23      	ble.n	800574a <_strtod_l+0x78a>
 8005702:	4649      	mov	r1, r9
 8005704:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005706:	9805      	ldr	r0, [sp, #20]
 8005708:	f7ff f98c 	bl	8004a24 <__pow5mult>
 800570c:	4681      	mov	r9, r0
 800570e:	b9e0      	cbnz	r0, 800574a <_strtod_l+0x78a>
 8005710:	f04f 0900 	mov.w	r9, #0
 8005714:	e66f      	b.n	80053f6 <_strtod_l+0x436>
 8005716:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800571a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800571e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005722:	35e2      	adds	r5, #226	@ 0xe2
 8005724:	fa01 f305 	lsl.w	r3, r1, r5
 8005728:	9310      	str	r3, [sp, #64]	@ 0x40
 800572a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800572c:	e7ba      	b.n	80056a4 <_strtod_l+0x6e4>
 800572e:	2300      	movs	r3, #0
 8005730:	9310      	str	r3, [sp, #64]	@ 0x40
 8005732:	2301      	movs	r3, #1
 8005734:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005736:	e7b5      	b.n	80056a4 <_strtod_l+0x6e4>
 8005738:	462a      	mov	r2, r5
 800573a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800573c:	9805      	ldr	r0, [sp, #20]
 800573e:	f7ff f9cb 	bl	8004ad8 <__lshift>
 8005742:	901a      	str	r0, [sp, #104]	@ 0x68
 8005744:	2800      	cmp	r0, #0
 8005746:	d1d9      	bne.n	80056fc <_strtod_l+0x73c>
 8005748:	e655      	b.n	80053f6 <_strtod_l+0x436>
 800574a:	2e00      	cmp	r6, #0
 800574c:	dd07      	ble.n	800575e <_strtod_l+0x79e>
 800574e:	4649      	mov	r1, r9
 8005750:	4632      	mov	r2, r6
 8005752:	9805      	ldr	r0, [sp, #20]
 8005754:	f7ff f9c0 	bl	8004ad8 <__lshift>
 8005758:	4681      	mov	r9, r0
 800575a:	2800      	cmp	r0, #0
 800575c:	d0d8      	beq.n	8005710 <_strtod_l+0x750>
 800575e:	2f00      	cmp	r7, #0
 8005760:	dd08      	ble.n	8005774 <_strtod_l+0x7b4>
 8005762:	4641      	mov	r1, r8
 8005764:	463a      	mov	r2, r7
 8005766:	9805      	ldr	r0, [sp, #20]
 8005768:	f7ff f9b6 	bl	8004ad8 <__lshift>
 800576c:	4680      	mov	r8, r0
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f ae41 	beq.w	80053f6 <_strtod_l+0x436>
 8005774:	464a      	mov	r2, r9
 8005776:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005778:	9805      	ldr	r0, [sp, #20]
 800577a:	f7ff fa35 	bl	8004be8 <__mdiff>
 800577e:	4604      	mov	r4, r0
 8005780:	2800      	cmp	r0, #0
 8005782:	f43f ae38 	beq.w	80053f6 <_strtod_l+0x436>
 8005786:	68c3      	ldr	r3, [r0, #12]
 8005788:	4641      	mov	r1, r8
 800578a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800578c:	2300      	movs	r3, #0
 800578e:	60c3      	str	r3, [r0, #12]
 8005790:	f7ff fa0e 	bl	8004bb0 <__mcmp>
 8005794:	2800      	cmp	r0, #0
 8005796:	da45      	bge.n	8005824 <_strtod_l+0x864>
 8005798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800579a:	ea53 030a 	orrs.w	r3, r3, sl
 800579e:	d16b      	bne.n	8005878 <_strtod_l+0x8b8>
 80057a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d167      	bne.n	8005878 <_strtod_l+0x8b8>
 80057a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80057ac:	0d1b      	lsrs	r3, r3, #20
 80057ae:	051b      	lsls	r3, r3, #20
 80057b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80057b4:	d960      	bls.n	8005878 <_strtod_l+0x8b8>
 80057b6:	6963      	ldr	r3, [r4, #20]
 80057b8:	b913      	cbnz	r3, 80057c0 <_strtod_l+0x800>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	dd5b      	ble.n	8005878 <_strtod_l+0x8b8>
 80057c0:	4621      	mov	r1, r4
 80057c2:	2201      	movs	r2, #1
 80057c4:	9805      	ldr	r0, [sp, #20]
 80057c6:	f7ff f987 	bl	8004ad8 <__lshift>
 80057ca:	4641      	mov	r1, r8
 80057cc:	4604      	mov	r4, r0
 80057ce:	f7ff f9ef 	bl	8004bb0 <__mcmp>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	dd50      	ble.n	8005878 <_strtod_l+0x8b8>
 80057d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80057da:	9a08      	ldr	r2, [sp, #32]
 80057dc:	0d1b      	lsrs	r3, r3, #20
 80057de:	051b      	lsls	r3, r3, #20
 80057e0:	2a00      	cmp	r2, #0
 80057e2:	d06a      	beq.n	80058ba <_strtod_l+0x8fa>
 80057e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80057e8:	d867      	bhi.n	80058ba <_strtod_l+0x8fa>
 80057ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80057ee:	f67f ae98 	bls.w	8005522 <_strtod_l+0x562>
 80057f2:	4650      	mov	r0, sl
 80057f4:	4659      	mov	r1, fp
 80057f6:	4b09      	ldr	r3, [pc, #36]	@ (800581c <_strtod_l+0x85c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	f7fa fe6d 	bl	80004d8 <__aeabi_dmul>
 80057fe:	4b08      	ldr	r3, [pc, #32]	@ (8005820 <_strtod_l+0x860>)
 8005800:	4682      	mov	sl, r0
 8005802:	400b      	ands	r3, r1
 8005804:	468b      	mov	fp, r1
 8005806:	2b00      	cmp	r3, #0
 8005808:	f47f ae00 	bne.w	800540c <_strtod_l+0x44c>
 800580c:	2322      	movs	r3, #34	@ 0x22
 800580e:	9a05      	ldr	r2, [sp, #20]
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e5fb      	b.n	800540c <_strtod_l+0x44c>
 8005814:	08007090 	.word	0x08007090
 8005818:	fffffc02 	.word	0xfffffc02
 800581c:	39500000 	.word	0x39500000
 8005820:	7ff00000 	.word	0x7ff00000
 8005824:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005828:	d165      	bne.n	80058f6 <_strtod_l+0x936>
 800582a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800582c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005830:	b35a      	cbz	r2, 800588a <_strtod_l+0x8ca>
 8005832:	4a99      	ldr	r2, [pc, #612]	@ (8005a98 <_strtod_l+0xad8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d12b      	bne.n	8005890 <_strtod_l+0x8d0>
 8005838:	9b08      	ldr	r3, [sp, #32]
 800583a:	4651      	mov	r1, sl
 800583c:	b303      	cbz	r3, 8005880 <_strtod_l+0x8c0>
 800583e:	465a      	mov	r2, fp
 8005840:	4b96      	ldr	r3, [pc, #600]	@ (8005a9c <_strtod_l+0xadc>)
 8005842:	4013      	ands	r3, r2
 8005844:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005848:	f04f 32ff 	mov.w	r2, #4294967295
 800584c:	d81b      	bhi.n	8005886 <_strtod_l+0x8c6>
 800584e:	0d1b      	lsrs	r3, r3, #20
 8005850:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	4299      	cmp	r1, r3
 800585a:	d119      	bne.n	8005890 <_strtod_l+0x8d0>
 800585c:	4b90      	ldr	r3, [pc, #576]	@ (8005aa0 <_strtod_l+0xae0>)
 800585e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005860:	429a      	cmp	r2, r3
 8005862:	d102      	bne.n	800586a <_strtod_l+0x8aa>
 8005864:	3101      	adds	r1, #1
 8005866:	f43f adc6 	beq.w	80053f6 <_strtod_l+0x436>
 800586a:	f04f 0a00 	mov.w	sl, #0
 800586e:	4b8b      	ldr	r3, [pc, #556]	@ (8005a9c <_strtod_l+0xadc>)
 8005870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005872:	401a      	ands	r2, r3
 8005874:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005878:	9b08      	ldr	r3, [sp, #32]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1b9      	bne.n	80057f2 <_strtod_l+0x832>
 800587e:	e5c5      	b.n	800540c <_strtod_l+0x44c>
 8005880:	f04f 33ff 	mov.w	r3, #4294967295
 8005884:	e7e8      	b.n	8005858 <_strtod_l+0x898>
 8005886:	4613      	mov	r3, r2
 8005888:	e7e6      	b.n	8005858 <_strtod_l+0x898>
 800588a:	ea53 030a 	orrs.w	r3, r3, sl
 800588e:	d0a2      	beq.n	80057d6 <_strtod_l+0x816>
 8005890:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005892:	b1db      	cbz	r3, 80058cc <_strtod_l+0x90c>
 8005894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005896:	4213      	tst	r3, r2
 8005898:	d0ee      	beq.n	8005878 <_strtod_l+0x8b8>
 800589a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800589c:	4650      	mov	r0, sl
 800589e:	4659      	mov	r1, fp
 80058a0:	9a08      	ldr	r2, [sp, #32]
 80058a2:	b1bb      	cbz	r3, 80058d4 <_strtod_l+0x914>
 80058a4:	f7ff fb68 	bl	8004f78 <sulp>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058b0:	f7fa fc5c 	bl	800016c <__adddf3>
 80058b4:	4682      	mov	sl, r0
 80058b6:	468b      	mov	fp, r1
 80058b8:	e7de      	b.n	8005878 <_strtod_l+0x8b8>
 80058ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80058be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80058c2:	f04f 3aff 	mov.w	sl, #4294967295
 80058c6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80058ca:	e7d5      	b.n	8005878 <_strtod_l+0x8b8>
 80058cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058ce:	ea13 0f0a 	tst.w	r3, sl
 80058d2:	e7e1      	b.n	8005898 <_strtod_l+0x8d8>
 80058d4:	f7ff fb50 	bl	8004f78 <sulp>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058e0:	f7fa fc42 	bl	8000168 <__aeabi_dsub>
 80058e4:	2200      	movs	r2, #0
 80058e6:	2300      	movs	r3, #0
 80058e8:	4682      	mov	sl, r0
 80058ea:	468b      	mov	fp, r1
 80058ec:	f7fb f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0c1      	beq.n	8005878 <_strtod_l+0x8b8>
 80058f4:	e615      	b.n	8005522 <_strtod_l+0x562>
 80058f6:	4641      	mov	r1, r8
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7ff fac9 	bl	8004e90 <__ratio>
 80058fe:	2200      	movs	r2, #0
 8005900:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005904:	4606      	mov	r6, r0
 8005906:	460f      	mov	r7, r1
 8005908:	f7fb f862 	bl	80009d0 <__aeabi_dcmple>
 800590c:	2800      	cmp	r0, #0
 800590e:	d06d      	beq.n	80059ec <_strtod_l+0xa2c>
 8005910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d178      	bne.n	8005a08 <_strtod_l+0xa48>
 8005916:	f1ba 0f00 	cmp.w	sl, #0
 800591a:	d156      	bne.n	80059ca <_strtod_l+0xa0a>
 800591c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800591e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005922:	2b00      	cmp	r3, #0
 8005924:	d158      	bne.n	80059d8 <_strtod_l+0xa18>
 8005926:	2200      	movs	r2, #0
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	4b5d      	ldr	r3, [pc, #372]	@ (8005aa4 <_strtod_l+0xae4>)
 800592e:	f7fb f845 	bl	80009bc <__aeabi_dcmplt>
 8005932:	2800      	cmp	r0, #0
 8005934:	d157      	bne.n	80059e6 <_strtod_l+0xa26>
 8005936:	4630      	mov	r0, r6
 8005938:	4639      	mov	r1, r7
 800593a:	2200      	movs	r2, #0
 800593c:	4b5a      	ldr	r3, [pc, #360]	@ (8005aa8 <_strtod_l+0xae8>)
 800593e:	f7fa fdcb 	bl	80004d8 <__aeabi_dmul>
 8005942:	4606      	mov	r6, r0
 8005944:	460f      	mov	r7, r1
 8005946:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800594a:	9606      	str	r6, [sp, #24]
 800594c:	9307      	str	r3, [sp, #28]
 800594e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005952:	4d52      	ldr	r5, [pc, #328]	@ (8005a9c <_strtod_l+0xadc>)
 8005954:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800595a:	401d      	ands	r5, r3
 800595c:	4b53      	ldr	r3, [pc, #332]	@ (8005aac <_strtod_l+0xaec>)
 800595e:	429d      	cmp	r5, r3
 8005960:	f040 80aa 	bne.w	8005ab8 <_strtod_l+0xaf8>
 8005964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005966:	4650      	mov	r0, sl
 8005968:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800596c:	4659      	mov	r1, fp
 800596e:	f7ff f9cf 	bl	8004d10 <__ulp>
 8005972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005976:	f7fa fdaf 	bl	80004d8 <__aeabi_dmul>
 800597a:	4652      	mov	r2, sl
 800597c:	465b      	mov	r3, fp
 800597e:	f7fa fbf5 	bl	800016c <__adddf3>
 8005982:	460b      	mov	r3, r1
 8005984:	4945      	ldr	r1, [pc, #276]	@ (8005a9c <_strtod_l+0xadc>)
 8005986:	4a4a      	ldr	r2, [pc, #296]	@ (8005ab0 <_strtod_l+0xaf0>)
 8005988:	4019      	ands	r1, r3
 800598a:	4291      	cmp	r1, r2
 800598c:	4682      	mov	sl, r0
 800598e:	d942      	bls.n	8005a16 <_strtod_l+0xa56>
 8005990:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005992:	4b43      	ldr	r3, [pc, #268]	@ (8005aa0 <_strtod_l+0xae0>)
 8005994:	429a      	cmp	r2, r3
 8005996:	d103      	bne.n	80059a0 <_strtod_l+0x9e0>
 8005998:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800599a:	3301      	adds	r3, #1
 800599c:	f43f ad2b 	beq.w	80053f6 <_strtod_l+0x436>
 80059a0:	f04f 3aff 	mov.w	sl, #4294967295
 80059a4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005aa0 <_strtod_l+0xae0>
 80059a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80059aa:	9805      	ldr	r0, [sp, #20]
 80059ac:	f7fe fe7e 	bl	80046ac <_Bfree>
 80059b0:	4649      	mov	r1, r9
 80059b2:	9805      	ldr	r0, [sp, #20]
 80059b4:	f7fe fe7a 	bl	80046ac <_Bfree>
 80059b8:	4641      	mov	r1, r8
 80059ba:	9805      	ldr	r0, [sp, #20]
 80059bc:	f7fe fe76 	bl	80046ac <_Bfree>
 80059c0:	4621      	mov	r1, r4
 80059c2:	9805      	ldr	r0, [sp, #20]
 80059c4:	f7fe fe72 	bl	80046ac <_Bfree>
 80059c8:	e618      	b.n	80055fc <_strtod_l+0x63c>
 80059ca:	f1ba 0f01 	cmp.w	sl, #1
 80059ce:	d103      	bne.n	80059d8 <_strtod_l+0xa18>
 80059d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f43f ada5 	beq.w	8005522 <_strtod_l+0x562>
 80059d8:	2200      	movs	r2, #0
 80059da:	4b36      	ldr	r3, [pc, #216]	@ (8005ab4 <_strtod_l+0xaf4>)
 80059dc:	2600      	movs	r6, #0
 80059de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80059e2:	4f30      	ldr	r7, [pc, #192]	@ (8005aa4 <_strtod_l+0xae4>)
 80059e4:	e7b3      	b.n	800594e <_strtod_l+0x98e>
 80059e6:	2600      	movs	r6, #0
 80059e8:	4f2f      	ldr	r7, [pc, #188]	@ (8005aa8 <_strtod_l+0xae8>)
 80059ea:	e7ac      	b.n	8005946 <_strtod_l+0x986>
 80059ec:	4630      	mov	r0, r6
 80059ee:	4639      	mov	r1, r7
 80059f0:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa8 <_strtod_l+0xae8>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	f7fa fd70 	bl	80004d8 <__aeabi_dmul>
 80059f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059fa:	4606      	mov	r6, r0
 80059fc:	460f      	mov	r7, r1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0a1      	beq.n	8005946 <_strtod_l+0x986>
 8005a02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005a06:	e7a2      	b.n	800594e <_strtod_l+0x98e>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <_strtod_l+0xae4>)
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	461f      	mov	r7, r3
 8005a10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a14:	e79b      	b.n	800594e <_strtod_l+0x98e>
 8005a16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005a1a:	9b08      	ldr	r3, [sp, #32]
 8005a1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1c1      	bne.n	80059a8 <_strtod_l+0x9e8>
 8005a24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a28:	0d1b      	lsrs	r3, r3, #20
 8005a2a:	051b      	lsls	r3, r3, #20
 8005a2c:	429d      	cmp	r5, r3
 8005a2e:	d1bb      	bne.n	80059a8 <_strtod_l+0x9e8>
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fb f898 	bl	8000b68 <__aeabi_d2lz>
 8005a38:	f7fa fd20 	bl	800047c <__aeabi_l2d>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4630      	mov	r0, r6
 8005a42:	4639      	mov	r1, r7
 8005a44:	f7fa fb90 	bl	8000168 <__aeabi_dsub>
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005a50:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a56:	ea46 060a 	orr.w	r6, r6, sl
 8005a5a:	431e      	orrs	r6, r3
 8005a5c:	d069      	beq.n	8005b32 <_strtod_l+0xb72>
 8005a5e:	a30a      	add	r3, pc, #40	@ (adr r3, 8005a88 <_strtod_l+0xac8>)
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f7fa ffaa 	bl	80009bc <__aeabi_dcmplt>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f47f accf 	bne.w	800540c <_strtod_l+0x44c>
 8005a6e:	a308      	add	r3, pc, #32	@ (adr r3, 8005a90 <_strtod_l+0xad0>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a78:	f7fa ffbe 	bl	80009f8 <__aeabi_dcmpgt>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d093      	beq.n	80059a8 <_strtod_l+0x9e8>
 8005a80:	e4c4      	b.n	800540c <_strtod_l+0x44c>
 8005a82:	bf00      	nop
 8005a84:	f3af 8000 	nop.w
 8005a88:	94a03595 	.word	0x94a03595
 8005a8c:	3fdfffff 	.word	0x3fdfffff
 8005a90:	35afe535 	.word	0x35afe535
 8005a94:	3fe00000 	.word	0x3fe00000
 8005a98:	000fffff 	.word	0x000fffff
 8005a9c:	7ff00000 	.word	0x7ff00000
 8005aa0:	7fefffff 	.word	0x7fefffff
 8005aa4:	3ff00000 	.word	0x3ff00000
 8005aa8:	3fe00000 	.word	0x3fe00000
 8005aac:	7fe00000 	.word	0x7fe00000
 8005ab0:	7c9fffff 	.word	0x7c9fffff
 8005ab4:	bff00000 	.word	0xbff00000
 8005ab8:	9b08      	ldr	r3, [sp, #32]
 8005aba:	b323      	cbz	r3, 8005b06 <_strtod_l+0xb46>
 8005abc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005ac0:	d821      	bhi.n	8005b06 <_strtod_l+0xb46>
 8005ac2:	a327      	add	r3, pc, #156	@ (adr r3, 8005b60 <_strtod_l+0xba0>)
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	4630      	mov	r0, r6
 8005aca:	4639      	mov	r1, r7
 8005acc:	f7fa ff80 	bl	80009d0 <__aeabi_dcmple>
 8005ad0:	b1a0      	cbz	r0, 8005afc <_strtod_l+0xb3c>
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7fa ffd7 	bl	8000a88 <__aeabi_d2uiz>
 8005ada:	2801      	cmp	r0, #1
 8005adc:	bf38      	it	cc
 8005ade:	2001      	movcc	r0, #1
 8005ae0:	f7fa fc80 	bl	80003e4 <__aeabi_ui2d>
 8005ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	460f      	mov	r7, r1
 8005aea:	b9fb      	cbnz	r3, 8005b2c <_strtod_l+0xb6c>
 8005aec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005af0:	9014      	str	r0, [sp, #80]	@ 0x50
 8005af2:	9315      	str	r3, [sp, #84]	@ 0x54
 8005af4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005af8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005afc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005afe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005b02:	1b5b      	subs	r3, r3, r5
 8005b04:	9311      	str	r3, [sp, #68]	@ 0x44
 8005b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b0a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005b0e:	f7ff f8ff 	bl	8004d10 <__ulp>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4650      	mov	r0, sl
 8005b18:	4659      	mov	r1, fp
 8005b1a:	f7fa fcdd 	bl	80004d8 <__aeabi_dmul>
 8005b1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005b22:	f7fa fb23 	bl	800016c <__adddf3>
 8005b26:	4682      	mov	sl, r0
 8005b28:	468b      	mov	fp, r1
 8005b2a:	e776      	b.n	8005a1a <_strtod_l+0xa5a>
 8005b2c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005b30:	e7e0      	b.n	8005af4 <_strtod_l+0xb34>
 8005b32:	a30d      	add	r3, pc, #52	@ (adr r3, 8005b68 <_strtod_l+0xba8>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f7fa ff40 	bl	80009bc <__aeabi_dcmplt>
 8005b3c:	e79e      	b.n	8005a7c <_strtod_l+0xabc>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b44:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	f7ff ba77 	b.w	800503a <_strtod_l+0x7a>
 8005b4c:	2a65      	cmp	r2, #101	@ 0x65
 8005b4e:	f43f ab6e 	beq.w	800522e <_strtod_l+0x26e>
 8005b52:	2a45      	cmp	r2, #69	@ 0x45
 8005b54:	f43f ab6b 	beq.w	800522e <_strtod_l+0x26e>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f7ff bba6 	b.w	80052aa <_strtod_l+0x2ea>
 8005b5e:	bf00      	nop
 8005b60:	ffc00000 	.word	0xffc00000
 8005b64:	41dfffff 	.word	0x41dfffff
 8005b68:	94a03595 	.word	0x94a03595
 8005b6c:	3fcfffff 	.word	0x3fcfffff

08005b70 <_strtod_r>:
 8005b70:	4b01      	ldr	r3, [pc, #4]	@ (8005b78 <_strtod_r+0x8>)
 8005b72:	f7ff ba25 	b.w	8004fc0 <_strtod_l>
 8005b76:	bf00      	nop
 8005b78:	2000007c 	.word	0x2000007c

08005b7c <_strtol_l.constprop.0>:
 8005b7c:	2b24      	cmp	r3, #36	@ 0x24
 8005b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b82:	4686      	mov	lr, r0
 8005b84:	4690      	mov	r8, r2
 8005b86:	d801      	bhi.n	8005b8c <_strtol_l.constprop.0+0x10>
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d106      	bne.n	8005b9a <_strtol_l.constprop.0+0x1e>
 8005b8c:	f7fd fdc0 	bl	8003710 <__errno>
 8005b90:	2316      	movs	r3, #22
 8005b92:	6003      	str	r3, [r0, #0]
 8005b94:	2000      	movs	r0, #0
 8005b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9a:	460d      	mov	r5, r1
 8005b9c:	4833      	ldr	r0, [pc, #204]	@ (8005c6c <_strtol_l.constprop.0+0xf0>)
 8005b9e:	462a      	mov	r2, r5
 8005ba0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ba4:	5d06      	ldrb	r6, [r0, r4]
 8005ba6:	f016 0608 	ands.w	r6, r6, #8
 8005baa:	d1f8      	bne.n	8005b9e <_strtol_l.constprop.0+0x22>
 8005bac:	2c2d      	cmp	r4, #45	@ 0x2d
 8005bae:	d12d      	bne.n	8005c0c <_strtol_l.constprop.0+0x90>
 8005bb0:	2601      	movs	r6, #1
 8005bb2:	782c      	ldrb	r4, [r5, #0]
 8005bb4:	1c95      	adds	r5, r2, #2
 8005bb6:	f033 0210 	bics.w	r2, r3, #16
 8005bba:	d109      	bne.n	8005bd0 <_strtol_l.constprop.0+0x54>
 8005bbc:	2c30      	cmp	r4, #48	@ 0x30
 8005bbe:	d12a      	bne.n	8005c16 <_strtol_l.constprop.0+0x9a>
 8005bc0:	782a      	ldrb	r2, [r5, #0]
 8005bc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005bc6:	2a58      	cmp	r2, #88	@ 0x58
 8005bc8:	d125      	bne.n	8005c16 <_strtol_l.constprop.0+0x9a>
 8005bca:	2310      	movs	r3, #16
 8005bcc:	786c      	ldrb	r4, [r5, #1]
 8005bce:	3502      	adds	r5, #2
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005bd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005bda:	fbbc f9f3 	udiv	r9, ip, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005be4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005be8:	2f09      	cmp	r7, #9
 8005bea:	d81b      	bhi.n	8005c24 <_strtol_l.constprop.0+0xa8>
 8005bec:	463c      	mov	r4, r7
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	dd27      	ble.n	8005c42 <_strtol_l.constprop.0+0xc6>
 8005bf2:	1c57      	adds	r7, r2, #1
 8005bf4:	d007      	beq.n	8005c06 <_strtol_l.constprop.0+0x8a>
 8005bf6:	4581      	cmp	r9, r0
 8005bf8:	d320      	bcc.n	8005c3c <_strtol_l.constprop.0+0xc0>
 8005bfa:	d101      	bne.n	8005c00 <_strtol_l.constprop.0+0x84>
 8005bfc:	45a2      	cmp	sl, r4
 8005bfe:	db1d      	blt.n	8005c3c <_strtol_l.constprop.0+0xc0>
 8005c00:	2201      	movs	r2, #1
 8005c02:	fb00 4003 	mla	r0, r0, r3, r4
 8005c06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c0a:	e7eb      	b.n	8005be4 <_strtol_l.constprop.0+0x68>
 8005c0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c0e:	bf04      	itt	eq
 8005c10:	782c      	ldrbeq	r4, [r5, #0]
 8005c12:	1c95      	addeq	r5, r2, #2
 8005c14:	e7cf      	b.n	8005bb6 <_strtol_l.constprop.0+0x3a>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1da      	bne.n	8005bd0 <_strtol_l.constprop.0+0x54>
 8005c1a:	2c30      	cmp	r4, #48	@ 0x30
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2308      	moveq	r3, #8
 8005c20:	230a      	movne	r3, #10
 8005c22:	e7d5      	b.n	8005bd0 <_strtol_l.constprop.0+0x54>
 8005c24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005c28:	2f19      	cmp	r7, #25
 8005c2a:	d801      	bhi.n	8005c30 <_strtol_l.constprop.0+0xb4>
 8005c2c:	3c37      	subs	r4, #55	@ 0x37
 8005c2e:	e7de      	b.n	8005bee <_strtol_l.constprop.0+0x72>
 8005c30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005c34:	2f19      	cmp	r7, #25
 8005c36:	d804      	bhi.n	8005c42 <_strtol_l.constprop.0+0xc6>
 8005c38:	3c57      	subs	r4, #87	@ 0x57
 8005c3a:	e7d8      	b.n	8005bee <_strtol_l.constprop.0+0x72>
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	e7e1      	b.n	8005c06 <_strtol_l.constprop.0+0x8a>
 8005c42:	1c53      	adds	r3, r2, #1
 8005c44:	d108      	bne.n	8005c58 <_strtol_l.constprop.0+0xdc>
 8005c46:	2322      	movs	r3, #34	@ 0x22
 8005c48:	4660      	mov	r0, ip
 8005c4a:	f8ce 3000 	str.w	r3, [lr]
 8005c4e:	f1b8 0f00 	cmp.w	r8, #0
 8005c52:	d0a0      	beq.n	8005b96 <_strtol_l.constprop.0+0x1a>
 8005c54:	1e69      	subs	r1, r5, #1
 8005c56:	e006      	b.n	8005c66 <_strtol_l.constprop.0+0xea>
 8005c58:	b106      	cbz	r6, 8005c5c <_strtol_l.constprop.0+0xe0>
 8005c5a:	4240      	negs	r0, r0
 8005c5c:	f1b8 0f00 	cmp.w	r8, #0
 8005c60:	d099      	beq.n	8005b96 <_strtol_l.constprop.0+0x1a>
 8005c62:	2a00      	cmp	r2, #0
 8005c64:	d1f6      	bne.n	8005c54 <_strtol_l.constprop.0+0xd8>
 8005c66:	f8c8 1000 	str.w	r1, [r8]
 8005c6a:	e794      	b.n	8005b96 <_strtol_l.constprop.0+0x1a>
 8005c6c:	080070b9 	.word	0x080070b9

08005c70 <_strtol_r>:
 8005c70:	f7ff bf84 	b.w	8005b7c <_strtol_l.constprop.0>

08005c74 <__ssputs_r>:
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	461f      	mov	r7, r3
 8005c7a:	688e      	ldr	r6, [r1, #8]
 8005c7c:	4682      	mov	sl, r0
 8005c7e:	42be      	cmp	r6, r7
 8005c80:	460c      	mov	r4, r1
 8005c82:	4690      	mov	r8, r2
 8005c84:	680b      	ldr	r3, [r1, #0]
 8005c86:	d82d      	bhi.n	8005ce4 <__ssputs_r+0x70>
 8005c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c90:	d026      	beq.n	8005ce0 <__ssputs_r+0x6c>
 8005c92:	6965      	ldr	r5, [r4, #20]
 8005c94:	6909      	ldr	r1, [r1, #16]
 8005c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c9a:	eba3 0901 	sub.w	r9, r3, r1
 8005c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ca2:	1c7b      	adds	r3, r7, #1
 8005ca4:	444b      	add	r3, r9
 8005ca6:	106d      	asrs	r5, r5, #1
 8005ca8:	429d      	cmp	r5, r3
 8005caa:	bf38      	it	cc
 8005cac:	461d      	movcc	r5, r3
 8005cae:	0553      	lsls	r3, r2, #21
 8005cb0:	d527      	bpl.n	8005d02 <__ssputs_r+0x8e>
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	f7fe fc2e 	bl	8004514 <_malloc_r>
 8005cb8:	4606      	mov	r6, r0
 8005cba:	b360      	cbz	r0, 8005d16 <__ssputs_r+0xa2>
 8005cbc:	464a      	mov	r2, r9
 8005cbe:	6921      	ldr	r1, [r4, #16]
 8005cc0:	f000 fa14 	bl	80060ec <memcpy>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	6126      	str	r6, [r4, #16]
 8005cd2:	444e      	add	r6, r9
 8005cd4:	6026      	str	r6, [r4, #0]
 8005cd6:	463e      	mov	r6, r7
 8005cd8:	6165      	str	r5, [r4, #20]
 8005cda:	eba5 0509 	sub.w	r5, r5, r9
 8005cde:	60a5      	str	r5, [r4, #8]
 8005ce0:	42be      	cmp	r6, r7
 8005ce2:	d900      	bls.n	8005ce6 <__ssputs_r+0x72>
 8005ce4:	463e      	mov	r6, r7
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	4641      	mov	r1, r8
 8005cea:	6820      	ldr	r0, [r4, #0]
 8005cec:	f000 f9c2 	bl	8006074 <memmove>
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	1b9b      	subs	r3, r3, r6
 8005cf6:	60a3      	str	r3, [r4, #8]
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	4433      	add	r3, r6
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d02:	462a      	mov	r2, r5
 8005d04:	f000 fd83 	bl	800680e <_realloc_r>
 8005d08:	4606      	mov	r6, r0
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d1e0      	bne.n	8005cd0 <__ssputs_r+0x5c>
 8005d0e:	4650      	mov	r0, sl
 8005d10:	6921      	ldr	r1, [r4, #16]
 8005d12:	f7fe fb8d 	bl	8004430 <_free_r>
 8005d16:	230c      	movs	r3, #12
 8005d18:	f8ca 3000 	str.w	r3, [sl]
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	e7e9      	b.n	8005cfe <__ssputs_r+0x8a>
	...

08005d2c <_svfiprintf_r>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	4698      	mov	r8, r3
 8005d32:	898b      	ldrh	r3, [r1, #12]
 8005d34:	4607      	mov	r7, r0
 8005d36:	061b      	lsls	r3, r3, #24
 8005d38:	460d      	mov	r5, r1
 8005d3a:	4614      	mov	r4, r2
 8005d3c:	b09d      	sub	sp, #116	@ 0x74
 8005d3e:	d510      	bpl.n	8005d62 <_svfiprintf_r+0x36>
 8005d40:	690b      	ldr	r3, [r1, #16]
 8005d42:	b973      	cbnz	r3, 8005d62 <_svfiprintf_r+0x36>
 8005d44:	2140      	movs	r1, #64	@ 0x40
 8005d46:	f7fe fbe5 	bl	8004514 <_malloc_r>
 8005d4a:	6028      	str	r0, [r5, #0]
 8005d4c:	6128      	str	r0, [r5, #16]
 8005d4e:	b930      	cbnz	r0, 8005d5e <_svfiprintf_r+0x32>
 8005d50:	230c      	movs	r3, #12
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	f04f 30ff 	mov.w	r0, #4294967295
 8005d58:	b01d      	add	sp, #116	@ 0x74
 8005d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5e:	2340      	movs	r3, #64	@ 0x40
 8005d60:	616b      	str	r3, [r5, #20]
 8005d62:	2300      	movs	r3, #0
 8005d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d66:	2320      	movs	r3, #32
 8005d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d6c:	2330      	movs	r3, #48	@ 0x30
 8005d6e:	f04f 0901 	mov.w	r9, #1
 8005d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d76:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005f10 <_svfiprintf_r+0x1e4>
 8005d7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d7e:	4623      	mov	r3, r4
 8005d80:	469a      	mov	sl, r3
 8005d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d86:	b10a      	cbz	r2, 8005d8c <_svfiprintf_r+0x60>
 8005d88:	2a25      	cmp	r2, #37	@ 0x25
 8005d8a:	d1f9      	bne.n	8005d80 <_svfiprintf_r+0x54>
 8005d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d90:	d00b      	beq.n	8005daa <_svfiprintf_r+0x7e>
 8005d92:	465b      	mov	r3, fp
 8005d94:	4622      	mov	r2, r4
 8005d96:	4629      	mov	r1, r5
 8005d98:	4638      	mov	r0, r7
 8005d9a:	f7ff ff6b 	bl	8005c74 <__ssputs_r>
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f000 80a7 	beq.w	8005ef2 <_svfiprintf_r+0x1c6>
 8005da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005da6:	445a      	add	r2, fp
 8005da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005daa:	f89a 3000 	ldrb.w	r3, [sl]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 809f 	beq.w	8005ef2 <_svfiprintf_r+0x1c6>
 8005db4:	2300      	movs	r3, #0
 8005db6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dbe:	f10a 0a01 	add.w	sl, sl, #1
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	9307      	str	r3, [sp, #28]
 8005dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dcc:	4654      	mov	r4, sl
 8005dce:	2205      	movs	r2, #5
 8005dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd4:	484e      	ldr	r0, [pc, #312]	@ (8005f10 <_svfiprintf_r+0x1e4>)
 8005dd6:	f7fd fcc8 	bl	800376a <memchr>
 8005dda:	9a04      	ldr	r2, [sp, #16]
 8005ddc:	b9d8      	cbnz	r0, 8005e16 <_svfiprintf_r+0xea>
 8005dde:	06d0      	lsls	r0, r2, #27
 8005de0:	bf44      	itt	mi
 8005de2:	2320      	movmi	r3, #32
 8005de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005de8:	0711      	lsls	r1, r2, #28
 8005dea:	bf44      	itt	mi
 8005dec:	232b      	movmi	r3, #43	@ 0x2b
 8005dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005df2:	f89a 3000 	ldrb.w	r3, [sl]
 8005df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005df8:	d015      	beq.n	8005e26 <_svfiprintf_r+0xfa>
 8005dfa:	4654      	mov	r4, sl
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	f04f 0c0a 	mov.w	ip, #10
 8005e02:	9a07      	ldr	r2, [sp, #28]
 8005e04:	4621      	mov	r1, r4
 8005e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e0a:	3b30      	subs	r3, #48	@ 0x30
 8005e0c:	2b09      	cmp	r3, #9
 8005e0e:	d94b      	bls.n	8005ea8 <_svfiprintf_r+0x17c>
 8005e10:	b1b0      	cbz	r0, 8005e40 <_svfiprintf_r+0x114>
 8005e12:	9207      	str	r2, [sp, #28]
 8005e14:	e014      	b.n	8005e40 <_svfiprintf_r+0x114>
 8005e16:	eba0 0308 	sub.w	r3, r0, r8
 8005e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	46a2      	mov	sl, r4
 8005e22:	9304      	str	r3, [sp, #16]
 8005e24:	e7d2      	b.n	8005dcc <_svfiprintf_r+0xa0>
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	1d19      	adds	r1, r3, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	9103      	str	r1, [sp, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bfbb      	ittet	lt
 8005e32:	425b      	neglt	r3, r3
 8005e34:	f042 0202 	orrlt.w	r2, r2, #2
 8005e38:	9307      	strge	r3, [sp, #28]
 8005e3a:	9307      	strlt	r3, [sp, #28]
 8005e3c:	bfb8      	it	lt
 8005e3e:	9204      	strlt	r2, [sp, #16]
 8005e40:	7823      	ldrb	r3, [r4, #0]
 8005e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e44:	d10a      	bne.n	8005e5c <_svfiprintf_r+0x130>
 8005e46:	7863      	ldrb	r3, [r4, #1]
 8005e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e4a:	d132      	bne.n	8005eb2 <_svfiprintf_r+0x186>
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	3402      	adds	r4, #2
 8005e50:	1d1a      	adds	r2, r3, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	9203      	str	r2, [sp, #12]
 8005e56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e5a:	9305      	str	r3, [sp, #20]
 8005e5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005f14 <_svfiprintf_r+0x1e8>
 8005e60:	2203      	movs	r2, #3
 8005e62:	4650      	mov	r0, sl
 8005e64:	7821      	ldrb	r1, [r4, #0]
 8005e66:	f7fd fc80 	bl	800376a <memchr>
 8005e6a:	b138      	cbz	r0, 8005e7c <_svfiprintf_r+0x150>
 8005e6c:	2240      	movs	r2, #64	@ 0x40
 8005e6e:	9b04      	ldr	r3, [sp, #16]
 8005e70:	eba0 000a 	sub.w	r0, r0, sl
 8005e74:	4082      	lsls	r2, r0
 8005e76:	4313      	orrs	r3, r2
 8005e78:	3401      	adds	r4, #1
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e80:	2206      	movs	r2, #6
 8005e82:	4825      	ldr	r0, [pc, #148]	@ (8005f18 <_svfiprintf_r+0x1ec>)
 8005e84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e88:	f7fd fc6f 	bl	800376a <memchr>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d036      	beq.n	8005efe <_svfiprintf_r+0x1d2>
 8005e90:	4b22      	ldr	r3, [pc, #136]	@ (8005f1c <_svfiprintf_r+0x1f0>)
 8005e92:	bb1b      	cbnz	r3, 8005edc <_svfiprintf_r+0x1b0>
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	3307      	adds	r3, #7
 8005e98:	f023 0307 	bic.w	r3, r3, #7
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	9303      	str	r3, [sp, #12]
 8005ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea2:	4433      	add	r3, r6
 8005ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea6:	e76a      	b.n	8005d7e <_svfiprintf_r+0x52>
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	2001      	movs	r0, #1
 8005eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eb0:	e7a8      	b.n	8005e04 <_svfiprintf_r+0xd8>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f04f 0c0a 	mov.w	ip, #10
 8005eb8:	4619      	mov	r1, r3
 8005eba:	3401      	adds	r4, #1
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ec4:	3a30      	subs	r2, #48	@ 0x30
 8005ec6:	2a09      	cmp	r2, #9
 8005ec8:	d903      	bls.n	8005ed2 <_svfiprintf_r+0x1a6>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0c6      	beq.n	8005e5c <_svfiprintf_r+0x130>
 8005ece:	9105      	str	r1, [sp, #20]
 8005ed0:	e7c4      	b.n	8005e5c <_svfiprintf_r+0x130>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eda:	e7f0      	b.n	8005ebe <_svfiprintf_r+0x192>
 8005edc:	ab03      	add	r3, sp, #12
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <_svfiprintf_r+0x1f4>)
 8005ee6:	a904      	add	r1, sp, #16
 8005ee8:	f7fc fccc 	bl	8002884 <_printf_float>
 8005eec:	1c42      	adds	r2, r0, #1
 8005eee:	4606      	mov	r6, r0
 8005ef0:	d1d6      	bne.n	8005ea0 <_svfiprintf_r+0x174>
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	065b      	lsls	r3, r3, #25
 8005ef6:	f53f af2d 	bmi.w	8005d54 <_svfiprintf_r+0x28>
 8005efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005efc:	e72c      	b.n	8005d58 <_svfiprintf_r+0x2c>
 8005efe:	ab03      	add	r3, sp, #12
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	462a      	mov	r2, r5
 8005f04:	4638      	mov	r0, r7
 8005f06:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <_svfiprintf_r+0x1f4>)
 8005f08:	a904      	add	r1, sp, #16
 8005f0a:	f7fc ff59 	bl	8002dc0 <_printf_i>
 8005f0e:	e7ed      	b.n	8005eec <_svfiprintf_r+0x1c0>
 8005f10:	080071b9 	.word	0x080071b9
 8005f14:	080071bf 	.word	0x080071bf
 8005f18:	080071c3 	.word	0x080071c3
 8005f1c:	08002885 	.word	0x08002885
 8005f20:	08005c75 	.word	0x08005c75

08005f24 <__sflush_r>:
 8005f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	0716      	lsls	r6, r2, #28
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	d454      	bmi.n	8005fdc <__sflush_r+0xb8>
 8005f32:	684b      	ldr	r3, [r1, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dc02      	bgt.n	8005f3e <__sflush_r+0x1a>
 8005f38:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dd48      	ble.n	8005fd0 <__sflush_r+0xac>
 8005f3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f40:	2e00      	cmp	r6, #0
 8005f42:	d045      	beq.n	8005fd0 <__sflush_r+0xac>
 8005f44:	2300      	movs	r3, #0
 8005f46:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f4a:	682f      	ldr	r7, [r5, #0]
 8005f4c:	6a21      	ldr	r1, [r4, #32]
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	d030      	beq.n	8005fb4 <__sflush_r+0x90>
 8005f52:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	0759      	lsls	r1, r3, #29
 8005f58:	d505      	bpl.n	8005f66 <__sflush_r+0x42>
 8005f5a:	6863      	ldr	r3, [r4, #4]
 8005f5c:	1ad2      	subs	r2, r2, r3
 8005f5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f60:	b10b      	cbz	r3, 8005f66 <__sflush_r+0x42>
 8005f62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f64:	1ad2      	subs	r2, r2, r3
 8005f66:	2300      	movs	r3, #0
 8005f68:	4628      	mov	r0, r5
 8005f6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f6c:	6a21      	ldr	r1, [r4, #32]
 8005f6e:	47b0      	blx	r6
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	d106      	bne.n	8005f84 <__sflush_r+0x60>
 8005f76:	6829      	ldr	r1, [r5, #0]
 8005f78:	291d      	cmp	r1, #29
 8005f7a:	d82b      	bhi.n	8005fd4 <__sflush_r+0xb0>
 8005f7c:	4a28      	ldr	r2, [pc, #160]	@ (8006020 <__sflush_r+0xfc>)
 8005f7e:	410a      	asrs	r2, r1
 8005f80:	07d6      	lsls	r6, r2, #31
 8005f82:	d427      	bmi.n	8005fd4 <__sflush_r+0xb0>
 8005f84:	2200      	movs	r2, #0
 8005f86:	6062      	str	r2, [r4, #4]
 8005f88:	6922      	ldr	r2, [r4, #16]
 8005f8a:	04d9      	lsls	r1, r3, #19
 8005f8c:	6022      	str	r2, [r4, #0]
 8005f8e:	d504      	bpl.n	8005f9a <__sflush_r+0x76>
 8005f90:	1c42      	adds	r2, r0, #1
 8005f92:	d101      	bne.n	8005f98 <__sflush_r+0x74>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b903      	cbnz	r3, 8005f9a <__sflush_r+0x76>
 8005f98:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f9c:	602f      	str	r7, [r5, #0]
 8005f9e:	b1b9      	cbz	r1, 8005fd0 <__sflush_r+0xac>
 8005fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	d002      	beq.n	8005fae <__sflush_r+0x8a>
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f7fe fa41 	bl	8004430 <_free_r>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fb2:	e00d      	b.n	8005fd0 <__sflush_r+0xac>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b0      	blx	r6
 8005fba:	4602      	mov	r2, r0
 8005fbc:	1c50      	adds	r0, r2, #1
 8005fbe:	d1c9      	bne.n	8005f54 <__sflush_r+0x30>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0c6      	beq.n	8005f54 <__sflush_r+0x30>
 8005fc6:	2b1d      	cmp	r3, #29
 8005fc8:	d001      	beq.n	8005fce <__sflush_r+0xaa>
 8005fca:	2b16      	cmp	r3, #22
 8005fcc:	d11d      	bne.n	800600a <__sflush_r+0xe6>
 8005fce:	602f      	str	r7, [r5, #0]
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e021      	b.n	8006018 <__sflush_r+0xf4>
 8005fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fd8:	b21b      	sxth	r3, r3
 8005fda:	e01a      	b.n	8006012 <__sflush_r+0xee>
 8005fdc:	690f      	ldr	r7, [r1, #16]
 8005fde:	2f00      	cmp	r7, #0
 8005fe0:	d0f6      	beq.n	8005fd0 <__sflush_r+0xac>
 8005fe2:	0793      	lsls	r3, r2, #30
 8005fe4:	bf18      	it	ne
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	680e      	ldr	r6, [r1, #0]
 8005fea:	bf08      	it	eq
 8005fec:	694b      	ldreq	r3, [r1, #20]
 8005fee:	1bf6      	subs	r6, r6, r7
 8005ff0:	600f      	str	r7, [r1, #0]
 8005ff2:	608b      	str	r3, [r1, #8]
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	ddeb      	ble.n	8005fd0 <__sflush_r+0xac>
 8005ff8:	4633      	mov	r3, r6
 8005ffa:	463a      	mov	r2, r7
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	6a21      	ldr	r1, [r4, #32]
 8006000:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006004:	47e0      	blx	ip
 8006006:	2800      	cmp	r0, #0
 8006008:	dc07      	bgt.n	800601a <__sflush_r+0xf6>
 800600a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800600e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006012:	f04f 30ff 	mov.w	r0, #4294967295
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800601a:	4407      	add	r7, r0
 800601c:	1a36      	subs	r6, r6, r0
 800601e:	e7e9      	b.n	8005ff4 <__sflush_r+0xd0>
 8006020:	dfbffffe 	.word	0xdfbffffe

08006024 <_fflush_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	690b      	ldr	r3, [r1, #16]
 8006028:	4605      	mov	r5, r0
 800602a:	460c      	mov	r4, r1
 800602c:	b913      	cbnz	r3, 8006034 <_fflush_r+0x10>
 800602e:	2500      	movs	r5, #0
 8006030:	4628      	mov	r0, r5
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	b118      	cbz	r0, 800603e <_fflush_r+0x1a>
 8006036:	6a03      	ldr	r3, [r0, #32]
 8006038:	b90b      	cbnz	r3, 800603e <_fflush_r+0x1a>
 800603a:	f7fd fa7d 	bl	8003538 <__sinit>
 800603e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f3      	beq.n	800602e <_fflush_r+0xa>
 8006046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006048:	07d0      	lsls	r0, r2, #31
 800604a:	d404      	bmi.n	8006056 <_fflush_r+0x32>
 800604c:	0599      	lsls	r1, r3, #22
 800604e:	d402      	bmi.n	8006056 <_fflush_r+0x32>
 8006050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006052:	f7fd fb88 	bl	8003766 <__retarget_lock_acquire_recursive>
 8006056:	4628      	mov	r0, r5
 8006058:	4621      	mov	r1, r4
 800605a:	f7ff ff63 	bl	8005f24 <__sflush_r>
 800605e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006060:	4605      	mov	r5, r0
 8006062:	07da      	lsls	r2, r3, #31
 8006064:	d4e4      	bmi.n	8006030 <_fflush_r+0xc>
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	059b      	lsls	r3, r3, #22
 800606a:	d4e1      	bmi.n	8006030 <_fflush_r+0xc>
 800606c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800606e:	f7fd fb7b 	bl	8003768 <__retarget_lock_release_recursive>
 8006072:	e7dd      	b.n	8006030 <_fflush_r+0xc>

08006074 <memmove>:
 8006074:	4288      	cmp	r0, r1
 8006076:	b510      	push	{r4, lr}
 8006078:	eb01 0402 	add.w	r4, r1, r2
 800607c:	d902      	bls.n	8006084 <memmove+0x10>
 800607e:	4284      	cmp	r4, r0
 8006080:	4623      	mov	r3, r4
 8006082:	d807      	bhi.n	8006094 <memmove+0x20>
 8006084:	1e43      	subs	r3, r0, #1
 8006086:	42a1      	cmp	r1, r4
 8006088:	d008      	beq.n	800609c <memmove+0x28>
 800608a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800608e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006092:	e7f8      	b.n	8006086 <memmove+0x12>
 8006094:	4601      	mov	r1, r0
 8006096:	4402      	add	r2, r0
 8006098:	428a      	cmp	r2, r1
 800609a:	d100      	bne.n	800609e <memmove+0x2a>
 800609c:	bd10      	pop	{r4, pc}
 800609e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060a6:	e7f7      	b.n	8006098 <memmove+0x24>

080060a8 <strncmp>:
 80060a8:	b510      	push	{r4, lr}
 80060aa:	b16a      	cbz	r2, 80060c8 <strncmp+0x20>
 80060ac:	3901      	subs	r1, #1
 80060ae:	1884      	adds	r4, r0, r2
 80060b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d103      	bne.n	80060c4 <strncmp+0x1c>
 80060bc:	42a0      	cmp	r0, r4
 80060be:	d001      	beq.n	80060c4 <strncmp+0x1c>
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d1f5      	bne.n	80060b0 <strncmp+0x8>
 80060c4:	1ad0      	subs	r0, r2, r3
 80060c6:	bd10      	pop	{r4, pc}
 80060c8:	4610      	mov	r0, r2
 80060ca:	e7fc      	b.n	80060c6 <strncmp+0x1e>

080060cc <_sbrk_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	2300      	movs	r3, #0
 80060d0:	4d05      	ldr	r5, [pc, #20]	@ (80060e8 <_sbrk_r+0x1c>)
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	602b      	str	r3, [r5, #0]
 80060d8:	f7fb fbd8 	bl	800188c <_sbrk>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_sbrk_r+0x1a>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_sbrk_r+0x1a>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	20000348 	.word	0x20000348

080060ec <memcpy>:
 80060ec:	440a      	add	r2, r1
 80060ee:	4291      	cmp	r1, r2
 80060f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060f4:	d100      	bne.n	80060f8 <memcpy+0xc>
 80060f6:	4770      	bx	lr
 80060f8:	b510      	push	{r4, lr}
 80060fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060fe:	4291      	cmp	r1, r2
 8006100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006104:	d1f9      	bne.n	80060fa <memcpy+0xe>
 8006106:	bd10      	pop	{r4, pc}

08006108 <nan>:
 8006108:	2000      	movs	r0, #0
 800610a:	4901      	ldr	r1, [pc, #4]	@ (8006110 <nan+0x8>)
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	7ff80000 	.word	0x7ff80000

08006114 <__assert_func>:
 8006114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006116:	4614      	mov	r4, r2
 8006118:	461a      	mov	r2, r3
 800611a:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <__assert_func+0x2c>)
 800611c:	4605      	mov	r5, r0
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68d8      	ldr	r0, [r3, #12]
 8006122:	b954      	cbnz	r4, 800613a <__assert_func+0x26>
 8006124:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <__assert_func+0x30>)
 8006126:	461c      	mov	r4, r3
 8006128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800612c:	9100      	str	r1, [sp, #0]
 800612e:	462b      	mov	r3, r5
 8006130:	4905      	ldr	r1, [pc, #20]	@ (8006148 <__assert_func+0x34>)
 8006132:	f000 fba7 	bl	8006884 <fiprintf>
 8006136:	f000 fbb7 	bl	80068a8 <abort>
 800613a:	4b04      	ldr	r3, [pc, #16]	@ (800614c <__assert_func+0x38>)
 800613c:	e7f4      	b.n	8006128 <__assert_func+0x14>
 800613e:	bf00      	nop
 8006140:	2000002c 	.word	0x2000002c
 8006144:	0800720d 	.word	0x0800720d
 8006148:	080071df 	.word	0x080071df
 800614c:	080071d2 	.word	0x080071d2

08006150 <_calloc_r>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	fba1 5402 	umull	r5, r4, r1, r2
 8006156:	b93c      	cbnz	r4, 8006168 <_calloc_r+0x18>
 8006158:	4629      	mov	r1, r5
 800615a:	f7fe f9db 	bl	8004514 <_malloc_r>
 800615e:	4606      	mov	r6, r0
 8006160:	b928      	cbnz	r0, 800616e <_calloc_r+0x1e>
 8006162:	2600      	movs	r6, #0
 8006164:	4630      	mov	r0, r6
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	220c      	movs	r2, #12
 800616a:	6002      	str	r2, [r0, #0]
 800616c:	e7f9      	b.n	8006162 <_calloc_r+0x12>
 800616e:	462a      	mov	r2, r5
 8006170:	4621      	mov	r1, r4
 8006172:	f7fd fa7a 	bl	800366a <memset>
 8006176:	e7f5      	b.n	8006164 <_calloc_r+0x14>

08006178 <rshift>:
 8006178:	6903      	ldr	r3, [r0, #16]
 800617a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800617e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006182:	f100 0414 	add.w	r4, r0, #20
 8006186:	ea4f 1261 	mov.w	r2, r1, asr #5
 800618a:	dd46      	ble.n	800621a <rshift+0xa2>
 800618c:	f011 011f 	ands.w	r1, r1, #31
 8006190:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006194:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006198:	d10c      	bne.n	80061b4 <rshift+0x3c>
 800619a:	4629      	mov	r1, r5
 800619c:	f100 0710 	add.w	r7, r0, #16
 80061a0:	42b1      	cmp	r1, r6
 80061a2:	d335      	bcc.n	8006210 <rshift+0x98>
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	1eea      	subs	r2, r5, #3
 80061aa:	4296      	cmp	r6, r2
 80061ac:	bf38      	it	cc
 80061ae:	2300      	movcc	r3, #0
 80061b0:	4423      	add	r3, r4
 80061b2:	e015      	b.n	80061e0 <rshift+0x68>
 80061b4:	46a1      	mov	r9, r4
 80061b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80061ba:	f1c1 0820 	rsb	r8, r1, #32
 80061be:	40cf      	lsrs	r7, r1
 80061c0:	f105 0e04 	add.w	lr, r5, #4
 80061c4:	4576      	cmp	r6, lr
 80061c6:	46f4      	mov	ip, lr
 80061c8:	d816      	bhi.n	80061f8 <rshift+0x80>
 80061ca:	1a9a      	subs	r2, r3, r2
 80061cc:	0092      	lsls	r2, r2, #2
 80061ce:	3a04      	subs	r2, #4
 80061d0:	3501      	adds	r5, #1
 80061d2:	42ae      	cmp	r6, r5
 80061d4:	bf38      	it	cc
 80061d6:	2200      	movcc	r2, #0
 80061d8:	18a3      	adds	r3, r4, r2
 80061da:	50a7      	str	r7, [r4, r2]
 80061dc:	b107      	cbz	r7, 80061e0 <rshift+0x68>
 80061de:	3304      	adds	r3, #4
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	eba3 0204 	sub.w	r2, r3, r4
 80061e6:	bf08      	it	eq
 80061e8:	2300      	moveq	r3, #0
 80061ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80061ee:	6102      	str	r2, [r0, #16]
 80061f0:	bf08      	it	eq
 80061f2:	6143      	streq	r3, [r0, #20]
 80061f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061f8:	f8dc c000 	ldr.w	ip, [ip]
 80061fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8006200:	ea4c 0707 	orr.w	r7, ip, r7
 8006204:	f849 7b04 	str.w	r7, [r9], #4
 8006208:	f85e 7b04 	ldr.w	r7, [lr], #4
 800620c:	40cf      	lsrs	r7, r1
 800620e:	e7d9      	b.n	80061c4 <rshift+0x4c>
 8006210:	f851 cb04 	ldr.w	ip, [r1], #4
 8006214:	f847 cf04 	str.w	ip, [r7, #4]!
 8006218:	e7c2      	b.n	80061a0 <rshift+0x28>
 800621a:	4623      	mov	r3, r4
 800621c:	e7e0      	b.n	80061e0 <rshift+0x68>

0800621e <__hexdig_fun>:
 800621e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006222:	2b09      	cmp	r3, #9
 8006224:	d802      	bhi.n	800622c <__hexdig_fun+0xe>
 8006226:	3820      	subs	r0, #32
 8006228:	b2c0      	uxtb	r0, r0
 800622a:	4770      	bx	lr
 800622c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006230:	2b05      	cmp	r3, #5
 8006232:	d801      	bhi.n	8006238 <__hexdig_fun+0x1a>
 8006234:	3847      	subs	r0, #71	@ 0x47
 8006236:	e7f7      	b.n	8006228 <__hexdig_fun+0xa>
 8006238:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800623c:	2b05      	cmp	r3, #5
 800623e:	d801      	bhi.n	8006244 <__hexdig_fun+0x26>
 8006240:	3827      	subs	r0, #39	@ 0x27
 8006242:	e7f1      	b.n	8006228 <__hexdig_fun+0xa>
 8006244:	2000      	movs	r0, #0
 8006246:	4770      	bx	lr

08006248 <__gethex>:
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	468a      	mov	sl, r1
 800624e:	4690      	mov	r8, r2
 8006250:	b085      	sub	sp, #20
 8006252:	9302      	str	r3, [sp, #8]
 8006254:	680b      	ldr	r3, [r1, #0]
 8006256:	9001      	str	r0, [sp, #4]
 8006258:	1c9c      	adds	r4, r3, #2
 800625a:	46a1      	mov	r9, r4
 800625c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006260:	2830      	cmp	r0, #48	@ 0x30
 8006262:	d0fa      	beq.n	800625a <__gethex+0x12>
 8006264:	eba9 0303 	sub.w	r3, r9, r3
 8006268:	f1a3 0b02 	sub.w	fp, r3, #2
 800626c:	f7ff ffd7 	bl	800621e <__hexdig_fun>
 8006270:	4605      	mov	r5, r0
 8006272:	2800      	cmp	r0, #0
 8006274:	d168      	bne.n	8006348 <__gethex+0x100>
 8006276:	2201      	movs	r2, #1
 8006278:	4648      	mov	r0, r9
 800627a:	499f      	ldr	r1, [pc, #636]	@ (80064f8 <__gethex+0x2b0>)
 800627c:	f7ff ff14 	bl	80060a8 <strncmp>
 8006280:	4607      	mov	r7, r0
 8006282:	2800      	cmp	r0, #0
 8006284:	d167      	bne.n	8006356 <__gethex+0x10e>
 8006286:	f899 0001 	ldrb.w	r0, [r9, #1]
 800628a:	4626      	mov	r6, r4
 800628c:	f7ff ffc7 	bl	800621e <__hexdig_fun>
 8006290:	2800      	cmp	r0, #0
 8006292:	d062      	beq.n	800635a <__gethex+0x112>
 8006294:	4623      	mov	r3, r4
 8006296:	7818      	ldrb	r0, [r3, #0]
 8006298:	4699      	mov	r9, r3
 800629a:	2830      	cmp	r0, #48	@ 0x30
 800629c:	f103 0301 	add.w	r3, r3, #1
 80062a0:	d0f9      	beq.n	8006296 <__gethex+0x4e>
 80062a2:	f7ff ffbc 	bl	800621e <__hexdig_fun>
 80062a6:	fab0 f580 	clz	r5, r0
 80062aa:	f04f 0b01 	mov.w	fp, #1
 80062ae:	096d      	lsrs	r5, r5, #5
 80062b0:	464a      	mov	r2, r9
 80062b2:	4616      	mov	r6, r2
 80062b4:	7830      	ldrb	r0, [r6, #0]
 80062b6:	3201      	adds	r2, #1
 80062b8:	f7ff ffb1 	bl	800621e <__hexdig_fun>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d1f8      	bne.n	80062b2 <__gethex+0x6a>
 80062c0:	2201      	movs	r2, #1
 80062c2:	4630      	mov	r0, r6
 80062c4:	498c      	ldr	r1, [pc, #560]	@ (80064f8 <__gethex+0x2b0>)
 80062c6:	f7ff feef 	bl	80060a8 <strncmp>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d13f      	bne.n	800634e <__gethex+0x106>
 80062ce:	b944      	cbnz	r4, 80062e2 <__gethex+0x9a>
 80062d0:	1c74      	adds	r4, r6, #1
 80062d2:	4622      	mov	r2, r4
 80062d4:	4616      	mov	r6, r2
 80062d6:	7830      	ldrb	r0, [r6, #0]
 80062d8:	3201      	adds	r2, #1
 80062da:	f7ff ffa0 	bl	800621e <__hexdig_fun>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d1f8      	bne.n	80062d4 <__gethex+0x8c>
 80062e2:	1ba4      	subs	r4, r4, r6
 80062e4:	00a7      	lsls	r7, r4, #2
 80062e6:	7833      	ldrb	r3, [r6, #0]
 80062e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80062ec:	2b50      	cmp	r3, #80	@ 0x50
 80062ee:	d13e      	bne.n	800636e <__gethex+0x126>
 80062f0:	7873      	ldrb	r3, [r6, #1]
 80062f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80062f4:	d033      	beq.n	800635e <__gethex+0x116>
 80062f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80062f8:	d034      	beq.n	8006364 <__gethex+0x11c>
 80062fa:	2400      	movs	r4, #0
 80062fc:	1c71      	adds	r1, r6, #1
 80062fe:	7808      	ldrb	r0, [r1, #0]
 8006300:	f7ff ff8d 	bl	800621e <__hexdig_fun>
 8006304:	1e43      	subs	r3, r0, #1
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b18      	cmp	r3, #24
 800630a:	d830      	bhi.n	800636e <__gethex+0x126>
 800630c:	f1a0 0210 	sub.w	r2, r0, #16
 8006310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006314:	f7ff ff83 	bl	800621e <__hexdig_fun>
 8006318:	f100 3cff 	add.w	ip, r0, #4294967295
 800631c:	fa5f fc8c 	uxtb.w	ip, ip
 8006320:	f1bc 0f18 	cmp.w	ip, #24
 8006324:	f04f 030a 	mov.w	r3, #10
 8006328:	d91e      	bls.n	8006368 <__gethex+0x120>
 800632a:	b104      	cbz	r4, 800632e <__gethex+0xe6>
 800632c:	4252      	negs	r2, r2
 800632e:	4417      	add	r7, r2
 8006330:	f8ca 1000 	str.w	r1, [sl]
 8006334:	b1ed      	cbz	r5, 8006372 <__gethex+0x12a>
 8006336:	f1bb 0f00 	cmp.w	fp, #0
 800633a:	bf0c      	ite	eq
 800633c:	2506      	moveq	r5, #6
 800633e:	2500      	movne	r5, #0
 8006340:	4628      	mov	r0, r5
 8006342:	b005      	add	sp, #20
 8006344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006348:	2500      	movs	r5, #0
 800634a:	462c      	mov	r4, r5
 800634c:	e7b0      	b.n	80062b0 <__gethex+0x68>
 800634e:	2c00      	cmp	r4, #0
 8006350:	d1c7      	bne.n	80062e2 <__gethex+0x9a>
 8006352:	4627      	mov	r7, r4
 8006354:	e7c7      	b.n	80062e6 <__gethex+0x9e>
 8006356:	464e      	mov	r6, r9
 8006358:	462f      	mov	r7, r5
 800635a:	2501      	movs	r5, #1
 800635c:	e7c3      	b.n	80062e6 <__gethex+0x9e>
 800635e:	2400      	movs	r4, #0
 8006360:	1cb1      	adds	r1, r6, #2
 8006362:	e7cc      	b.n	80062fe <__gethex+0xb6>
 8006364:	2401      	movs	r4, #1
 8006366:	e7fb      	b.n	8006360 <__gethex+0x118>
 8006368:	fb03 0002 	mla	r0, r3, r2, r0
 800636c:	e7ce      	b.n	800630c <__gethex+0xc4>
 800636e:	4631      	mov	r1, r6
 8006370:	e7de      	b.n	8006330 <__gethex+0xe8>
 8006372:	4629      	mov	r1, r5
 8006374:	eba6 0309 	sub.w	r3, r6, r9
 8006378:	3b01      	subs	r3, #1
 800637a:	2b07      	cmp	r3, #7
 800637c:	dc0a      	bgt.n	8006394 <__gethex+0x14c>
 800637e:	9801      	ldr	r0, [sp, #4]
 8006380:	f7fe f954 	bl	800462c <_Balloc>
 8006384:	4604      	mov	r4, r0
 8006386:	b940      	cbnz	r0, 800639a <__gethex+0x152>
 8006388:	4602      	mov	r2, r0
 800638a:	21e4      	movs	r1, #228	@ 0xe4
 800638c:	4b5b      	ldr	r3, [pc, #364]	@ (80064fc <__gethex+0x2b4>)
 800638e:	485c      	ldr	r0, [pc, #368]	@ (8006500 <__gethex+0x2b8>)
 8006390:	f7ff fec0 	bl	8006114 <__assert_func>
 8006394:	3101      	adds	r1, #1
 8006396:	105b      	asrs	r3, r3, #1
 8006398:	e7ef      	b.n	800637a <__gethex+0x132>
 800639a:	2300      	movs	r3, #0
 800639c:	f100 0a14 	add.w	sl, r0, #20
 80063a0:	4655      	mov	r5, sl
 80063a2:	469b      	mov	fp, r3
 80063a4:	45b1      	cmp	r9, r6
 80063a6:	d337      	bcc.n	8006418 <__gethex+0x1d0>
 80063a8:	f845 bb04 	str.w	fp, [r5], #4
 80063ac:	eba5 050a 	sub.w	r5, r5, sl
 80063b0:	10ad      	asrs	r5, r5, #2
 80063b2:	6125      	str	r5, [r4, #16]
 80063b4:	4658      	mov	r0, fp
 80063b6:	f7fe fa2b 	bl	8004810 <__hi0bits>
 80063ba:	016d      	lsls	r5, r5, #5
 80063bc:	f8d8 6000 	ldr.w	r6, [r8]
 80063c0:	1a2d      	subs	r5, r5, r0
 80063c2:	42b5      	cmp	r5, r6
 80063c4:	dd54      	ble.n	8006470 <__gethex+0x228>
 80063c6:	1bad      	subs	r5, r5, r6
 80063c8:	4629      	mov	r1, r5
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7fe fdb3 	bl	8004f36 <__any_on>
 80063d0:	4681      	mov	r9, r0
 80063d2:	b178      	cbz	r0, 80063f4 <__gethex+0x1ac>
 80063d4:	f04f 0901 	mov.w	r9, #1
 80063d8:	1e6b      	subs	r3, r5, #1
 80063da:	1159      	asrs	r1, r3, #5
 80063dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80063e0:	f003 021f 	and.w	r2, r3, #31
 80063e4:	fa09 f202 	lsl.w	r2, r9, r2
 80063e8:	420a      	tst	r2, r1
 80063ea:	d003      	beq.n	80063f4 <__gethex+0x1ac>
 80063ec:	454b      	cmp	r3, r9
 80063ee:	dc36      	bgt.n	800645e <__gethex+0x216>
 80063f0:	f04f 0902 	mov.w	r9, #2
 80063f4:	4629      	mov	r1, r5
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff febe 	bl	8006178 <rshift>
 80063fc:	442f      	add	r7, r5
 80063fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006402:	42bb      	cmp	r3, r7
 8006404:	da42      	bge.n	800648c <__gethex+0x244>
 8006406:	4621      	mov	r1, r4
 8006408:	9801      	ldr	r0, [sp, #4]
 800640a:	f7fe f94f 	bl	80046ac <_Bfree>
 800640e:	2300      	movs	r3, #0
 8006410:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006412:	25a3      	movs	r5, #163	@ 0xa3
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e793      	b.n	8006340 <__gethex+0xf8>
 8006418:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800641c:	2a2e      	cmp	r2, #46	@ 0x2e
 800641e:	d012      	beq.n	8006446 <__gethex+0x1fe>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d104      	bne.n	800642e <__gethex+0x1e6>
 8006424:	f845 bb04 	str.w	fp, [r5], #4
 8006428:	f04f 0b00 	mov.w	fp, #0
 800642c:	465b      	mov	r3, fp
 800642e:	7830      	ldrb	r0, [r6, #0]
 8006430:	9303      	str	r3, [sp, #12]
 8006432:	f7ff fef4 	bl	800621e <__hexdig_fun>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	f000 000f 	and.w	r0, r0, #15
 800643c:	4098      	lsls	r0, r3
 800643e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006442:	3304      	adds	r3, #4
 8006444:	e7ae      	b.n	80063a4 <__gethex+0x15c>
 8006446:	45b1      	cmp	r9, r6
 8006448:	d8ea      	bhi.n	8006420 <__gethex+0x1d8>
 800644a:	2201      	movs	r2, #1
 800644c:	4630      	mov	r0, r6
 800644e:	492a      	ldr	r1, [pc, #168]	@ (80064f8 <__gethex+0x2b0>)
 8006450:	9303      	str	r3, [sp, #12]
 8006452:	f7ff fe29 	bl	80060a8 <strncmp>
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	2800      	cmp	r0, #0
 800645a:	d1e1      	bne.n	8006420 <__gethex+0x1d8>
 800645c:	e7a2      	b.n	80063a4 <__gethex+0x15c>
 800645e:	4620      	mov	r0, r4
 8006460:	1ea9      	subs	r1, r5, #2
 8006462:	f7fe fd68 	bl	8004f36 <__any_on>
 8006466:	2800      	cmp	r0, #0
 8006468:	d0c2      	beq.n	80063f0 <__gethex+0x1a8>
 800646a:	f04f 0903 	mov.w	r9, #3
 800646e:	e7c1      	b.n	80063f4 <__gethex+0x1ac>
 8006470:	da09      	bge.n	8006486 <__gethex+0x23e>
 8006472:	1b75      	subs	r5, r6, r5
 8006474:	4621      	mov	r1, r4
 8006476:	462a      	mov	r2, r5
 8006478:	9801      	ldr	r0, [sp, #4]
 800647a:	f7fe fb2d 	bl	8004ad8 <__lshift>
 800647e:	4604      	mov	r4, r0
 8006480:	1b7f      	subs	r7, r7, r5
 8006482:	f100 0a14 	add.w	sl, r0, #20
 8006486:	f04f 0900 	mov.w	r9, #0
 800648a:	e7b8      	b.n	80063fe <__gethex+0x1b6>
 800648c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006490:	42bd      	cmp	r5, r7
 8006492:	dd6f      	ble.n	8006574 <__gethex+0x32c>
 8006494:	1bed      	subs	r5, r5, r7
 8006496:	42ae      	cmp	r6, r5
 8006498:	dc34      	bgt.n	8006504 <__gethex+0x2bc>
 800649a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d022      	beq.n	80064e8 <__gethex+0x2a0>
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d024      	beq.n	80064f0 <__gethex+0x2a8>
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d115      	bne.n	80064d6 <__gethex+0x28e>
 80064aa:	42ae      	cmp	r6, r5
 80064ac:	d113      	bne.n	80064d6 <__gethex+0x28e>
 80064ae:	2e01      	cmp	r6, #1
 80064b0:	d10b      	bne.n	80064ca <__gethex+0x282>
 80064b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064b6:	9a02      	ldr	r2, [sp, #8]
 80064b8:	2562      	movs	r5, #98	@ 0x62
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	2301      	movs	r3, #1
 80064be:	6123      	str	r3, [r4, #16]
 80064c0:	f8ca 3000 	str.w	r3, [sl]
 80064c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064c6:	601c      	str	r4, [r3, #0]
 80064c8:	e73a      	b.n	8006340 <__gethex+0xf8>
 80064ca:	4620      	mov	r0, r4
 80064cc:	1e71      	subs	r1, r6, #1
 80064ce:	f7fe fd32 	bl	8004f36 <__any_on>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d1ed      	bne.n	80064b2 <__gethex+0x26a>
 80064d6:	4621      	mov	r1, r4
 80064d8:	9801      	ldr	r0, [sp, #4]
 80064da:	f7fe f8e7 	bl	80046ac <_Bfree>
 80064de:	2300      	movs	r3, #0
 80064e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064e2:	2550      	movs	r5, #80	@ 0x50
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e72b      	b.n	8006340 <__gethex+0xf8>
 80064e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f3      	bne.n	80064d6 <__gethex+0x28e>
 80064ee:	e7e0      	b.n	80064b2 <__gethex+0x26a>
 80064f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1dd      	bne.n	80064b2 <__gethex+0x26a>
 80064f6:	e7ee      	b.n	80064d6 <__gethex+0x28e>
 80064f8:	08007060 	.word	0x08007060
 80064fc:	08006ef7 	.word	0x08006ef7
 8006500:	0800720e 	.word	0x0800720e
 8006504:	1e6f      	subs	r7, r5, #1
 8006506:	f1b9 0f00 	cmp.w	r9, #0
 800650a:	d130      	bne.n	800656e <__gethex+0x326>
 800650c:	b127      	cbz	r7, 8006518 <__gethex+0x2d0>
 800650e:	4639      	mov	r1, r7
 8006510:	4620      	mov	r0, r4
 8006512:	f7fe fd10 	bl	8004f36 <__any_on>
 8006516:	4681      	mov	r9, r0
 8006518:	2301      	movs	r3, #1
 800651a:	4629      	mov	r1, r5
 800651c:	1b76      	subs	r6, r6, r5
 800651e:	2502      	movs	r5, #2
 8006520:	117a      	asrs	r2, r7, #5
 8006522:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006526:	f007 071f 	and.w	r7, r7, #31
 800652a:	40bb      	lsls	r3, r7
 800652c:	4213      	tst	r3, r2
 800652e:	4620      	mov	r0, r4
 8006530:	bf18      	it	ne
 8006532:	f049 0902 	orrne.w	r9, r9, #2
 8006536:	f7ff fe1f 	bl	8006178 <rshift>
 800653a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800653e:	f1b9 0f00 	cmp.w	r9, #0
 8006542:	d047      	beq.n	80065d4 <__gethex+0x38c>
 8006544:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d015      	beq.n	8006578 <__gethex+0x330>
 800654c:	2b03      	cmp	r3, #3
 800654e:	d017      	beq.n	8006580 <__gethex+0x338>
 8006550:	2b01      	cmp	r3, #1
 8006552:	d109      	bne.n	8006568 <__gethex+0x320>
 8006554:	f019 0f02 	tst.w	r9, #2
 8006558:	d006      	beq.n	8006568 <__gethex+0x320>
 800655a:	f8da 3000 	ldr.w	r3, [sl]
 800655e:	ea49 0903 	orr.w	r9, r9, r3
 8006562:	f019 0f01 	tst.w	r9, #1
 8006566:	d10e      	bne.n	8006586 <__gethex+0x33e>
 8006568:	f045 0510 	orr.w	r5, r5, #16
 800656c:	e032      	b.n	80065d4 <__gethex+0x38c>
 800656e:	f04f 0901 	mov.w	r9, #1
 8006572:	e7d1      	b.n	8006518 <__gethex+0x2d0>
 8006574:	2501      	movs	r5, #1
 8006576:	e7e2      	b.n	800653e <__gethex+0x2f6>
 8006578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800657a:	f1c3 0301 	rsb	r3, r3, #1
 800657e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <__gethex+0x320>
 8006586:	f04f 0c00 	mov.w	ip, #0
 800658a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800658e:	f104 0314 	add.w	r3, r4, #20
 8006592:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006596:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800659a:	4618      	mov	r0, r3
 800659c:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80065a4:	d01b      	beq.n	80065de <__gethex+0x396>
 80065a6:	3201      	adds	r2, #1
 80065a8:	6002      	str	r2, [r0, #0]
 80065aa:	2d02      	cmp	r5, #2
 80065ac:	f104 0314 	add.w	r3, r4, #20
 80065b0:	d13c      	bne.n	800662c <__gethex+0x3e4>
 80065b2:	f8d8 2000 	ldr.w	r2, [r8]
 80065b6:	3a01      	subs	r2, #1
 80065b8:	42b2      	cmp	r2, r6
 80065ba:	d109      	bne.n	80065d0 <__gethex+0x388>
 80065bc:	2201      	movs	r2, #1
 80065be:	1171      	asrs	r1, r6, #5
 80065c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80065c4:	f006 061f 	and.w	r6, r6, #31
 80065c8:	fa02 f606 	lsl.w	r6, r2, r6
 80065cc:	421e      	tst	r6, r3
 80065ce:	d13a      	bne.n	8006646 <__gethex+0x3fe>
 80065d0:	f045 0520 	orr.w	r5, r5, #32
 80065d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065d6:	601c      	str	r4, [r3, #0]
 80065d8:	9b02      	ldr	r3, [sp, #8]
 80065da:	601f      	str	r7, [r3, #0]
 80065dc:	e6b0      	b.n	8006340 <__gethex+0xf8>
 80065de:	4299      	cmp	r1, r3
 80065e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80065e4:	d8d9      	bhi.n	800659a <__gethex+0x352>
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	459b      	cmp	fp, r3
 80065ea:	db17      	blt.n	800661c <__gethex+0x3d4>
 80065ec:	6861      	ldr	r1, [r4, #4]
 80065ee:	9801      	ldr	r0, [sp, #4]
 80065f0:	3101      	adds	r1, #1
 80065f2:	f7fe f81b 	bl	800462c <_Balloc>
 80065f6:	4681      	mov	r9, r0
 80065f8:	b918      	cbnz	r0, 8006602 <__gethex+0x3ba>
 80065fa:	4602      	mov	r2, r0
 80065fc:	2184      	movs	r1, #132	@ 0x84
 80065fe:	4b19      	ldr	r3, [pc, #100]	@ (8006664 <__gethex+0x41c>)
 8006600:	e6c5      	b.n	800638e <__gethex+0x146>
 8006602:	6922      	ldr	r2, [r4, #16]
 8006604:	f104 010c 	add.w	r1, r4, #12
 8006608:	3202      	adds	r2, #2
 800660a:	0092      	lsls	r2, r2, #2
 800660c:	300c      	adds	r0, #12
 800660e:	f7ff fd6d 	bl	80060ec <memcpy>
 8006612:	4621      	mov	r1, r4
 8006614:	9801      	ldr	r0, [sp, #4]
 8006616:	f7fe f849 	bl	80046ac <_Bfree>
 800661a:	464c      	mov	r4, r9
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	6122      	str	r2, [r4, #16]
 8006622:	2201      	movs	r2, #1
 8006624:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006628:	615a      	str	r2, [r3, #20]
 800662a:	e7be      	b.n	80065aa <__gethex+0x362>
 800662c:	6922      	ldr	r2, [r4, #16]
 800662e:	455a      	cmp	r2, fp
 8006630:	dd0b      	ble.n	800664a <__gethex+0x402>
 8006632:	2101      	movs	r1, #1
 8006634:	4620      	mov	r0, r4
 8006636:	f7ff fd9f 	bl	8006178 <rshift>
 800663a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800663e:	3701      	adds	r7, #1
 8006640:	42bb      	cmp	r3, r7
 8006642:	f6ff aee0 	blt.w	8006406 <__gethex+0x1be>
 8006646:	2501      	movs	r5, #1
 8006648:	e7c2      	b.n	80065d0 <__gethex+0x388>
 800664a:	f016 061f 	ands.w	r6, r6, #31
 800664e:	d0fa      	beq.n	8006646 <__gethex+0x3fe>
 8006650:	4453      	add	r3, sl
 8006652:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006656:	f7fe f8db 	bl	8004810 <__hi0bits>
 800665a:	f1c6 0620 	rsb	r6, r6, #32
 800665e:	42b0      	cmp	r0, r6
 8006660:	dbe7      	blt.n	8006632 <__gethex+0x3ea>
 8006662:	e7f0      	b.n	8006646 <__gethex+0x3fe>
 8006664:	08006ef7 	.word	0x08006ef7

08006668 <L_shift>:
 8006668:	f1c2 0208 	rsb	r2, r2, #8
 800666c:	0092      	lsls	r2, r2, #2
 800666e:	b570      	push	{r4, r5, r6, lr}
 8006670:	f1c2 0620 	rsb	r6, r2, #32
 8006674:	6843      	ldr	r3, [r0, #4]
 8006676:	6804      	ldr	r4, [r0, #0]
 8006678:	fa03 f506 	lsl.w	r5, r3, r6
 800667c:	432c      	orrs	r4, r5
 800667e:	40d3      	lsrs	r3, r2
 8006680:	6004      	str	r4, [r0, #0]
 8006682:	f840 3f04 	str.w	r3, [r0, #4]!
 8006686:	4288      	cmp	r0, r1
 8006688:	d3f4      	bcc.n	8006674 <L_shift+0xc>
 800668a:	bd70      	pop	{r4, r5, r6, pc}

0800668c <__match>:
 800668c:	b530      	push	{r4, r5, lr}
 800668e:	6803      	ldr	r3, [r0, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006696:	b914      	cbnz	r4, 800669e <__match+0x12>
 8006698:	6003      	str	r3, [r0, #0]
 800669a:	2001      	movs	r0, #1
 800669c:	bd30      	pop	{r4, r5, pc}
 800669e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80066a6:	2d19      	cmp	r5, #25
 80066a8:	bf98      	it	ls
 80066aa:	3220      	addls	r2, #32
 80066ac:	42a2      	cmp	r2, r4
 80066ae:	d0f0      	beq.n	8006692 <__match+0x6>
 80066b0:	2000      	movs	r0, #0
 80066b2:	e7f3      	b.n	800669c <__match+0x10>

080066b4 <__hexnan>:
 80066b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	2500      	movs	r5, #0
 80066ba:	680b      	ldr	r3, [r1, #0]
 80066bc:	4682      	mov	sl, r0
 80066be:	115e      	asrs	r6, r3, #5
 80066c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80066c4:	f013 031f 	ands.w	r3, r3, #31
 80066c8:	bf18      	it	ne
 80066ca:	3604      	addne	r6, #4
 80066cc:	1f37      	subs	r7, r6, #4
 80066ce:	4690      	mov	r8, r2
 80066d0:	46b9      	mov	r9, r7
 80066d2:	463c      	mov	r4, r7
 80066d4:	46ab      	mov	fp, r5
 80066d6:	b087      	sub	sp, #28
 80066d8:	6801      	ldr	r1, [r0, #0]
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80066e0:	9502      	str	r5, [sp, #8]
 80066e2:	784a      	ldrb	r2, [r1, #1]
 80066e4:	1c4b      	adds	r3, r1, #1
 80066e6:	9303      	str	r3, [sp, #12]
 80066e8:	b342      	cbz	r2, 800673c <__hexnan+0x88>
 80066ea:	4610      	mov	r0, r2
 80066ec:	9105      	str	r1, [sp, #20]
 80066ee:	9204      	str	r2, [sp, #16]
 80066f0:	f7ff fd95 	bl	800621e <__hexdig_fun>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d151      	bne.n	800679c <__hexnan+0xe8>
 80066f8:	9a04      	ldr	r2, [sp, #16]
 80066fa:	9905      	ldr	r1, [sp, #20]
 80066fc:	2a20      	cmp	r2, #32
 80066fe:	d818      	bhi.n	8006732 <__hexnan+0x7e>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	459b      	cmp	fp, r3
 8006704:	dd13      	ble.n	800672e <__hexnan+0x7a>
 8006706:	454c      	cmp	r4, r9
 8006708:	d206      	bcs.n	8006718 <__hexnan+0x64>
 800670a:	2d07      	cmp	r5, #7
 800670c:	dc04      	bgt.n	8006718 <__hexnan+0x64>
 800670e:	462a      	mov	r2, r5
 8006710:	4649      	mov	r1, r9
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff ffa8 	bl	8006668 <L_shift>
 8006718:	4544      	cmp	r4, r8
 800671a:	d952      	bls.n	80067c2 <__hexnan+0x10e>
 800671c:	2300      	movs	r3, #0
 800671e:	f1a4 0904 	sub.w	r9, r4, #4
 8006722:	f844 3c04 	str.w	r3, [r4, #-4]
 8006726:	461d      	mov	r5, r3
 8006728:	464c      	mov	r4, r9
 800672a:	f8cd b008 	str.w	fp, [sp, #8]
 800672e:	9903      	ldr	r1, [sp, #12]
 8006730:	e7d7      	b.n	80066e2 <__hexnan+0x2e>
 8006732:	2a29      	cmp	r2, #41	@ 0x29
 8006734:	d157      	bne.n	80067e6 <__hexnan+0x132>
 8006736:	3102      	adds	r1, #2
 8006738:	f8ca 1000 	str.w	r1, [sl]
 800673c:	f1bb 0f00 	cmp.w	fp, #0
 8006740:	d051      	beq.n	80067e6 <__hexnan+0x132>
 8006742:	454c      	cmp	r4, r9
 8006744:	d206      	bcs.n	8006754 <__hexnan+0xa0>
 8006746:	2d07      	cmp	r5, #7
 8006748:	dc04      	bgt.n	8006754 <__hexnan+0xa0>
 800674a:	462a      	mov	r2, r5
 800674c:	4649      	mov	r1, r9
 800674e:	4620      	mov	r0, r4
 8006750:	f7ff ff8a 	bl	8006668 <L_shift>
 8006754:	4544      	cmp	r4, r8
 8006756:	d936      	bls.n	80067c6 <__hexnan+0x112>
 8006758:	4623      	mov	r3, r4
 800675a:	f1a8 0204 	sub.w	r2, r8, #4
 800675e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006762:	429f      	cmp	r7, r3
 8006764:	f842 1f04 	str.w	r1, [r2, #4]!
 8006768:	d2f9      	bcs.n	800675e <__hexnan+0xaa>
 800676a:	1b3b      	subs	r3, r7, r4
 800676c:	f023 0303 	bic.w	r3, r3, #3
 8006770:	3304      	adds	r3, #4
 8006772:	3401      	adds	r4, #1
 8006774:	3e03      	subs	r6, #3
 8006776:	42b4      	cmp	r4, r6
 8006778:	bf88      	it	hi
 800677a:	2304      	movhi	r3, #4
 800677c:	2200      	movs	r2, #0
 800677e:	4443      	add	r3, r8
 8006780:	f843 2b04 	str.w	r2, [r3], #4
 8006784:	429f      	cmp	r7, r3
 8006786:	d2fb      	bcs.n	8006780 <__hexnan+0xcc>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	b91b      	cbnz	r3, 8006794 <__hexnan+0xe0>
 800678c:	4547      	cmp	r7, r8
 800678e:	d128      	bne.n	80067e2 <__hexnan+0x12e>
 8006790:	2301      	movs	r3, #1
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	2005      	movs	r0, #5
 8006796:	b007      	add	sp, #28
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	3501      	adds	r5, #1
 800679e:	2d08      	cmp	r5, #8
 80067a0:	f10b 0b01 	add.w	fp, fp, #1
 80067a4:	dd06      	ble.n	80067b4 <__hexnan+0x100>
 80067a6:	4544      	cmp	r4, r8
 80067a8:	d9c1      	bls.n	800672e <__hexnan+0x7a>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2501      	movs	r5, #1
 80067ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80067b2:	3c04      	subs	r4, #4
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	f000 000f 	and.w	r0, r0, #15
 80067ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80067be:	6020      	str	r0, [r4, #0]
 80067c0:	e7b5      	b.n	800672e <__hexnan+0x7a>
 80067c2:	2508      	movs	r5, #8
 80067c4:	e7b3      	b.n	800672e <__hexnan+0x7a>
 80067c6:	9b01      	ldr	r3, [sp, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0dd      	beq.n	8006788 <__hexnan+0xd4>
 80067cc:	f04f 32ff 	mov.w	r2, #4294967295
 80067d0:	f1c3 0320 	rsb	r3, r3, #32
 80067d4:	40da      	lsrs	r2, r3
 80067d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80067da:	4013      	ands	r3, r2
 80067dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80067e0:	e7d2      	b.n	8006788 <__hexnan+0xd4>
 80067e2:	3f04      	subs	r7, #4
 80067e4:	e7d0      	b.n	8006788 <__hexnan+0xd4>
 80067e6:	2004      	movs	r0, #4
 80067e8:	e7d5      	b.n	8006796 <__hexnan+0xe2>

080067ea <__ascii_mbtowc>:
 80067ea:	b082      	sub	sp, #8
 80067ec:	b901      	cbnz	r1, 80067f0 <__ascii_mbtowc+0x6>
 80067ee:	a901      	add	r1, sp, #4
 80067f0:	b142      	cbz	r2, 8006804 <__ascii_mbtowc+0x1a>
 80067f2:	b14b      	cbz	r3, 8006808 <__ascii_mbtowc+0x1e>
 80067f4:	7813      	ldrb	r3, [r2, #0]
 80067f6:	600b      	str	r3, [r1, #0]
 80067f8:	7812      	ldrb	r2, [r2, #0]
 80067fa:	1e10      	subs	r0, r2, #0
 80067fc:	bf18      	it	ne
 80067fe:	2001      	movne	r0, #1
 8006800:	b002      	add	sp, #8
 8006802:	4770      	bx	lr
 8006804:	4610      	mov	r0, r2
 8006806:	e7fb      	b.n	8006800 <__ascii_mbtowc+0x16>
 8006808:	f06f 0001 	mvn.w	r0, #1
 800680c:	e7f8      	b.n	8006800 <__ascii_mbtowc+0x16>

0800680e <_realloc_r>:
 800680e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	4680      	mov	r8, r0
 8006814:	4615      	mov	r5, r2
 8006816:	460c      	mov	r4, r1
 8006818:	b921      	cbnz	r1, 8006824 <_realloc_r+0x16>
 800681a:	4611      	mov	r1, r2
 800681c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006820:	f7fd be78 	b.w	8004514 <_malloc_r>
 8006824:	b92a      	cbnz	r2, 8006832 <_realloc_r+0x24>
 8006826:	f7fd fe03 	bl	8004430 <_free_r>
 800682a:	2400      	movs	r4, #0
 800682c:	4620      	mov	r0, r4
 800682e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006832:	f000 f840 	bl	80068b6 <_malloc_usable_size_r>
 8006836:	4285      	cmp	r5, r0
 8006838:	4606      	mov	r6, r0
 800683a:	d802      	bhi.n	8006842 <_realloc_r+0x34>
 800683c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006840:	d8f4      	bhi.n	800682c <_realloc_r+0x1e>
 8006842:	4629      	mov	r1, r5
 8006844:	4640      	mov	r0, r8
 8006846:	f7fd fe65 	bl	8004514 <_malloc_r>
 800684a:	4607      	mov	r7, r0
 800684c:	2800      	cmp	r0, #0
 800684e:	d0ec      	beq.n	800682a <_realloc_r+0x1c>
 8006850:	42b5      	cmp	r5, r6
 8006852:	462a      	mov	r2, r5
 8006854:	4621      	mov	r1, r4
 8006856:	bf28      	it	cs
 8006858:	4632      	movcs	r2, r6
 800685a:	f7ff fc47 	bl	80060ec <memcpy>
 800685e:	4621      	mov	r1, r4
 8006860:	4640      	mov	r0, r8
 8006862:	f7fd fde5 	bl	8004430 <_free_r>
 8006866:	463c      	mov	r4, r7
 8006868:	e7e0      	b.n	800682c <_realloc_r+0x1e>

0800686a <__ascii_wctomb>:
 800686a:	4603      	mov	r3, r0
 800686c:	4608      	mov	r0, r1
 800686e:	b141      	cbz	r1, 8006882 <__ascii_wctomb+0x18>
 8006870:	2aff      	cmp	r2, #255	@ 0xff
 8006872:	d904      	bls.n	800687e <__ascii_wctomb+0x14>
 8006874:	228a      	movs	r2, #138	@ 0x8a
 8006876:	f04f 30ff 	mov.w	r0, #4294967295
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	4770      	bx	lr
 800687e:	2001      	movs	r0, #1
 8006880:	700a      	strb	r2, [r1, #0]
 8006882:	4770      	bx	lr

08006884 <fiprintf>:
 8006884:	b40e      	push	{r1, r2, r3}
 8006886:	b503      	push	{r0, r1, lr}
 8006888:	4601      	mov	r1, r0
 800688a:	ab03      	add	r3, sp, #12
 800688c:	4805      	ldr	r0, [pc, #20]	@ (80068a4 <fiprintf+0x20>)
 800688e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006892:	6800      	ldr	r0, [r0, #0]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	f000 f83d 	bl	8006914 <_vfiprintf_r>
 800689a:	b002      	add	sp, #8
 800689c:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a0:	b003      	add	sp, #12
 80068a2:	4770      	bx	lr
 80068a4:	2000002c 	.word	0x2000002c

080068a8 <abort>:
 80068a8:	2006      	movs	r0, #6
 80068aa:	b508      	push	{r3, lr}
 80068ac:	f000 fa06 	bl	8006cbc <raise>
 80068b0:	2001      	movs	r0, #1
 80068b2:	f7fa ff76 	bl	80017a2 <_exit>

080068b6 <_malloc_usable_size_r>:
 80068b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ba:	1f18      	subs	r0, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bfbc      	itt	lt
 80068c0:	580b      	ldrlt	r3, [r1, r0]
 80068c2:	18c0      	addlt	r0, r0, r3
 80068c4:	4770      	bx	lr

080068c6 <__sfputc_r>:
 80068c6:	6893      	ldr	r3, [r2, #8]
 80068c8:	b410      	push	{r4}
 80068ca:	3b01      	subs	r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	6093      	str	r3, [r2, #8]
 80068d0:	da07      	bge.n	80068e2 <__sfputc_r+0x1c>
 80068d2:	6994      	ldr	r4, [r2, #24]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	db01      	blt.n	80068dc <__sfputc_r+0x16>
 80068d8:	290a      	cmp	r1, #10
 80068da:	d102      	bne.n	80068e2 <__sfputc_r+0x1c>
 80068dc:	bc10      	pop	{r4}
 80068de:	f000 b931 	b.w	8006b44 <__swbuf_r>
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	1c58      	adds	r0, r3, #1
 80068e6:	6010      	str	r0, [r2, #0]
 80068e8:	7019      	strb	r1, [r3, #0]
 80068ea:	4608      	mov	r0, r1
 80068ec:	bc10      	pop	{r4}
 80068ee:	4770      	bx	lr

080068f0 <__sfputs_r>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	4606      	mov	r6, r0
 80068f4:	460f      	mov	r7, r1
 80068f6:	4614      	mov	r4, r2
 80068f8:	18d5      	adds	r5, r2, r3
 80068fa:	42ac      	cmp	r4, r5
 80068fc:	d101      	bne.n	8006902 <__sfputs_r+0x12>
 80068fe:	2000      	movs	r0, #0
 8006900:	e007      	b.n	8006912 <__sfputs_r+0x22>
 8006902:	463a      	mov	r2, r7
 8006904:	4630      	mov	r0, r6
 8006906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800690a:	f7ff ffdc 	bl	80068c6 <__sfputc_r>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d1f3      	bne.n	80068fa <__sfputs_r+0xa>
 8006912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006914 <_vfiprintf_r>:
 8006914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006918:	460d      	mov	r5, r1
 800691a:	4614      	mov	r4, r2
 800691c:	4698      	mov	r8, r3
 800691e:	4606      	mov	r6, r0
 8006920:	b09d      	sub	sp, #116	@ 0x74
 8006922:	b118      	cbz	r0, 800692c <_vfiprintf_r+0x18>
 8006924:	6a03      	ldr	r3, [r0, #32]
 8006926:	b90b      	cbnz	r3, 800692c <_vfiprintf_r+0x18>
 8006928:	f7fc fe06 	bl	8003538 <__sinit>
 800692c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800692e:	07d9      	lsls	r1, r3, #31
 8006930:	d405      	bmi.n	800693e <_vfiprintf_r+0x2a>
 8006932:	89ab      	ldrh	r3, [r5, #12]
 8006934:	059a      	lsls	r2, r3, #22
 8006936:	d402      	bmi.n	800693e <_vfiprintf_r+0x2a>
 8006938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800693a:	f7fc ff14 	bl	8003766 <__retarget_lock_acquire_recursive>
 800693e:	89ab      	ldrh	r3, [r5, #12]
 8006940:	071b      	lsls	r3, r3, #28
 8006942:	d501      	bpl.n	8006948 <_vfiprintf_r+0x34>
 8006944:	692b      	ldr	r3, [r5, #16]
 8006946:	b99b      	cbnz	r3, 8006970 <_vfiprintf_r+0x5c>
 8006948:	4629      	mov	r1, r5
 800694a:	4630      	mov	r0, r6
 800694c:	f000 f938 	bl	8006bc0 <__swsetup_r>
 8006950:	b170      	cbz	r0, 8006970 <_vfiprintf_r+0x5c>
 8006952:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006954:	07dc      	lsls	r4, r3, #31
 8006956:	d504      	bpl.n	8006962 <_vfiprintf_r+0x4e>
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	b01d      	add	sp, #116	@ 0x74
 800695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006962:	89ab      	ldrh	r3, [r5, #12]
 8006964:	0598      	lsls	r0, r3, #22
 8006966:	d4f7      	bmi.n	8006958 <_vfiprintf_r+0x44>
 8006968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800696a:	f7fc fefd 	bl	8003768 <__retarget_lock_release_recursive>
 800696e:	e7f3      	b.n	8006958 <_vfiprintf_r+0x44>
 8006970:	2300      	movs	r3, #0
 8006972:	9309      	str	r3, [sp, #36]	@ 0x24
 8006974:	2320      	movs	r3, #32
 8006976:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800697a:	2330      	movs	r3, #48	@ 0x30
 800697c:	f04f 0901 	mov.w	r9, #1
 8006980:	f8cd 800c 	str.w	r8, [sp, #12]
 8006984:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006b30 <_vfiprintf_r+0x21c>
 8006988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800698c:	4623      	mov	r3, r4
 800698e:	469a      	mov	sl, r3
 8006990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006994:	b10a      	cbz	r2, 800699a <_vfiprintf_r+0x86>
 8006996:	2a25      	cmp	r2, #37	@ 0x25
 8006998:	d1f9      	bne.n	800698e <_vfiprintf_r+0x7a>
 800699a:	ebba 0b04 	subs.w	fp, sl, r4
 800699e:	d00b      	beq.n	80069b8 <_vfiprintf_r+0xa4>
 80069a0:	465b      	mov	r3, fp
 80069a2:	4622      	mov	r2, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff ffa2 	bl	80068f0 <__sfputs_r>
 80069ac:	3001      	adds	r0, #1
 80069ae:	f000 80a7 	beq.w	8006b00 <_vfiprintf_r+0x1ec>
 80069b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069b4:	445a      	add	r2, fp
 80069b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80069b8:	f89a 3000 	ldrb.w	r3, [sl]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 809f 	beq.w	8006b00 <_vfiprintf_r+0x1ec>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069cc:	f10a 0a01 	add.w	sl, sl, #1
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	9307      	str	r3, [sp, #28]
 80069d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80069da:	4654      	mov	r4, sl
 80069dc:	2205      	movs	r2, #5
 80069de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e2:	4853      	ldr	r0, [pc, #332]	@ (8006b30 <_vfiprintf_r+0x21c>)
 80069e4:	f7fc fec1 	bl	800376a <memchr>
 80069e8:	9a04      	ldr	r2, [sp, #16]
 80069ea:	b9d8      	cbnz	r0, 8006a24 <_vfiprintf_r+0x110>
 80069ec:	06d1      	lsls	r1, r2, #27
 80069ee:	bf44      	itt	mi
 80069f0:	2320      	movmi	r3, #32
 80069f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069f6:	0713      	lsls	r3, r2, #28
 80069f8:	bf44      	itt	mi
 80069fa:	232b      	movmi	r3, #43	@ 0x2b
 80069fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a00:	f89a 3000 	ldrb.w	r3, [sl]
 8006a04:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a06:	d015      	beq.n	8006a34 <_vfiprintf_r+0x120>
 8006a08:	4654      	mov	r4, sl
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f04f 0c0a 	mov.w	ip, #10
 8006a10:	9a07      	ldr	r2, [sp, #28]
 8006a12:	4621      	mov	r1, r4
 8006a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a18:	3b30      	subs	r3, #48	@ 0x30
 8006a1a:	2b09      	cmp	r3, #9
 8006a1c:	d94b      	bls.n	8006ab6 <_vfiprintf_r+0x1a2>
 8006a1e:	b1b0      	cbz	r0, 8006a4e <_vfiprintf_r+0x13a>
 8006a20:	9207      	str	r2, [sp, #28]
 8006a22:	e014      	b.n	8006a4e <_vfiprintf_r+0x13a>
 8006a24:	eba0 0308 	sub.w	r3, r0, r8
 8006a28:	fa09 f303 	lsl.w	r3, r9, r3
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	46a2      	mov	sl, r4
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	e7d2      	b.n	80069da <_vfiprintf_r+0xc6>
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	1d19      	adds	r1, r3, #4
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	9103      	str	r1, [sp, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bfbb      	ittet	lt
 8006a40:	425b      	neglt	r3, r3
 8006a42:	f042 0202 	orrlt.w	r2, r2, #2
 8006a46:	9307      	strge	r3, [sp, #28]
 8006a48:	9307      	strlt	r3, [sp, #28]
 8006a4a:	bfb8      	it	lt
 8006a4c:	9204      	strlt	r2, [sp, #16]
 8006a4e:	7823      	ldrb	r3, [r4, #0]
 8006a50:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a52:	d10a      	bne.n	8006a6a <_vfiprintf_r+0x156>
 8006a54:	7863      	ldrb	r3, [r4, #1]
 8006a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a58:	d132      	bne.n	8006ac0 <_vfiprintf_r+0x1ac>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	3402      	adds	r4, #2
 8006a5e:	1d1a      	adds	r2, r3, #4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	9203      	str	r2, [sp, #12]
 8006a64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a68:	9305      	str	r3, [sp, #20]
 8006a6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006b34 <_vfiprintf_r+0x220>
 8006a6e:	2203      	movs	r2, #3
 8006a70:	4650      	mov	r0, sl
 8006a72:	7821      	ldrb	r1, [r4, #0]
 8006a74:	f7fc fe79 	bl	800376a <memchr>
 8006a78:	b138      	cbz	r0, 8006a8a <_vfiprintf_r+0x176>
 8006a7a:	2240      	movs	r2, #64	@ 0x40
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	eba0 000a 	sub.w	r0, r0, sl
 8006a82:	4082      	lsls	r2, r0
 8006a84:	4313      	orrs	r3, r2
 8006a86:	3401      	adds	r4, #1
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8e:	2206      	movs	r2, #6
 8006a90:	4829      	ldr	r0, [pc, #164]	@ (8006b38 <_vfiprintf_r+0x224>)
 8006a92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a96:	f7fc fe68 	bl	800376a <memchr>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d03f      	beq.n	8006b1e <_vfiprintf_r+0x20a>
 8006a9e:	4b27      	ldr	r3, [pc, #156]	@ (8006b3c <_vfiprintf_r+0x228>)
 8006aa0:	bb1b      	cbnz	r3, 8006aea <_vfiprintf_r+0x1d6>
 8006aa2:	9b03      	ldr	r3, [sp, #12]
 8006aa4:	3307      	adds	r3, #7
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	3308      	adds	r3, #8
 8006aac:	9303      	str	r3, [sp, #12]
 8006aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab0:	443b      	add	r3, r7
 8006ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ab4:	e76a      	b.n	800698c <_vfiprintf_r+0x78>
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	2001      	movs	r0, #1
 8006aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8006abe:	e7a8      	b.n	8006a12 <_vfiprintf_r+0xfe>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f04f 0c0a 	mov.w	ip, #10
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	3401      	adds	r4, #1
 8006aca:	9305      	str	r3, [sp, #20]
 8006acc:	4620      	mov	r0, r4
 8006ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad2:	3a30      	subs	r2, #48	@ 0x30
 8006ad4:	2a09      	cmp	r2, #9
 8006ad6:	d903      	bls.n	8006ae0 <_vfiprintf_r+0x1cc>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0c6      	beq.n	8006a6a <_vfiprintf_r+0x156>
 8006adc:	9105      	str	r1, [sp, #20]
 8006ade:	e7c4      	b.n	8006a6a <_vfiprintf_r+0x156>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae8:	e7f0      	b.n	8006acc <_vfiprintf_r+0x1b8>
 8006aea:	ab03      	add	r3, sp, #12
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	462a      	mov	r2, r5
 8006af0:	4630      	mov	r0, r6
 8006af2:	4b13      	ldr	r3, [pc, #76]	@ (8006b40 <_vfiprintf_r+0x22c>)
 8006af4:	a904      	add	r1, sp, #16
 8006af6:	f7fb fec5 	bl	8002884 <_printf_float>
 8006afa:	4607      	mov	r7, r0
 8006afc:	1c78      	adds	r0, r7, #1
 8006afe:	d1d6      	bne.n	8006aae <_vfiprintf_r+0x19a>
 8006b00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b02:	07d9      	lsls	r1, r3, #31
 8006b04:	d405      	bmi.n	8006b12 <_vfiprintf_r+0x1fe>
 8006b06:	89ab      	ldrh	r3, [r5, #12]
 8006b08:	059a      	lsls	r2, r3, #22
 8006b0a:	d402      	bmi.n	8006b12 <_vfiprintf_r+0x1fe>
 8006b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b0e:	f7fc fe2b 	bl	8003768 <__retarget_lock_release_recursive>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	065b      	lsls	r3, r3, #25
 8006b16:	f53f af1f 	bmi.w	8006958 <_vfiprintf_r+0x44>
 8006b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b1c:	e71e      	b.n	800695c <_vfiprintf_r+0x48>
 8006b1e:	ab03      	add	r3, sp, #12
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	462a      	mov	r2, r5
 8006b24:	4630      	mov	r0, r6
 8006b26:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <_vfiprintf_r+0x22c>)
 8006b28:	a904      	add	r1, sp, #16
 8006b2a:	f7fc f949 	bl	8002dc0 <_printf_i>
 8006b2e:	e7e4      	b.n	8006afa <_vfiprintf_r+0x1e6>
 8006b30:	080071b9 	.word	0x080071b9
 8006b34:	080071bf 	.word	0x080071bf
 8006b38:	080071c3 	.word	0x080071c3
 8006b3c:	08002885 	.word	0x08002885
 8006b40:	080068f1 	.word	0x080068f1

08006b44 <__swbuf_r>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	460e      	mov	r6, r1
 8006b48:	4614      	mov	r4, r2
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	b118      	cbz	r0, 8006b56 <__swbuf_r+0x12>
 8006b4e:	6a03      	ldr	r3, [r0, #32]
 8006b50:	b90b      	cbnz	r3, 8006b56 <__swbuf_r+0x12>
 8006b52:	f7fc fcf1 	bl	8003538 <__sinit>
 8006b56:	69a3      	ldr	r3, [r4, #24]
 8006b58:	60a3      	str	r3, [r4, #8]
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	071a      	lsls	r2, r3, #28
 8006b5e:	d501      	bpl.n	8006b64 <__swbuf_r+0x20>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	b943      	cbnz	r3, 8006b76 <__swbuf_r+0x32>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 f82a 	bl	8006bc0 <__swsetup_r>
 8006b6c:	b118      	cbz	r0, 8006b76 <__swbuf_r+0x32>
 8006b6e:	f04f 37ff 	mov.w	r7, #4294967295
 8006b72:	4638      	mov	r0, r7
 8006b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	6922      	ldr	r2, [r4, #16]
 8006b7a:	b2f6      	uxtb	r6, r6
 8006b7c:	1a98      	subs	r0, r3, r2
 8006b7e:	6963      	ldr	r3, [r4, #20]
 8006b80:	4637      	mov	r7, r6
 8006b82:	4283      	cmp	r3, r0
 8006b84:	dc05      	bgt.n	8006b92 <__swbuf_r+0x4e>
 8006b86:	4621      	mov	r1, r4
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f7ff fa4b 	bl	8006024 <_fflush_r>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d1ed      	bne.n	8006b6e <__swbuf_r+0x2a>
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	60a3      	str	r3, [r4, #8]
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	6022      	str	r2, [r4, #0]
 8006b9e:	701e      	strb	r6, [r3, #0]
 8006ba0:	6962      	ldr	r2, [r4, #20]
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d004      	beq.n	8006bb2 <__swbuf_r+0x6e>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	07db      	lsls	r3, r3, #31
 8006bac:	d5e1      	bpl.n	8006b72 <__swbuf_r+0x2e>
 8006bae:	2e0a      	cmp	r6, #10
 8006bb0:	d1df      	bne.n	8006b72 <__swbuf_r+0x2e>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f7ff fa35 	bl	8006024 <_fflush_r>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d0d9      	beq.n	8006b72 <__swbuf_r+0x2e>
 8006bbe:	e7d6      	b.n	8006b6e <__swbuf_r+0x2a>

08006bc0 <__swsetup_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4b29      	ldr	r3, [pc, #164]	@ (8006c68 <__swsetup_r+0xa8>)
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	460c      	mov	r4, r1
 8006bca:	b118      	cbz	r0, 8006bd4 <__swsetup_r+0x14>
 8006bcc:	6a03      	ldr	r3, [r0, #32]
 8006bce:	b90b      	cbnz	r3, 8006bd4 <__swsetup_r+0x14>
 8006bd0:	f7fc fcb2 	bl	8003538 <__sinit>
 8006bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd8:	0719      	lsls	r1, r3, #28
 8006bda:	d422      	bmi.n	8006c22 <__swsetup_r+0x62>
 8006bdc:	06da      	lsls	r2, r3, #27
 8006bde:	d407      	bmi.n	8006bf0 <__swsetup_r+0x30>
 8006be0:	2209      	movs	r2, #9
 8006be2:	602a      	str	r2, [r5, #0]
 8006be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	e033      	b.n	8006c58 <__swsetup_r+0x98>
 8006bf0:	0758      	lsls	r0, r3, #29
 8006bf2:	d512      	bpl.n	8006c1a <__swsetup_r+0x5a>
 8006bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bf6:	b141      	cbz	r1, 8006c0a <__swsetup_r+0x4a>
 8006bf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	d002      	beq.n	8006c06 <__swsetup_r+0x46>
 8006c00:	4628      	mov	r0, r5
 8006c02:	f7fd fc15 	bl	8004430 <_free_r>
 8006c06:	2300      	movs	r3, #0
 8006c08:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	2300      	movs	r3, #0
 8006c14:	6063      	str	r3, [r4, #4]
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f043 0308 	orr.w	r3, r3, #8
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	6923      	ldr	r3, [r4, #16]
 8006c24:	b94b      	cbnz	r3, 8006c3a <__swsetup_r+0x7a>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c30:	d003      	beq.n	8006c3a <__swsetup_r+0x7a>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f882 	bl	8006d3e <__smakebuf_r>
 8006c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c3e:	f013 0201 	ands.w	r2, r3, #1
 8006c42:	d00a      	beq.n	8006c5a <__swsetup_r+0x9a>
 8006c44:	2200      	movs	r2, #0
 8006c46:	60a2      	str	r2, [r4, #8]
 8006c48:	6962      	ldr	r2, [r4, #20]
 8006c4a:	4252      	negs	r2, r2
 8006c4c:	61a2      	str	r2, [r4, #24]
 8006c4e:	6922      	ldr	r2, [r4, #16]
 8006c50:	b942      	cbnz	r2, 8006c64 <__swsetup_r+0xa4>
 8006c52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c56:	d1c5      	bne.n	8006be4 <__swsetup_r+0x24>
 8006c58:	bd38      	pop	{r3, r4, r5, pc}
 8006c5a:	0799      	lsls	r1, r3, #30
 8006c5c:	bf58      	it	pl
 8006c5e:	6962      	ldrpl	r2, [r4, #20]
 8006c60:	60a2      	str	r2, [r4, #8]
 8006c62:	e7f4      	b.n	8006c4e <__swsetup_r+0x8e>
 8006c64:	2000      	movs	r0, #0
 8006c66:	e7f7      	b.n	8006c58 <__swsetup_r+0x98>
 8006c68:	2000002c 	.word	0x2000002c

08006c6c <_raise_r>:
 8006c6c:	291f      	cmp	r1, #31
 8006c6e:	b538      	push	{r3, r4, r5, lr}
 8006c70:	4605      	mov	r5, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	d904      	bls.n	8006c80 <_raise_r+0x14>
 8006c76:	2316      	movs	r3, #22
 8006c78:	6003      	str	r3, [r0, #0]
 8006c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c82:	b112      	cbz	r2, 8006c8a <_raise_r+0x1e>
 8006c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c88:	b94b      	cbnz	r3, 8006c9e <_raise_r+0x32>
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 f830 	bl	8006cf0 <_getpid_r>
 8006c90:	4622      	mov	r2, r4
 8006c92:	4601      	mov	r1, r0
 8006c94:	4628      	mov	r0, r5
 8006c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c9a:	f000 b817 	b.w	8006ccc <_kill_r>
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d00a      	beq.n	8006cb8 <_raise_r+0x4c>
 8006ca2:	1c59      	adds	r1, r3, #1
 8006ca4:	d103      	bne.n	8006cae <_raise_r+0x42>
 8006ca6:	2316      	movs	r3, #22
 8006ca8:	6003      	str	r3, [r0, #0]
 8006caa:	2001      	movs	r0, #1
 8006cac:	e7e7      	b.n	8006c7e <_raise_r+0x12>
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006cb6:	4798      	blx	r3
 8006cb8:	2000      	movs	r0, #0
 8006cba:	e7e0      	b.n	8006c7e <_raise_r+0x12>

08006cbc <raise>:
 8006cbc:	4b02      	ldr	r3, [pc, #8]	@ (8006cc8 <raise+0xc>)
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	f7ff bfd3 	b.w	8006c6c <_raise_r>
 8006cc6:	bf00      	nop
 8006cc8:	2000002c 	.word	0x2000002c

08006ccc <_kill_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	2300      	movs	r3, #0
 8006cd0:	4d06      	ldr	r5, [pc, #24]	@ (8006cec <_kill_r+0x20>)
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	f7fa fd52 	bl	8001782 <_kill>
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	d102      	bne.n	8006ce8 <_kill_r+0x1c>
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	b103      	cbz	r3, 8006ce8 <_kill_r+0x1c>
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	bf00      	nop
 8006cec:	20000348 	.word	0x20000348

08006cf0 <_getpid_r>:
 8006cf0:	f7fa bd40 	b.w	8001774 <_getpid>

08006cf4 <__swhatbuf_r>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfc:	4615      	mov	r5, r2
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	461e      	mov	r6, r3
 8006d02:	b096      	sub	sp, #88	@ 0x58
 8006d04:	da0c      	bge.n	8006d20 <__swhatbuf_r+0x2c>
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d0e:	bf14      	ite	ne
 8006d10:	2340      	movne	r3, #64	@ 0x40
 8006d12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d16:	2000      	movs	r0, #0
 8006d18:	6031      	str	r1, [r6, #0]
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	b016      	add	sp, #88	@ 0x58
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	466a      	mov	r2, sp
 8006d22:	f000 f849 	bl	8006db8 <_fstat_r>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	dbed      	blt.n	8006d06 <__swhatbuf_r+0x12>
 8006d2a:	9901      	ldr	r1, [sp, #4]
 8006d2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d34:	4259      	negs	r1, r3
 8006d36:	4159      	adcs	r1, r3
 8006d38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d3c:	e7eb      	b.n	8006d16 <__swhatbuf_r+0x22>

08006d3e <__smakebuf_r>:
 8006d3e:	898b      	ldrh	r3, [r1, #12]
 8006d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d42:	079d      	lsls	r5, r3, #30
 8006d44:	4606      	mov	r6, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	d507      	bpl.n	8006d5a <__smakebuf_r+0x1c>
 8006d4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	2301      	movs	r3, #1
 8006d54:	6163      	str	r3, [r4, #20]
 8006d56:	b003      	add	sp, #12
 8006d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d5a:	466a      	mov	r2, sp
 8006d5c:	ab01      	add	r3, sp, #4
 8006d5e:	f7ff ffc9 	bl	8006cf4 <__swhatbuf_r>
 8006d62:	9f00      	ldr	r7, [sp, #0]
 8006d64:	4605      	mov	r5, r0
 8006d66:	4639      	mov	r1, r7
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7fd fbd3 	bl	8004514 <_malloc_r>
 8006d6e:	b948      	cbnz	r0, 8006d84 <__smakebuf_r+0x46>
 8006d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d74:	059a      	lsls	r2, r3, #22
 8006d76:	d4ee      	bmi.n	8006d56 <__smakebuf_r+0x18>
 8006d78:	f023 0303 	bic.w	r3, r3, #3
 8006d7c:	f043 0302 	orr.w	r3, r3, #2
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	e7e2      	b.n	8006d4a <__smakebuf_r+0xc>
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d8e:	81a3      	strh	r3, [r4, #12]
 8006d90:	9b01      	ldr	r3, [sp, #4]
 8006d92:	6020      	str	r0, [r4, #0]
 8006d94:	b15b      	cbz	r3, 8006dae <__smakebuf_r+0x70>
 8006d96:	4630      	mov	r0, r6
 8006d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d9c:	f000 f81e 	bl	8006ddc <_isatty_r>
 8006da0:	b128      	cbz	r0, 8006dae <__smakebuf_r+0x70>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f023 0303 	bic.w	r3, r3, #3
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	431d      	orrs	r5, r3
 8006db2:	81a5      	strh	r5, [r4, #12]
 8006db4:	e7cf      	b.n	8006d56 <__smakebuf_r+0x18>
	...

08006db8 <_fstat_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4d06      	ldr	r5, [pc, #24]	@ (8006dd8 <_fstat_r+0x20>)
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	f7fa fd3b 	bl	8001840 <_fstat>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	d102      	bne.n	8006dd4 <_fstat_r+0x1c>
 8006dce:	682b      	ldr	r3, [r5, #0]
 8006dd0:	b103      	cbz	r3, 8006dd4 <_fstat_r+0x1c>
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	bd38      	pop	{r3, r4, r5, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000348 	.word	0x20000348

08006ddc <_isatty_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	2300      	movs	r3, #0
 8006de0:	4d05      	ldr	r5, [pc, #20]	@ (8006df8 <_isatty_r+0x1c>)
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f7fa fd39 	bl	800185e <_isatty>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_isatty_r+0x1a>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_isatty_r+0x1a>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	20000348 	.word	0x20000348

08006dfc <_init>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

08006e08 <_fini>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr
